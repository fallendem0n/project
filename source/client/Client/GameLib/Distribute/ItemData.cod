; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\Distribute\ItemData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_R4?$CDynamicPool@VCItemData@@@@6B@		; CDynamicPool<CItemData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCItemData@@@@@8		; CDynamicPool<CItemData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCItemData@@@@8		; CDynamicPool<CItemData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCItemData@@@@8		; CDynamicPool<CItemData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8	; CDynamicPool<CItemData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCItemData@@@@6B@		; CDynamicPool<CItemData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z	; CDynamicPool<CItemData>::`scalar deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCItemData@@@@UAEPAXI@Z:PROC	; CDynamicPool<CItemData>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPool@VCItemData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCItemData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCItemData@@@@6B@ ; CDynamicPool<CItemData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCItemData@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCItemData@@@@@8 ; CDynamicPool<CItemData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCItemData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8 ; CDynamicPool<CItemData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCItemData@@@@8 DD 00H		; CDynamicPool<CItemData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCItemData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCItemData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CItemData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCItemData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCItemData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCItemData@@@@6B@ DD 00H		; CDynamicPool<CItemData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCItemData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CItemData@@QAE@XZ				; CItemData::CItemData
PUBLIC	??1CItemData@@UAE@XZ				; CItemData::~CItemData
PUBLIC	?Clear@CItemData@@QAEXXZ			; CItemData::Clear
PUBLIC	?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetSummary
PUBLIC	?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetDescription
PUBLIC	?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetModelThing
PUBLIC	?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetSubModelThing
PUBLIC	?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetDropModelThing
PUBLIC	?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ ; CItemData::GetIconImage
PUBLIC	?GetLODModelThingCount@CItemData@@QAEKXZ	; CItemData::GetLODModelThingCount
PUBLIC	?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z ; CItemData::GetLODModelThingPointer
PUBLIC	?GetAttachingDataCount@CItemData@@QAEKXZ	; CItemData::GetAttachingDataCount
PUBLIC	?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CItemData::GetCollisionDataPointer
PUBLIC	?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CItemData::GetAttachingDataPointer
PUBLIC	?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ	; CItemData::GetTable
PUBLIC	?GetIndex@CItemData@@QBEKXZ			; CItemData::GetIndex
PUBLIC	?GetName@CItemData@@QBEPBDXZ			; CItemData::GetName
PUBLIC	?GetDescription@CItemData@@QBEPBDXZ		; CItemData::GetDescription
PUBLIC	?GetSummary@CItemData@@QBEPBDXZ			; CItemData::GetSummary
PUBLIC	?GetType@CItemData@@QBEEXZ			; CItemData::GetType
PUBLIC	?GetSubType@CItemData@@QBEEXZ			; CItemData::GetSubType
PUBLIC	?GetRefine@CItemData@@QBEIXZ			; CItemData::GetRefine
PUBLIC	?GetUseTypeString@CItemData@@QBEPBDXZ		; CItemData::GetUseTypeString
PUBLIC	?GetWeaponType@CItemData@@QBEKXZ		; CItemData::GetWeaponType
PUBLIC	?GetSize@CItemData@@QBEEXZ			; CItemData::GetSize
PUBLIC	?IsAntiFlag@CItemData@@QBEHK@Z			; CItemData::IsAntiFlag
PUBLIC	?IsFlag@CItemData@@QBEHK@Z			; CItemData::IsFlag
PUBLIC	?IsWearableFlag@CItemData@@QBEHK@Z		; CItemData::IsWearableFlag
PUBLIC	?HasNextGrade@CItemData@@QBEHXZ			; CItemData::HasNextGrade
PUBLIC	?GetWearFlags@CItemData@@QBEKXZ			; CItemData::GetWearFlags
PUBLIC	?GetIBuyItemPrice@CItemData@@QBEKXZ		; CItemData::GetIBuyItemPrice
PUBLIC	?GetISellItemPrice@CItemData@@QBEKXZ		; CItemData::GetISellItemPrice
PUBLIC	?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z	; CItemData::GetLimit
PUBLIC	?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z	; CItemData::GetApply
PUBLIC	?GetValue@CItemData@@QBEJE@Z			; CItemData::GetValue
PUBLIC	?GetSocket@CItemData@@QBEJE@Z			; CItemData::GetSocket
PUBLIC	?SetSocket@CItemData@@QAEJEK@Z			; CItemData::SetSocket
PUBLIC	?GetSocketCount@CItemData@@QBEHXZ		; CItemData::GetSocketCount
PUBLIC	?GetIconNumber@CItemData@@QBEKXZ		; CItemData::GetIconNumber
PUBLIC	?GetSpecularPoweru@CItemData@@QBEIXZ		; CItemData::GetSpecularPoweru
PUBLIC	?GetSpecularPowerf@CItemData@@QBEMXZ		; CItemData::GetSpecularPowerf
PUBLIC	?IsEquipment@CItemData@@QBEHXZ			; CItemData::IsEquipment
PUBLIC	?SetDefaultItemData@CItemData@@QAEXPBD0@Z	; CItemData::SetDefaultItemData
PUBLIC	?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ; CItemData::SetItemTableData
PUBLIC	?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ; CItemData::SetItemScale
PUBLIC	?GetItemScale@CItemData@@QAE_NKAAM00000@Z	; CItemData::GetItemScale
PUBLIC	?SetItemShiningTableData@CItemData@@QAEXEPBD@Z	; CItemData::SetItemShiningTableData
PUBLIC	?__LoadFiles@CItemData@@IAEXXZ			; CItemData::__LoadFiles
PUBLIC	?__SetIconImage@CItemData@@IAEXPBD@Z		; CItemData::__SetIconImage
PUBLIC	??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
PUBLIC	??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
PUBLIC	?DestroySystem@CItemData@@SAXXZ			; CItemData::DestroySystem
PUBLIC	?New@CItemData@@SAPAV1@XZ			; CItemData::New
PUBLIC	?Delete@CItemData@@SAXPAV1@@Z			; CItemData::Delete
PUBLIC	??_GCItemData@@UAEPAXI@Z			; CItemData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCItemData@@@@UAE@XZ		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
PUBLIC	?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z ; CDynamicPool<CItemData>::Delete
PUBLIC	?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
PUBLIC	??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A ; CItemData::ms_kPool
PUBLIC	??_7CItemData@@6B@				; CItemData::`vftable'
PUBLIC	??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@ ; `string'
PUBLIC	??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@	; `string'
PUBLIC	??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@ ; `string'
PUBLIC	??_C@_0M@IHDHIBML@JOB_WARRIOR@			; `string'
PUBLIC	??_C@_0N@IAFGBDIL@JOB_ASSASSIN@			; `string'
PUBLIC	??_C@_08IJIBKCOK@JOB_SURA@			; `string'
PUBLIC	??_C@_0L@FBDFJGPA@JOB_SHAMAN@			; `string'
PUBLIC	??_C@_01BIAFAFID@F@				; `string'
PUBLIC	??_C@_0N@OHMMNDLH@NOT_USE_TYPE@			; `string'
PUBLIC	??_C@_0L@JIILHJGL@USE_TUNING@			; `string'
PUBLIC	??_C@_0P@MKAMDACK@USE_DETACHMENT@		; `string'
PUBLIC	??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@		; `string'
PUBLIC	??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@	; `string'
PUBLIC	??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@		; `string'
PUBLIC	??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@		; `string'
PUBLIC	??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@	; `string'
PUBLIC	??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@ ; `string'
PUBLIC	??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@	; `string'
PUBLIC	??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@	; `string'
PUBLIC	??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@	; `string'
PUBLIC	??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@	; `string'
PUBLIC	??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CItemData@@6B@				; CItemData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemData@@@8				; CItemData `RTTI Type Descriptor'
PUBLIC	??_R3CItemData@@8				; CItemData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemData@@8				; CItemData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemData@@8			; CItemData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4059000000000000
PUBLIC	__real@42c80000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	??_ECItemData@@UAEPAXI@Z:PROC			; CItemData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CItemData@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CItemData@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CItemData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemData@@8 DD FLAT:??_R0?AVCItemData@@@8 ; CItemData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemData@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemData@@8
rdata$r	SEGMENT
??_R2CItemData@@8 DD FLAT:??_R1A@?0A@EA@CItemData@@8	; CItemData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CItemData@@8
rdata$r	SEGMENT
??_R3CItemData@@8 DD 00H				; CItemData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CItemData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemData@@@8
data$rs	SEGMENT
??_R0?AVCItemData@@@8 DD FLAT:??_7type_info@@6B@	; CItemData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CItemData@@6B@
rdata$r	SEGMENT
??_R4CItemData@@6B@ DD 00H				; CItemData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemData@@@8
	DD	FLAT:??_R3CItemData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@
CONST	SEGMENT
??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@ DB 'USE_UNKNOWN_TYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@
CONST	SEGMENT
??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@ DB 'USE_RESET_COSTUME_ATTR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@
CONST	SEGMENT
??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@ DB 'USE_CHANGE_COSTUME_ATTR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@
CONST	SEGMENT
??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@ DB 'USE_PUT_INTO_RING_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@
CONST	SEGMENT
??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@ DB 'USE_PUT_INTO_BELT_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@
CONST	SEGMENT
??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@ DB 'USE_PUT_INTO_ACCESS'
	DB	'ORY_SOCKET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@
CONST	SEGMENT
??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@ DB 'USE_ADD_ACCESSORY_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@
CONST	SEGMENT
??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@ DB 'USE_ADD_ATTRIBUTE2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@
CONST	SEGMENT
??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@ DB 'USE_ADD_ATTRIBUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@
CONST	SEGMENT
??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@ DB 'USE_CHANGE_ATTRIBUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@
CONST	SEGMENT
??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@ DB 'USE_CLEAN_SOCKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MKAMDACK@USE_DETACHMENT@
CONST	SEGMENT
??_C@_0P@MKAMDACK@USE_DETACHMENT@ DB 'USE_DETACHMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIILHJGL@USE_TUNING@
CONST	SEGMENT
??_C@_0L@JIILHJGL@USE_TUNING@ DB 'USE_TUNING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OHMMNDLH@NOT_USE_TYPE@
CONST	SEGMENT
??_C@_0N@OHMMNDLH@NOT_USE_TYPE@ DB 'NOT_USE_TYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F@
CONST	SEGMENT
??_C@_01BIAFAFID@F@ DB 'F', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
CONST	SEGMENT
??_C@_0L@FBDFJGPA@JOB_SHAMAN@ DB 'JOB_SHAMAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJIBKCOK@JOB_SURA@
CONST	SEGMENT
??_C@_08IJIBKCOK@JOB_SURA@ DB 'JOB_SURA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
CONST	SEGMENT
??_C@_0N@IAFGBDIL@JOB_ASSASSIN@ DB 'JOB_ASSASSIN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IHDHIBML@JOB_WARRIOR@
CONST	SEGMENT
??_C@_0M@IHDHIBML@JOB_WARRIOR@ DB 'JOB_WARRIOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@
CONST	SEGMENT
??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@ DB '%s not f'
	DB	'ound. CItemData::__SetIconImage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@
CONST	SEGMENT
??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@ DB 'icon/item/27995.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB
_DATA	SEGMENT
?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB DD FLAT:??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@ ; `CItemData::__SetIconImage'::`5'::c_szAlterIconImage
_DATA	ENDS
;	COMDAT ??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@
CONST	SEGMENT
??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@ DB 'd:/ymir wo'
	DB	'rk/item/etc/item_bag.gr2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CItemData@@6B@
CONST	SEGMENT
??_7CItemData@@6B@ DD FLAT:??_R4CItemData@@6B@		; CItemData::`vftable'
	DD	FLAT:??_ECItemData@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A DD FLAT:??_7?$CDynamicPool@VCItemData@@@@6B@ ; CItemData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CItemData@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CItemData@@SAPAV1@XZ$0
__ehfuncinfo$?New@CItemData@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CItemData@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CItemData@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0CItemData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CItemData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$8
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z PROC ; std::_Zero_range<CGraphicThing * *>, COMDAT

; 1806 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1807 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1808 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1809 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1810 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1811 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ENDP ; std::_Zero_range<CGraphicThing * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CItemData * *,CItemData * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CItemData * *,CItemData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1229 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1230 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00012	0f 87 ea 00 00
	00		 ja	 $LN82@Resize_rea

; 1232 :         }
; 1233 : 
; 1234 :         auto& _My_data    = _Mypair._Myval2;
; 1235 :         pointer& _Myfirst = _My_data._Myfirst;
; 1236 :         pointer& _Mylast  = _My_data._Mylast;
; 1237 : 
; 1238 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1232 :         }
; 1233 : 
; 1234 :         auto& _My_data    = _Mypair._Myval2;
; 1235 :         pointer& _Myfirst = _My_data._Myfirst;
; 1236 :         pointer& _Mylast  = _My_data._Mylast;
; 1237 : 
; 1238 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0002d	c1 f9 02	 sar	 ecx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 12		 jbe	 SHORT $LN10@Resize_rea

; 1689 :             return _Max; // geometric growth would overflow

  0003a	bf fc ff ff ff	 mov	 edi, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00045	83 c4 04	 add	 esp, 4
  00048	8b d8		 mov	 ebx, eax
  0004a	eb 42		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004c	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

  0004f	3b fb		 cmp	 edi, ebx
  00051	73 1a		 jae	 SHORT $LN11@Resize_rea

; 1695 :             return _Newsize; // geometric growth would be insufficient

  00053	8b fb		 mov	 edi, ebx
$LN18@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 69   :     return _Count * _Ty_size;

  00055	c1 e7 02	 shl	 edi, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00058	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0005e	72 1b		 jb	 SHORT $LN22@Resize_rea

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00066	83 c4 04	 add	 esp, 4
  00069	8b d8		 mov	 ebx, eax
  0006b	eb 21		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 64   :         if (_Count > _Max_possible) {

  0006d	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00073	0f 87 8e 00 00
	00		 ja	 $LN83@Resize_rea
  00079	eb da		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 243  :     if (_Bytes != 0) {

  0007b	85 ff		 test	 edi, edi
  0007d	74 0d		 je	 SHORT $LN23@Resize_rea

; 85   :         return ::operator new(_Bytes);

  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00085	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00088	8b d8		 mov	 ebx, eax
  0008a	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0008c	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1242 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0008e	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1824 :             _Zero_range(_PFirst, _PFirst + _Count);

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	2b c2		 sub	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1242 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00096	8d 0c 93	 lea	 ecx, DWORD PTR [ebx+edx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1824 :             _Zero_range(_PFirst, _PFirst + _Count);

  00099	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a3	53		 push	 ebx
  000a4	ff 76 04	 push	 DWORD PTR [esi+4]
  000a7	ff 36		 push	 DWORD PTR [esi]
  000a9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000ae	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b0	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	85 c0		 test	 eax, eax
  000b5	74 2c		 je	 SHORT $LN65@Resize_rea

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ba	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bc	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bf	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c5	72 12		 jb	 SHORT $LN75@Resize_rea

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ca	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000cd	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cf	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d5	77 26		 ja	 SHORT $LN72@Resize_rea

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000d7	8b c2		 mov	 eax, edx
$LN75@Resize_rea:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000d9	51		 push	 ecx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e0	83 c4 08	 add	 esp, 8
$LN65@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  000e3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000e6	89 1e		 mov	 DWORD PTR [esi], ebx
  000e8	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000eb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  000ee	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  000f1	5f		 pop	 edi
  000f2	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 1255 :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN72@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1231 :             _Xlength();

  00102	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
$LN83@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00107	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN80@Resize_rea:
  0010c	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4802 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]

; 4802 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00007	57		 push	 edi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL18@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL18@operator

; 2305 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2305 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2319 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@operator:

; 4378 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN14@operator

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN21@operator
$LL22@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN20@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL22@operator
$LN21@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN19@operator
$LN20@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN23@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN19@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN23@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN19@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN23@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN19@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN19@operator
$LN23@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN24@operator
$LN19@operator:
  0007c	33 c0		 xor	 eax, eax
$LN24@operator:

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN14@operator
  00082	5f		 pop	 edi
  00083	b0 01		 mov	 al, 1

; 4803 :     return _Left._Equal(_Right);
; 4804 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN14@operator:
  00088	5f		 pop	 edi

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 4803 :     return _Left._Equal(_Right);
; 4804 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CItemData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A ; CItemData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCItemData@@@@UAE@XZ ; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CItemData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CItemData::ms_kPool'', COMDAT

; 7    : CDynamicPool<CItemData>		CItemData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CItemData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CItemData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z PROC		; CDynamicPool<CItemData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCItemData@@@@UAE@XZ ; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z ENDP		; CDynamicPool<CItemData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z PROC ; CDynamicPool<CItemData>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z ENDP ; CDynamicPool<CItemData>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCItemData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCItemData@@@@UAE@XZ PROC		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCItemData@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1769 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCItemData@@@@UAE@XZ ENDP		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemData@@UAEPAXI@Z PROC				; CItemData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemData@@UAE@XZ	; CItemData::~CItemData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 58 06 00 00	 push	 1624			; 00000658H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCItemData@@UAEPAXI@Z ENDP				; CItemData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?Delete@CItemData@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkItemData$ = 8					; size = 4
?Delete@CItemData@@SAXPAV1@@Z PROC			; CItemData::Delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 18   : 	pkItemData->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Clear@CItemData@@QAEXXZ ; CItemData::Clear
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 19   : 	ms_kPool.Free(pkItemData);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 20   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
  00039	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 20   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CItemData@@SAXPAV1@@Z ENDP			; CItemData::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?New@CItemData@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CItemData@@SAPAV1@XZ PROC				; CItemData::New, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CItemData@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 58 06 00 00	 push	 1624			; 00000658H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CItemData@@QAE@XZ	; CItemData::CItemData
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 13   : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 14   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 13   : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 14   : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1624 :         return _My_data._Mylast[-1];

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1403 :         --_Mylast;

  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 14   : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CItemData@@SAPAV1@XZ$0:
  00000	68 58 06 00 00	 push	 1624			; 00000658H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CItemData@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CItemData@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CItemData@@SAPAV1@XZ ENDP				; CItemData::New
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?DestroySystem@CItemData@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CItemData@@SAXXZ PROC			; CItemData::DestroySystem, COMDAT

; 23   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 23   : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 269  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 25   : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16
  00041	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 25   : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CItemData@@SAXXZ ENDP			; CItemData::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	57		 push	 edi

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00008	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 b6 00 00
	00		 je	 $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00012	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00015	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00018	3b f8		 cmp	 edi, eax
  0001a	74 58		 je	 SHORT $LN10@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0001c	56		 push	 esi
  0001d	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
$LL11@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00022	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	72 2f		 jb	 SHORT $LN33@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00027	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00031	72 16		 jb	 SHORT $LN43@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00033	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00036	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00039	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00041	0f 87 87 00 00
	00		 ja	 $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00047	8b c2		 mov	 eax, edx
$LN43@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00053	83 c4 08	 add	 esp, 8
$LN33@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00056	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0005d	83 c7 30	 add	 edi, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00060	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00066	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0006a	83 c6 30	 add	 esi, 48			; 00000030H
  0006d	3b f8		 cmp	 edi, eax
  0006f	75 af		 jne	 SHORT $LL11@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00071	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00073	5e		 pop	 esi
$LN10@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00074	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00077	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007c	2b cf		 sub	 ecx, edi
  0007e	f7 e9		 imul	 ecx
  00080	c1 fa 03	 sar	 edx, 3
  00083	8b c2		 mov	 eax, edx
  00085	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00088	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0008d	c1 e1 04	 shl	 ecx, 4

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN68@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 26		 ja	 SHORT $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b fa		 mov	 edi, edx
$LN68@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	57		 push	 edi
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  000b1	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000b7	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  000ba	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1769 :             _Myend   = nullptr;

  000c1	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN4@vector:
  000c8	5f		 pop	 edi

; 717  :     }

  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
$LN65@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ce	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@vector:
  000d3	cc		 int	 3
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 717  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?__SetIconImage@CItemData@@IAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?__SetIconImage@CItemData@@IAEXPBD@Z PROC		; CItemData::__SetIconImage, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 206  : 	if (!CResourceManager::Instance().IsFileExist(c_szFileName))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00016	84 c0		 test	 al, al
  00018	75 35		 jne	 SHORT $LN2@SetIconIma

; 207  : 	{
; 208  : 		TraceError("%s not found. CItemData::__SetIconImage",c_szFileName);

  0001a	57		 push	 edi
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 209  : 		m_pIconImage = NULL;

  00028	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0

; 210  : #ifdef ENABLE_LOAD_ALTER_ITEMICON
; 211  : 		static const char* c_szAlterIconImage = "icon/item/27995.tga";
; 212  : 		if (CResourceManager::Instance().IsFileExist(c_szAlterIconImage))

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00038	ff 35 00 00 00
	00		 push	 DWORD PTR ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB
  0003e	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00043	84 c0		 test	 al, al
  00045	74 23		 je	 SHORT $LN5@SetIconIma

; 213  : 			m_pIconImage = (CGraphicSubImage *)CResourceManager::Instance().GetResourcePointer(c_szAlterIconImage);

  00047	ff 35 00 00 00
	00		 push	 DWORD PTR ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB

; 214  : #endif
; 215  : 	}

  0004d	eb 0a		 jmp	 SHORT $LN7@SetIconIma
$LN2@SetIconIma:

; 216  : 	else if (m_pIconImage == NULL)

  0004f	83 be ac 00 00
	00 00		 cmp	 DWORD PTR [esi+172], 0
  00056	75 12		 jne	 SHORT $LN5@SetIconIma

; 217  : 		m_pIconImage = (CGraphicSubImage *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00058	57		 push	 edi
$LN7@SetIconIma:

; 218  : }

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0005f	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00064	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
$LN5@SetIconIma:
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?__SetIconImage@CItemData@@IAEXPBD@Z ENDP		; CItemData::__SetIconImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?__LoadFiles@CItemData@@IAEXXZ
_TEXT	SEGMENT
_i$1$ = -8						; size = 4
$T1 = -1						; size = 1
?__LoadFiles@CItemData@@IAEXXZ PROC			; CItemData::__LoadFiles, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4019 :         return size() == 0;

  00009	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 180  : 	if (!m_strModelFileName.empty())

  0000d	74 1d		 je	 SHORT $LN5@LoadFiles
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0000f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00013	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 2306 :         if (_Large_string_engaged()) {

  00016	72 02		 jb	 SHORT $LN15@LoadFiles

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00018	8b 00		 mov	 eax, DWORD PTR [eax]
$LN15@LoadFiles:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 181  : 		m_pModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strModelFileName.c_str());

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00026	89 87 a0 00 00
	00		 mov	 DWORD PTR [edi+160], eax
$LN5@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4019 :         return size() == 0;

  0002c	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 183  : 	if (!m_strSubModelFileName.empty())

  00030	74 1d		 je	 SHORT $LN6@LoadFiles
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00032	83 7f 30 10	 cmp	 DWORD PTR [edi+48], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00036	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN24@LoadFiles

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@LoadFiles:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 184  : 		m_pSubModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strSubModelFileName.c_str());

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00049	89 87 a4 00 00
	00		 mov	 DWORD PTR [edi+164], eax
$LN6@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4019 :         return size() == 0;

  0004f	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 186  : 	if (!m_strDropModelFileName.empty())

  00053	74 1d		 je	 SHORT $LN7@LoadFiles
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00055	83 7f 48 10	 cmp	 DWORD PTR [edi+72], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00059	8d 47 34	 lea	 eax, DWORD PTR [edi+52]

; 2306 :         if (_Large_string_engaged()) {

  0005c	72 02		 jb	 SHORT $LN33@LoadFiles

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN33@LoadFiles:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 187  : 		m_pDropModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strDropModelFileName.c_str());

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0006c	89 87 a8 00 00
	00		 mov	 DWORD PTR [edi+168], eax
$LN7@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00072	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00078	3b 87 98 00 00
	00		 cmp	 eax, DWORD PTR [edi+152]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 190  : 	if (!m_strLODModelFileNameVector.empty())

  0007e	0f 84 dd 00 00
	00		 je	 $LN3@LoadFiles

; 192  : 		m_pLODModelThingVector.clear();

  00084	53		 push	 ebx
  00085	8d 9f b0 00 00
	00		 lea	 ebx, DWORD PTR [edi+176]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 192  : 		m_pLODModelThingVector.clear();

  00090	56		 push	 esi
  00091	8b 33		 mov	 esi, DWORD PTR [ebx]
  00093	89 73 04	 mov	 DWORD PTR [ebx+4], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00096	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  0009c	2b 8f 94 00 00
	00		 sub	 ecx, DWORD PTR [edi+148]
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b ca		 mov	 ecx, edx
  000a9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000ac	03 ca		 add	 ecx, edx

; 1272 :         if (_Newsize > _Oldsize) { // append

  000ae	74 2b		 je	 SHORT $LN45@LoadFiles

; 1273 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  000b0	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000b3	2b c6		 sub	 eax, esi
  000b5	c1 f8 02	 sar	 eax, 2

; 1274 :             if (_Newsize > _Oldcapacity) { // reallocate

  000b8	3b c8		 cmp	 ecx, eax
  000ba	76 0e		 jbe	 SHORT $LN46@LoadFiles

; 1275 :                 _Resize_reallocate(_Newsize, _Val);

  000bc	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  000bf	50		 push	 eax
  000c0	51		 push	 ecx
  000c1	8b cb		 mov	 ecx, ebx
  000c3	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>

; 1276 :                 return;

  000c8	eb 11		 jmp	 SHORT $LN45@LoadFiles
$LN46@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1824 :             _Zero_range(_PFirst, _PFirst + _Count);

  000ca	8d 34 8e	 lea	 esi, DWORD PTR [esi+ecx*4]
  000cd	56		 push	 esi
  000ce	ff 33		 push	 DWORD PTR [ebx]
  000d0	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>
  000d5	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1280 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000d8	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN45@LoadFiles:

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000db	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  000e1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000e6	8b b7 94 00 00
	00		 mov	 esi, DWORD PTR [edi+148]
  000ec	2b ce		 sub	 ecx, esi
  000ee	f7 e9		 imul	 ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 195  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  000f0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f7	c1 fa 02	 sar	 edx, 2
  000fa	8b c2		 mov	 eax, edx
  000fc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ff	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 195  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  00101	74 5c		 je	 SHORT $LN80@LoadFiles
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1548 :         auto& _My_data = _Mypair._Myval2;

  00103	33 db		 xor	 ebx, ebx
  00105	33 d2		 xor	 edx, edx
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00110	83 7c 33 14 10	 cmp	 DWORD PTR [ebx+esi+20], 16 ; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00115	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00118	72 02		 jb	 SHORT $LN70@LoadFiles

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0011a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN70@LoadFiles:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0011c	8b 87 b0 00 00
	00		 mov	 eax, DWORD PTR [edi+176]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 198  : 			m_pLODModelThingVector[i] = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_rstrLODModelFileName.c_str());

  00122	51		 push	 ecx
  00123	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00129	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 198  : 			m_pLODModelThingVector[i] = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_rstrLODModelFileName.c_str());

  0012c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00131	ff 45 f8	 inc	 DWORD PTR _i$1$[ebp]
  00134	83 c3 18	 add	 ebx, 24			; 00000018H
  00137	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00139	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0013e	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  00144	8b b7 94 00 00
	00		 mov	 esi, DWORD PTR [edi+148]
  0014a	2b ce		 sub	 ecx, esi
  0014c	f7 e9		 imul	 ecx
  0014e	c1 fa 02	 sar	 edx, 2
  00151	8b c2		 mov	 eax, edx
  00153	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00156	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 195  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  00158	8b 55 f8	 mov	 edx, DWORD PTR _i$1$[ebp]
  0015b	3b d0		 cmp	 edx, eax
  0015d	72 b1		 jb	 SHORT $LL4@LoadFiles
$LN80@LoadFiles:
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
$LN3@LoadFiles:
  00161	5f		 pop	 edi

; 199  : 		}
; 200  : 	}
; 201  : }

  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
?__LoadFiles@CItemData@@IAEXXZ ENDP			; CItemData::__LoadFiles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetItemShiningTableData@CItemData@@QAEXEPBD@Z
_TEXT	SEGMENT
_bIndex$ = 8						; size = 1
_szEffectname$ = 12					; size = 4
?SetItemShiningTableData@CItemData@@QAEXEPBD@Z PROC	; CItemData::SetItemShiningTableData, COMDAT
; _this$ = ecx

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 500  : 	sprintf(m_ItemShiningTable.szShinings[bIndex], szEffectname);

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _bIndex$[ebp]
  00007	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  0000d	ff 75 0c	 push	 DWORD PTR _szEffectname$[ebp]
  00010	c1 e0 08	 shl	 eax, 8
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _sprintf
  0001b	83 c4 08	 add	 esp, 8

; 501  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetItemShiningTableData@CItemData@@QAEXEPBD@Z ENDP	; CItemData::SetItemShiningTableData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetItemScale@CItemData@@QAE_NKAAM00000@Z
_TEXT	SEGMENT
_dwPos$ = 8						; size = 4
_fScaleX$ = 12						; size = 4
_fScaleY$ = 16						; size = 4
_fScaleZ$ = 20						; size = 4
_fPositionX$ = 24					; size = 4
_fPositionY$ = 28					; size = 4
_fPositionZ$ = 32					; size = 4
?GetItemScale@CItemData@@QAE_NKAAM00000@Z PROC		; CItemData::GetItemScale, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 256  : 	fScaleX = m_ScaleTable.tInfo[dwPos].fScaleX;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _fScaleX$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _dwPos$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	8d 3c 76	 lea	 edi, DWORD PTR [esi+esi*2]
  00011	8b 94 fb 68 05
	00 00		 mov	 edx, DWORD PTR [ebx+edi*8+1384]
  00018	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 	fScaleY = m_ScaleTable.tInfo[dwPos].fScaleY;

  0001a	8b 94 fb 6c 05
	00 00		 mov	 edx, DWORD PTR [ebx+edi*8+1388]
  00021	8b 45 10	 mov	 eax, DWORD PTR _fScaleY$[ebp]
  00024	89 10		 mov	 DWORD PTR [eax], edx

; 258  : 	fScaleZ = m_ScaleTable.tInfo[dwPos].fScaleZ;

  00026	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00029	8b 8c c3 70 05
	00 00		 mov	 ecx, DWORD PTR [ebx+eax*8+1392]
  00030	8b 45 14	 mov	 eax, DWORD PTR _fScaleZ$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 259  : 	fPositionX = m_ScaleTable.tInfo[dwPos].fPositionX;

  00035	8b 8c fb 74 05
	00 00		 mov	 ecx, DWORD PTR [ebx+edi*8+1396]
  0003c	8b 45 18	 mov	 eax, DWORD PTR _fPositionX$[ebp]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 260  : 	fPositionY = m_ScaleTable.tInfo[dwPos].fPositionY;

  00041	8b 45 1c	 mov	 eax, DWORD PTR _fPositionY$[ebp]
  00044	8b 8c fb 78 05
	00 00		 mov	 ecx, DWORD PTR [ebx+edi*8+1400]
  0004b	89 08		 mov	 DWORD PTR [eax], ecx

; 261  : 	fPositionZ = m_ScaleTable.tInfo[dwPos].fPositionZ;

  0004d	8b 8c fb 7c 05
	00 00		 mov	 ecx, DWORD PTR [ebx+edi*8+1404]
  00054	8b 45 20	 mov	 eax, DWORD PTR _fPositionZ$[ebp]

; 262  : 	return true;

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	89 08		 mov	 DWORD PTR [eax], ecx
  0005c	b0 01		 mov	 al, 1

; 263  : }

  0005e	5d		 pop	 ebp
  0005f	c2 1c 00	 ret	 28			; 0000001cH
?GetItemScale@CItemData@@QAE_NKAAM00000@Z ENDP		; CItemData::GetItemScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z
_TEXT	SEGMENT
tv1415 = -4						; size = 4
_strJob$ = 8						; size = 24
_strSex$ = 32						; size = 24
_strScaleX$ = 56					; size = 24
_strScaleY$ = 80					; size = 24
_strScaleZ$ = 104					; size = 24
_strPositionX$ = 128					; size = 24
_strPositionY$ = 152					; size = 24
_strPositionZ$ = 176					; size = 24
?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z PROC ; CItemData::SetItemScale, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 228  : 	DWORD dwPos=0;
; 229  : 	if (strJob == "JOB_WARRIOR")

  00007	8d 45 08	 lea	 eax, DWORD PTR _strJob$[ebp]
  0000a	8b d9		 mov	 ebx, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IHDHIBML@JOB_WARRIOR@
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00017	83 c4 08	 add	 esp, 8
  0001a	84 c0		 test	 al, al
  0001c	74 07		 je	 SHORT $LN2@SetItemSca

; 230  : 		dwPos = NRaceData::JOB_WARRIOR;

  0001e	bf 01 00 00 00	 mov	 edi, 1
  00023	eb 53		 jmp	 SHORT $LN8@SetItemSca
$LN2@SetItemSca:

; 231  : 	else if (strJob == "JOB_ASSASSIN")

  00025	8d 45 08	 lea	 eax, DWORD PTR _strJob$[ebp]
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00033	83 c4 08	 add	 esp, 8
  00036	84 c0		 test	 al, al
  00038	74 07		 je	 SHORT $LN4@SetItemSca

; 232  : 		dwPos = NRaceData::JOB_ASSASSIN;

  0003a	bf 02 00 00 00	 mov	 edi, 2
  0003f	eb 37		 jmp	 SHORT $LN8@SetItemSca
$LN4@SetItemSca:

; 233  : 	else if (strJob == "JOB_SURA")

  00041	8d 45 08	 lea	 eax, DWORD PTR _strJob$[ebp]
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_08IJIBKCOK@JOB_SURA@
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0004f	83 c4 08	 add	 esp, 8
  00052	84 c0		 test	 al, al
  00054	74 07		 je	 SHORT $LN6@SetItemSca

; 234  : 		dwPos = NRaceData::JOB_SURA;

  00056	bf 03 00 00 00	 mov	 edi, 3
  0005b	eb 1b		 jmp	 SHORT $LN8@SetItemSca
$LN6@SetItemSca:

; 235  : 	else if (strJob == "JOB_SHAMAN")

  0005d	8d 45 08	 lea	 eax, DWORD PTR _strJob$[ebp]
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0006b	83 c4 08	 add	 esp, 8
  0006e	0f b6 f8	 movzx	 edi, al
  00071	f7 df		 neg	 edi
  00073	1b ff		 sbb	 edi, edi
  00075	83 c7 05	 add	 edi, 5
$LN8@SetItemSca:

; 236  : 		dwPos = NRaceData::JOB_SHAMAN;
; 237  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 238  : 	else
; 239  : 		dwPos = NRaceData::JOB_WOLFMAN;
; 240  : #endif
; 241  : 
; 242  : 	dwPos += 1;
; 243  : 	if (strSex == "F")

  00078	8d 45 20	 lea	 eax, DWORD PTR _strSex$[ebp]
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_01BIAFAFID@F@
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3922 :         return _Mypair._Myval2._Myptr();

  00086	84 c0		 test	 al, al
  00088	8d 77 05	 lea	 esi, DWORD PTR [edi+5]

; 2305 :         const value_type* _Result = _Bx._Buf;

  0008b	8d 45 38	 lea	 eax, DWORD PTR _strScaleX$[ebp]

; 3922 :         return _Mypair._Myval2._Myptr();

  0008e	0f 44 f7	 cmove	 esi, edi

; 2319 :         return _BUF_SIZE <= _Myres;

  00091	83 7d 4c 10	 cmp	 DWORD PTR _strScaleX$[ebp+20], 16 ; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00095	0f 43 45 38	 cmovae	 eax, DWORD PTR _strScaleX$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 246  : 	m_ScaleTable.tInfo[dwPos].fScaleX = float(atof(strScaleX.c_str()) / 100.0f);

  00099	50		 push	 eax
  0009a	8d 3c 76	 lea	 edi, DWORD PTR [esi+esi*2]
  0009d	e8 00 00 00 00	 call	 _atof
  000a2	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  000a8	8d 45 50	 lea	 eax, DWORD PTR _strScaleY$[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  000ab	83 7d 64 10	 cmp	 DWORD PTR _strScaleY$[ebp+20], 16 ; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  000af	0f 43 45 50	 cmovae	 eax, DWORD PTR _strScaleY$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 247  : 	m_ScaleTable.tInfo[dwPos].fScaleY = float(atof(strScaleY.c_str()) / 100.0f);

  000b3	50		 push	 eax
  000b4	d9 9c fb 68 05
	00 00		 fstp	 DWORD PTR [ebx+edi*8+1384]
  000bb	e8 00 00 00 00	 call	 _atof
  000c0	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  000c6	8d 45 68	 lea	 eax, DWORD PTR _strScaleZ$[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  000c9	83 7d 7c 10	 cmp	 DWORD PTR _strScaleZ$[ebp+20], 16 ; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  000cd	0f 43 45 68	 cmovae	 eax, DWORD PTR _strScaleZ$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 248  : 	m_ScaleTable.tInfo[dwPos].fScaleZ = float(atof(strScaleZ.c_str()) / 100.0f);

  000d1	50		 push	 eax
  000d2	d9 9c fb 6c 05
	00 00		 fstp	 DWORD PTR [ebx+edi*8+1388]
  000d9	e8 00 00 00 00	 call	 _atof
  000de	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000e4	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e7	83 bd 94 00 00
	00 10		 cmp	 DWORD PTR _strPositionX$[ebp+20], 16 ; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 248  : 	m_ScaleTable.tInfo[dwPos].fScaleZ = float(atof(strScaleZ.c_str()) / 100.0f);

  000ee	d9 5d fc	 fstp	 DWORD PTR tv1415[ebp]
  000f1	d9 45 fc	 fld	 DWORD PTR tv1415[ebp]
  000f4	d9 9c c3 70 05
	00 00		 fstp	 DWORD PTR [ebx+eax*8+1392]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  000fb	8d 85 80 00 00
	00		 lea	 eax, DWORD PTR _strPositionX$[ebp]

; 2306 :         if (_Large_string_engaged()) {

  00101	0f 43 85 80 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionX$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 249  : 	m_ScaleTable.tInfo[dwPos].fPositionX = float(atof(strPositionX.c_str()) * 100.0f);

  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _atof
  0010e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00114	8d 85 98 00 00
	00		 lea	 eax, DWORD PTR _strPositionY$[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  0011a	83 bd ac 00 00
	00 10		 cmp	 DWORD PTR _strPositionY$[ebp+20], 16 ; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00121	0f 43 85 98 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionY$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 250  : 	m_ScaleTable.tInfo[dwPos].fPositionY = float(atof(strPositionY.c_str()) * 100.0f);

  00128	50		 push	 eax
  00129	d9 9c fb 74 05
	00 00		 fstp	 DWORD PTR [ebx+edi*8+1396]
  00130	e8 00 00 00 00	 call	 _atof
  00135	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  0013b	8d 85 b0 00 00
	00		 lea	 eax, DWORD PTR _strPositionZ$[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  00141	83 bd c4 00 00
	00 10		 cmp	 DWORD PTR _strPositionZ$[ebp+20], 16 ; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00148	0f 43 85 b0 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionZ$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 251  : 	m_ScaleTable.tInfo[dwPos].fPositionZ = float(atof(strPositionZ.c_str()) * 100.0f);

  0014f	50		 push	 eax
  00150	d9 9c fb 78 05
	00 00		 fstp	 DWORD PTR [ebx+edi*8+1400]
  00157	e8 00 00 00 00	 call	 _atof
  0015c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00162	83 c4 20	 add	 esp, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00165	8b 55 1c	 mov	 edx, DWORD PTR _strJob$[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 251  : 	m_ScaleTable.tInfo[dwPos].fPositionZ = float(atof(strPositionZ.c_str()) * 100.0f);

  00168	d9 9c fb 7c 05
	00 00		 fstp	 DWORD PTR [ebx+edi*8+1404]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00175	72 2c		 jb	 SHORT $LN74@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00177	8b 4d 08	 mov	 ecx, DWORD PTR _strJob$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0017a	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0017b	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0017d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00183	72 14		 jb	 SHORT $LN84@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00185	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00188	83 c2 23	 add	 edx, 35			; 00000023H
  0018b	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00190	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00193	0f 87 16 02 00
	00		 ja	 $LN271@SetItemSca
$LN84@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00199	52		 push	 edx
  0019a	51		 push	 ecx
  0019b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a0	83 c4 08	 add	 esp, 8
$LN74@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  001a3	8b 55 34	 mov	 edx, DWORD PTR _strSex$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  001a6	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _strJob$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001ad	c7 45 1c 0f 00
	00 00		 mov	 DWORD PTR _strJob$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001b4	c6 45 08 00	 mov	 BYTE PTR _strJob$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  001b8	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001bb	72 2c		 jb	 SHORT $LN102@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001bd	8b 4d 20	 mov	 ecx, DWORD PTR _strSex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001c0	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c1	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001c3	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001c9	72 14		 jb	 SHORT $LN112@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001cb	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001ce	83 c2 23	 add	 edx, 35			; 00000023H
  001d1	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001d3	83 c0 fc	 add	 eax, -4			; fffffffcH
  001d6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001d9	0f 87 d0 01 00
	00		 ja	 $LN271@SetItemSca
$LN112@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001df	52		 push	 edx
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001e6	83 c4 08	 add	 esp, 8
$LN102@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  001e9	8b 55 4c	 mov	 edx, DWORD PTR _strScaleX$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  001ec	c7 45 30 00 00
	00 00		 mov	 DWORD PTR _strSex$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001f3	c7 45 34 0f 00
	00 00		 mov	 DWORD PTR _strSex$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001fa	c6 45 20 00	 mov	 BYTE PTR _strSex$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  001fe	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00201	72 2c		 jb	 SHORT $LN129@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00203	8b 4d 38	 mov	 ecx, DWORD PTR _strScaleX$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00206	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00207	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00209	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0020f	72 14		 jb	 SHORT $LN139@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00211	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00214	83 c2 23	 add	 edx, 35			; 00000023H
  00217	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00219	83 c0 fc	 add	 eax, -4			; fffffffcH
  0021c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0021f	0f 87 8a 01 00
	00		 ja	 $LN271@SetItemSca
$LN139@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00225	52		 push	 edx
  00226	51		 push	 ecx
  00227	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0022c	83 c4 08	 add	 esp, 8
$LN129@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0022f	8b 55 64	 mov	 edx, DWORD PTR _strScaleY$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00232	c7 45 48 00 00
	00 00		 mov	 DWORD PTR _strScaleX$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00239	c7 45 4c 0f 00
	00 00		 mov	 DWORD PTR _strScaleX$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00240	c6 45 38 00	 mov	 BYTE PTR _strScaleX$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  00244	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00247	72 2c		 jb	 SHORT $LN156@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00249	8b 4d 50	 mov	 ecx, DWORD PTR _strScaleY$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0024c	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0024d	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0024f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00255	72 14		 jb	 SHORT $LN166@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00257	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0025a	83 c2 23	 add	 edx, 35			; 00000023H
  0025d	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0025f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00262	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00265	0f 87 44 01 00
	00		 ja	 $LN271@SetItemSca
$LN166@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0026b	52		 push	 edx
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00272	83 c4 08	 add	 esp, 8
$LN156@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00275	8b 55 7c	 mov	 edx, DWORD PTR _strScaleZ$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00278	c7 45 60 00 00
	00 00		 mov	 DWORD PTR _strScaleY$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0027f	c7 45 64 0f 00
	00 00		 mov	 DWORD PTR _strScaleY$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00286	c6 45 50 00	 mov	 BYTE PTR _strScaleY$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0028a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0028d	72 2c		 jb	 SHORT $LN183@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0028f	8b 4d 68	 mov	 ecx, DWORD PTR _strScaleZ$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00292	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00293	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00295	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0029b	72 14		 jb	 SHORT $LN193@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0029d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002a0	83 c2 23	 add	 edx, 35			; 00000023H
  002a3	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ab	0f 87 fe 00 00
	00		 ja	 $LN271@SetItemSca
$LN193@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002b1	52		 push	 edx
  002b2	51		 push	 ecx
  002b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b8	83 c4 08	 add	 esp, 8
$LN183@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  002bb	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR _strPositionX$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  002c1	c7 45 78 00 00
	00 00		 mov	 DWORD PTR _strScaleZ$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002c8	c7 45 7c 0f 00
	00 00		 mov	 DWORD PTR _strScaleZ$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002cf	c6 45 68 00	 mov	 BYTE PTR _strScaleZ$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  002d3	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002d6	72 2f		 jb	 SHORT $LN210@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002d8	8b 8d 80 00 00
	00		 mov	 ecx, DWORD PTR _strPositionX$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002de	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002df	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002e1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002e7	72 14		 jb	 SHORT $LN220@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002e9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002ec	83 c2 23	 add	 edx, 35			; 00000023H
  002ef	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f1	83 c0 fc	 add	 eax, -4			; fffffffcH
  002f4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002f7	0f 87 b2 00 00
	00		 ja	 $LN271@SetItemSca
$LN220@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002fd	52		 push	 edx
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00304	83 c4 08	 add	 esp, 8
$LN210@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00307	8b 95 ac 00 00
	00		 mov	 edx, DWORD PTR _strPositionY$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0030d	c7 85 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR _strPositionX$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00317	c7 85 94 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _strPositionX$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00321	c6 85 80 00 00
	00 00		 mov	 BYTE PTR _strPositionX$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  00328	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0032b	72 2b		 jb	 SHORT $LN237@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0032d	8b 8d 98 00 00
	00		 mov	 ecx, DWORD PTR _strPositionY$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00333	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00334	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00336	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0033c	72 10		 jb	 SHORT $LN247@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0033e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00341	83 c2 23	 add	 edx, 35			; 00000023H
  00344	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00346	83 c0 fc	 add	 eax, -4			; fffffffcH
  00349	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0034c	77 61		 ja	 SHORT $LN271@SetItemSca
$LN247@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0034e	52		 push	 edx
  0034f	51		 push	 ecx
  00350	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00355	83 c4 08	 add	 esp, 8
$LN237@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00358	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR _strPositionZ$[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0035e	c7 85 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR _strPositionY$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00368	c7 85 ac 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _strPositionY$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00372	c6 85 98 00 00
	00 00		 mov	 BYTE PTR _strPositionY$[ebp], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  00379	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0037c	72 2b		 jb	 SHORT $LN264@SetItemSca
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0037e	8b 8d b0 00 00
	00		 mov	 ecx, DWORD PTR _strPositionZ$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00384	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00385	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00387	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0038d	72 10		 jb	 SHORT $LN274@SetItemSca

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0038f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00392	83 c2 23	 add	 edx, 35			; 00000023H
  00395	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00397	83 c0 fc	 add	 eax, -4			; fffffffcH
  0039a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0039d	77 10		 ja	 SHORT $LN271@SetItemSca
$LN274@SetItemSca:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0039f	52		 push	 edx
  003a0	51		 push	 ecx
  003a1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003a6	83 c4 08	 add	 esp, 8
$LN264@SetItemSca:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 252  : }

  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c2 c0 00	 ret	 192			; 000000c0H
$LN271@SetItemSca:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003af	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN279@SetItemSca:
  003b4	cc		 int	 3
?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ENDP ; CItemData::SetItemScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z
_TEXT	SEGMENT
_pItemTable$ = 8					; size = 4
?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z PROC ; CItemData::SetItemTableData, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 222  : 	memcpy(&m_ItemTable, pItemTable, sizeof(TItemTable));

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItemTable$[ebp]
  00007	57		 push	 edi
  00008	8d b9 cc 00 00
	00		 lea	 edi, DWORD PTR [ecx+204]
  0000e	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00013	f3 a5		 rep movsd
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi

; 223  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ENDP ; CItemData::SetItemTableData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetDefaultItemData@CItemData@@QAEXPBD0@Z
_TEXT	SEGMENT
_c_szIconFileName$ = 8					; size = 4
tv170 = 12						; size = 4
_c_szModelFileName$ = 12				; size = 4
?SetDefaultItemData@CItemData@@QAEXPBD0@Z PROC		; CItemData::SetDefaultItemData, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 157  : 	if(c_szModelFileName)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _c_szModelFileName$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0000e	85 f6		 test	 esi, esi
  00010	74 31		 je	 SHORT $LN2@SetDefault
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00012	8b d6		 mov	 edx, esi
  00014	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00017	89 45 0c	 mov	 DWORD PTR tv170[ebp], eax
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL53@SetDefault:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL53@SetDefault
  00027	2b 55 0c	 sub	 edx, DWORD PTR tv170[ebp]

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00031	8b c6		 mov	 eax, esi
  00033	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL54@SetDefault:
  00036	8a 10		 mov	 dl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 d2		 test	 dl, dl
  0003b	75 f9		 jne	 SHORT $LL54@SetDefault
  0003d	2b c1		 sub	 eax, ecx

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003f	50		 push	 eax
  00040	56		 push	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 161  : 	}

  00041	eb 13		 jmp	 SHORT $LN56@SetDefault
$LN2@SetDefault:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00043	6a 00		 push	 0
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004f	6a 22		 push	 34			; 00000022H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@
$LN56@SetDefault:

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00056	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00059	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005e	8b 55 08	 mov	 edx, DWORD PTR _c_szIconFileName$[ebp]
  00061	8b ca		 mov	 ecx, edx
  00063	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL55@SetDefault:
  00066	8a 01		 mov	 al, BYTE PTR [ecx]
  00068	41		 inc	 ecx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL55@SetDefault
  0006d	2b ce		 sub	 ecx, esi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006f	51		 push	 ecx
  00070	52		 push	 edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 167  : 	m_strIconFileName = c_szIconFileName;

  00071	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00074	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00079	6a 00		 push	 0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 169  : 	m_strSubModelFileName = "";

  00080	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00083	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 170  : 	m_strDescription = "";

  0008f	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00092	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00097	6a 00		 push	 0
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 171  : 	m_strSummary = "";

  0009e	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 174  : 	__LoadFiles();

  000a9	8b cf		 mov	 ecx, edi
  000ab	66 0f d6 87 53
	01 00 00	 movq	 QWORD PTR [edi+339], xmm0
  000b3	c7 87 5b 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+347], 0
  000bd	e8 00 00 00 00	 call	 ?__LoadFiles@CItemData@@IAEXXZ ; CItemData::__LoadFiles
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 175  : }

  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
?SetDefaultItemData@CItemData@@QAEXPBD0@Z ENDP		; CItemData::SetDefaultItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsEquipment@CItemData@@QBEHXZ
_TEXT	SEGMENT
?IsEquipment@CItemData@@QBEHXZ PROC			; CItemData::IsEquipment, COMDAT
; _this$ = ecx

; 486  : 	switch (GetType())

  00000	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00005	0f b6 c0	 movzx	 eax, al
  00008	83 e8 01	 sub	 eax, 1
  0000b	74 08		 je	 SHORT $LN4@IsEquipmen
  0000d	83 e8 01	 sub	 eax, 1
  00010	74 03		 je	 SHORT $LN4@IsEquipmen

; 491  : 			break;
; 492  : 	}
; 493  : 
; 494  : 	return FALSE;

  00012	33 c0		 xor	 eax, eax

; 495  : }

  00014	c3		 ret	 0
$LN4@IsEquipmen:

; 487  : 	{
; 488  : 		case ITEM_TYPE_WEAPON:
; 489  : 		case ITEM_TYPE_ARMOR:
; 490  : 			return TRUE;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 495  : }

  0001a	c3		 ret	 0
?IsEquipment@CItemData@@QBEHXZ ENDP			; CItemData::IsEquipment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSpecularPowerf@CItemData@@QBEMXZ
_TEXT	SEGMENT
tv78 = -4						; size = 4
?GetSpecularPowerf@CItemData@@QBEMXZ PROC		; CItemData::GetSpecularPowerf, COMDAT
; _this$ = ecx

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 473  : 	UINT uSpecularPower=GetSpecularPoweru();

  00004	e8 00 00 00 00	 call	 ?GetSpecularPoweru@CItemData@@QBEIXZ ; CItemData::GetSpecularPoweru
  00009	66 0f 6e c0	 movd	 xmm0, eax

; 474  : 
; 475  : 	return float(uSpecularPower) / 100.0f;

  0000d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0001d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00021	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  00029	f3 0f 11 45 fc	 movss	 DWORD PTR tv78[ebp], xmm0
  0002e	d9 45 fc	 fld	 DWORD PTR tv78[ebp]

; 476  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GetSpecularPowerf@CItemData@@QBEMXZ ENDP		; CItemData::GetSpecularPowerf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSpecularPoweru@CItemData@@QBEIXZ
_TEXT	SEGMENT
?GetSpecularPoweru@CItemData@@QBEIXZ PROC		; CItemData::GetSpecularPoweru, COMDAT
; _this$ = ecx

; 468  : 	return m_ItemTable.bSpecular;

  00000	0f b6 81 66 01
	00 00		 movzx	 eax, BYTE PTR [ecx+358]

; 469  : }

  00007	c3		 ret	 0
?GetSpecularPoweru@CItemData@@QBEIXZ ENDP		; CItemData::GetSpecularPoweru
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIconNumber@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIconNumber@CItemData@@QBEKXZ PROC			; CItemData::GetIconNumber, COMDAT
; _this$ = ecx

; 461  : 	return m_ItemTable.dwVnum;

  00000	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [ecx+204]

; 462  : //!@#
; 463  : //	return m_ItemTable.dwIconNumber;
; 464  : }

  00006	c3		 ret	 0
?GetIconNumber@CItemData@@QBEKXZ ENDP			; CItemData::GetIconNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSocketCount@CItemData@@QBEHXZ
_TEXT	SEGMENT
?GetSocketCount@CItemData@@QBEHXZ PROC			; CItemData::GetSocketCount, COMDAT
; _this$ = ecx

; 456  : 	return m_ItemTable.bGainSocketPct;

  00000	0f b6 81 67 01
	00 00		 movzx	 eax, BYTE PTR [ecx+359]

; 457  : }

  00007	c3		 ret	 0
?GetSocketCount@CItemData@@QBEHXZ ENDP			; CItemData::GetSocketCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetSocket@CItemData@@QAEJEK@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_value$ = 12						; size = 4
?SetSocket@CItemData@@QAEJEK@Z PROC			; CItemData::SetSocket, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 430  : 	if (byIndex >= ITEM_SOCKET_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	3c 03		 cmp	 al, 3
  0000a	72 09		 jb	 SHORT $LN2@SetSocket

; 431  : 	{
; 432  : 		assert(byIndex < ITEM_SOCKET_MAX_NUM);
; 433  : 		return -1;

  0000c	b8 ff ff ff ff	 mov	 eax, -1

; 437  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
$LN2@SetSocket:

; 434  : 	}
; 435  : 
; 436  : 	return m_ItemTable.alSockets[byIndex] = value;

  00015	0f b6 c8	 movzx	 ecx, al
  00018	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	89 84 8a 53 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+339], eax

; 437  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetSocket@CItemData@@QAEJEK@Z ENDP			; CItemData::SetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSocket@CItemData@@QBEJE@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
?GetSocket@CItemData@@QBEJE@Z PROC			; CItemData::GetSocket, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  : 	if (byIndex >= ITEM_SOCKET_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 03		 cmp	 al, 3
  00008	72 09		 jb	 SHORT $LN2@GetSocket

; 442  : 	{
; 443  : 		assert(byIndex < ITEM_SOCKET_MAX_NUM);
; 444  : 		return -1;

  0000a	b8 ff ff ff ff	 mov	 eax, -1

; 448  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetSocket:

; 445  : 	}
; 446  : 
; 447  : 	return m_ItemTable.alSockets[byIndex];

  00013	0f b6 c0	 movzx	 eax, al
  00016	8b 84 81 53 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+339]

; 448  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetSocket@CItemData@@QBEJE@Z ENDP			; CItemData::GetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetValue@CItemData@@QBEJE@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
?GetValue@CItemData@@QBEJE@Z PROC			; CItemData::GetValue, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  : 	if (byIndex >= ITEM_VALUES_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 06		 cmp	 al, 6
  00008	72 06		 jb	 SHORT $LN2@GetValue

; 420  : 	{
; 421  : 		assert(byIndex < ITEM_VALUES_MAX_NUM);
; 422  : 		return 0;

  0000a	33 c0		 xor	 eax, eax

; 426  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetValue:

; 423  : 	}
; 424  : 
; 425  : 	return m_ItemTable.alValues[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	8b 84 81 3b 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+315]

; 426  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetValue@CItemData@@QBEJE@Z ENDP			; CItemData::GetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_pItemApply$ = 12					; size = 4
?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z PROC	; CItemData::GetApply, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  : 	if (byIndex >= ITEM_APPLY_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 03		 cmp	 al, 3
  00008	72 06		 jb	 SHORT $LN2@GetApply

; 408  : 	{
; 409  : 		assert(byIndex < ITEM_APPLY_MAX_NUM);
; 410  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 415  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN2@GetApply:

; 411  : 	}
; 412  : 
; 413  : 	*pItemApply = m_ItemTable.aApplies[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	83 c0 3c	 add	 eax, 60			; 0000003cH
  00016	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _pItemApply$[ebp]
  0001c	03 d0		 add	 edx, eax
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
  00022	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  00025	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 414  : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 415  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z ENDP	; CItemData::GetApply
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_pItemLimit$ = 12					; size = 4
?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z PROC	; CItemData::GetLimit, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	if (byIndex >= ITEM_LIMIT_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 02		 cmp	 al, 2
  00008	72 06		 jb	 SHORT $LN2@GetLimit

; 395  : 	{
; 396  : 		assert(byIndex < ITEM_LIMIT_MAX_NUM);
; 397  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 403  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN2@GetLimit:

; 398  : 	}
; 399  : 
; 400  : 	*pItemLimit = m_ItemTable.aLimits[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	83 c0 3a	 add	 eax, 58			; 0000003aH
  00016	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _pItemLimit$[ebp]
  0001c	03 d0		 add	 edx, eax
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
  00022	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  00025	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 401  : 
; 402  : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 403  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z ENDP	; CItemData::GetLimit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetISellItemPrice@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetISellItemPrice@CItemData@@QBEKXZ PROC		; CItemData::GetISellItemPrice, COMDAT
; _this$ = ecx

; 388  : 	return m_ItemTable.dwISellItemPrice;

  00000	8b 81 1e 01 00
	00		 mov	 eax, DWORD PTR [ecx+286]

; 389  : }

  00006	c3		 ret	 0
?GetISellItemPrice@CItemData@@QBEKXZ ENDP		; CItemData::GetISellItemPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIBuyItemPrice@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIBuyItemPrice@CItemData@@QBEKXZ PROC		; CItemData::GetIBuyItemPrice, COMDAT
; _this$ = ecx

; 383  : 	return m_ItemTable.dwIBuyItemPrice;

  00000	8b 81 1a 01 00
	00		 mov	 eax, DWORD PTR [ecx+282]

; 384  : }

  00006	c3		 ret	 0
?GetIBuyItemPrice@CItemData@@QBEKXZ ENDP		; CItemData::GetIBuyItemPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetWearFlags@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetWearFlags@CItemData@@QBEKXZ PROC			; CItemData::GetWearFlags, COMDAT
; _this$ = ecx

; 378  : 	return m_ItemTable.dwWearFlags;

  00000	8b 81 12 01 00
	00		 mov	 eax, DWORD PTR [ecx+274]

; 379  : }

  00006	c3		 ret	 0
?GetWearFlags@CItemData@@QBEKXZ ENDP			; CItemData::GetWearFlags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?HasNextGrade@CItemData@@QBEHXZ
_TEXT	SEGMENT
?HasNextGrade@CItemData@@QBEHXZ PROC			; CItemData::HasNextGrade, COMDAT
; _this$ = ecx

; 373  : 	return 0 != m_ItemTable.dwRefinedVnum;

  00000	33 c0		 xor	 eax, eax
  00002	39 81 5f 01 00
	00		 cmp	 DWORD PTR [ecx+351], eax
  00008	0f 95 c0	 setne	 al

; 374  : }

  0000b	c3		 ret	 0
?HasNextGrade@CItemData@@QBEHXZ ENDP			; CItemData::HasNextGrade
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsWearableFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsWearableFlag@CItemData@@QBEHK@Z PROC			; CItemData::IsWearableFlag, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  : 	return (dwFlag & m_ItemTable.dwWearFlags) != 0;

  00003	8b 81 12 01 00
	00		 mov	 eax, DWORD PTR [ecx+274]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 369  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsWearableFlag@CItemData@@QBEHK@Z ENDP			; CItemData::IsWearableFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsFlag@CItemData@@QBEHK@Z PROC				; CItemData::IsFlag, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	return (dwFlag & m_ItemTable.dwFlags) != 0;

  00003	8b 81 0e 01 00
	00		 mov	 eax, DWORD PTR [ecx+270]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 364  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsFlag@CItemData@@QBEHK@Z ENDP				; CItemData::IsFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsAntiFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsAntiFlag@CItemData@@QBEHK@Z PROC			; CItemData::IsAntiFlag, COMDAT
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 	return (dwFlag & m_ItemTable.dwAntiFlags) != 0;

  00003	8b 81 0a 01 00
	00		 mov	 eax, DWORD PTR [ecx+266]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 359  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsAntiFlag@CItemData@@QBEHK@Z ENDP			; CItemData::IsAntiFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSize@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetSize@CItemData@@QBEEXZ PROC				; CItemData::GetSize, COMDAT
; _this$ = ecx

; 353  : 	return m_ItemTable.bSize;

  00000	8a 81 09 01 00
	00		 mov	 al, BYTE PTR [ecx+265]

; 354  : }

  00006	c3		 ret	 0
?GetSize@CItemData@@QBEEXZ ENDP				; CItemData::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetWeaponType@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetWeaponType@CItemData@@QBEKXZ PROC			; CItemData::GetWeaponType, COMDAT
; _this$ = ecx

; 343  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 344  : #ifdef ENABLE_WEAPON_COSTUME_SYSTEM
; 345  : 	if (GetType()==CItemData::ITEM_TYPE_COSTUME && GetSubType()==CItemData::COSTUME_WEAPON)

  00003	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00008	3c 1c		 cmp	 al, 28			; 0000001cH
  0000a	75 16		 jne	 SHORT $LN2@GetWeaponT
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  00013	3c 04		 cmp	 al, 4
  00015	75 0b		 jne	 SHORT $LN2@GetWeaponT

; 346  : 		return GetValue(3);

  00017	6a 03		 push	 3
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetValue@CItemData@@QBEJE@Z ; CItemData::GetValue
  00020	5e		 pop	 esi

; 349  : }

  00021	c3		 ret	 0
$LN2@GetWeaponT:

; 347  : #endif
; 348  : 	return m_ItemTable.bSubType;

  00022	0f b6 86 07 01
	00 00		 movzx	 eax, BYTE PTR [esi+263]
  00029	5e		 pop	 esi

; 349  : }

  0002a	c3		 ret	 0
?GetWeaponType@CItemData@@QBEKXZ ENDP			; CItemData::GetWeaponType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetUseTypeString@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetUseTypeString@CItemData@@QBEPBDXZ PROC		; CItemData::GetUseTypeString, COMDAT
; _this$ = ecx

; 305  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 306  : 	if (GetType() != CItemData::ITEM_TYPE_USE)

  00003	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00008	3c 03		 cmp	 al, 3
  0000a	74 07		 je	 SHORT $LN4@GetUseType

; 307  : 		return "NOT_USE_TYPE";

  0000c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@OHMMNDLH@NOT_USE_TYPE@
  00011	5e		 pop	 esi

; 339  : }

  00012	c3		 ret	 0
$LN4@GetUseType:

; 308  : 
; 309  : 	switch (GetSubType())

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	83 c0 fe	 add	 eax, -2			; fffffffeH
  00020	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00023	77 62		 ja	 SHORT $LN2@GetUseType
  00025	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@GetUseType[eax]
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@GetUseType[eax*4]
$LN5@GetUseType:

; 310  : 	{
; 311  : 		case USE_TUNING:
; 312  : 			return DEF_STR(USE_TUNING);

  00033	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@JIILHJGL@USE_TUNING@
  00038	5e		 pop	 esi

; 339  : }

  00039	c3		 ret	 0
$LN6@GetUseType:

; 313  : 		case USE_DETACHMENT:
; 314  : 			return DEF_STR(USE_DETACHMENT);

  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@MKAMDACK@USE_DETACHMENT@
  0003f	5e		 pop	 esi

; 339  : }

  00040	c3		 ret	 0
$LN7@GetUseType:

; 315  : 		case USE_CLEAN_SOCKET:
; 316  : 			return DEF_STR(USE_CLEAN_SOCKET);

  00041	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@
  00046	5e		 pop	 esi

; 339  : }

  00047	c3		 ret	 0
$LN8@GetUseType:

; 317  : 		case USE_CHANGE_ATTRIBUTE:
; 318  : 			return DEF_STR(USE_CHANGE_ATTRIBUTE);

  00048	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@
  0004d	5e		 pop	 esi

; 339  : }

  0004e	c3		 ret	 0
$LN9@GetUseType:

; 319  : 		case USE_ADD_ATTRIBUTE:
; 320  : 			return DEF_STR(USE_ADD_ATTRIBUTE);

  0004f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@
  00054	5e		 pop	 esi

; 339  : }

  00055	c3		 ret	 0
$LN10@GetUseType:

; 321  : 		case USE_ADD_ATTRIBUTE2:
; 322  : 			return DEF_STR(USE_ADD_ATTRIBUTE2);

  00056	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@
  0005b	5e		 pop	 esi

; 339  : }

  0005c	c3		 ret	 0
$LN11@GetUseType:

; 323  : 		case USE_ADD_ACCESSORY_SOCKET:
; 324  : 			return DEF_STR(USE_ADD_ACCESSORY_SOCKET);

  0005d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@
  00062	5e		 pop	 esi

; 339  : }

  00063	c3		 ret	 0
$LN12@GetUseType:

; 325  : 		case USE_PUT_INTO_ACCESSORY_SOCKET:
; 326  : 			return DEF_STR(USE_PUT_INTO_ACCESSORY_SOCKET);

  00064	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@
  00069	5e		 pop	 esi

; 339  : }

  0006a	c3		 ret	 0
$LN13@GetUseType:

; 327  : 		case USE_PUT_INTO_BELT_SOCKET:
; 328  : 			return DEF_STR(USE_PUT_INTO_BELT_SOCKET);

  0006b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@
  00070	5e		 pop	 esi

; 339  : }

  00071	c3		 ret	 0
$LN14@GetUseType:

; 329  : 		case USE_PUT_INTO_RING_SOCKET:
; 330  : 			return DEF_STR(USE_PUT_INTO_RING_SOCKET);

  00072	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@
  00077	5e		 pop	 esi

; 339  : }

  00078	c3		 ret	 0
$LN15@GetUseType:

; 331  : #ifdef ENABLE_USE_COSTUME_ATTR
; 332  : 		case USE_CHANGE_COSTUME_ATTR:
; 333  : 			return DEF_STR(USE_CHANGE_COSTUME_ATTR);

  00079	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@
  0007e	5e		 pop	 esi

; 339  : }

  0007f	c3		 ret	 0
$LN16@GetUseType:

; 334  : 		case USE_RESET_COSTUME_ATTR:
; 335  : 			return DEF_STR(USE_RESET_COSTUME_ATTR);

  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@
  00085	5e		 pop	 esi

; 339  : }

  00086	c3		 ret	 0
$LN2@GetUseType:

; 336  : #endif
; 337  : 	}
; 338  : 	return "USE_UNKNOWN_TYPE";

  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@
  0008c	5e		 pop	 esi

; 339  : }

  0008d	c3		 ret	 0
  0008e	66 90		 npad	 2
$LN19@GetUseType:
  00090	00 00 00 00	 DD	 $LN5@GetUseType
  00094	00 00 00 00	 DD	 $LN6@GetUseType
  00098	00 00 00 00	 DD	 $LN7@GetUseType
  0009c	00 00 00 00	 DD	 $LN8@GetUseType
  000a0	00 00 00 00	 DD	 $LN9@GetUseType
  000a4	00 00 00 00	 DD	 $LN11@GetUseType
  000a8	00 00 00 00	 DD	 $LN12@GetUseType
  000ac	00 00 00 00	 DD	 $LN10@GetUseType
  000b0	00 00 00 00	 DD	 $LN13@GetUseType
  000b4	00 00 00 00	 DD	 $LN14@GetUseType
  000b8	00 00 00 00	 DD	 $LN15@GetUseType
  000bc	00 00 00 00	 DD	 $LN16@GetUseType
  000c0	00 00 00 00	 DD	 $LN2@GetUseType
$LN18@GetUseType:
  000c4	00		 DB	 0
  000c5	0c		 DB	 12			; 0000000cH
  000c6	0c		 DB	 12			; 0000000cH
  000c7	0c		 DB	 12			; 0000000cH
  000c8	0c		 DB	 12			; 0000000cH
  000c9	0c		 DB	 12			; 0000000cH
  000ca	0c		 DB	 12			; 0000000cH
  000cb	0c		 DB	 12			; 0000000cH
  000cc	0c		 DB	 12			; 0000000cH
  000cd	0c		 DB	 12			; 0000000cH
  000ce	0c		 DB	 12			; 0000000cH
  000cf	0c		 DB	 12			; 0000000cH
  000d0	01		 DB	 1
  000d1	0c		 DB	 12			; 0000000cH
  000d2	0c		 DB	 12			; 0000000cH
  000d3	02		 DB	 2
  000d4	03		 DB	 3
  000d5	04		 DB	 4
  000d6	05		 DB	 5
  000d7	06		 DB	 6
  000d8	07		 DB	 7
  000d9	0c		 DB	 12			; 0000000cH
  000da	0c		 DB	 12			; 0000000cH
  000db	0c		 DB	 12			; 0000000cH
  000dc	0c		 DB	 12			; 0000000cH
  000dd	0c		 DB	 12			; 0000000cH
  000de	0c		 DB	 12			; 0000000cH
  000df	08		 DB	 8
  000e0	09		 DB	 9
  000e1	0a		 DB	 10			; 0000000aH
  000e2	0b		 DB	 11			; 0000000bH
?GetUseTypeString@CItemData@@QBEPBDXZ ENDP		; CItemData::GetUseTypeString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetRefine@CItemData@@QBEIXZ
_TEXT	SEGMENT
?GetRefine@CItemData@@QBEIXZ PROC			; CItemData::GetRefine, COMDAT
; _this$ = ecx

; 481  : 	return GetIndex()%10;

  00000	e8 00 00 00 00	 call	 ?GetIndex@CItemData@@QBEKXZ ; CItemData::GetIndex
  00005	33 d2		 xor	 edx, edx
  00007	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000c	f7 f1		 div	 ecx
  0000e	8b c2		 mov	 eax, edx

; 482  : }

  00010	c3		 ret	 0
?GetRefine@CItemData@@QBEIXZ ENDP			; CItemData::GetRefine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSubType@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetSubType@CItemData@@QBEEXZ PROC			; CItemData::GetSubType, COMDAT
; _this$ = ecx

; 299  : 	return m_ItemTable.bSubType;

  00000	8a 81 07 01 00
	00		 mov	 al, BYTE PTR [ecx+263]

; 300  : }

  00006	c3		 ret	 0
?GetSubType@CItemData@@QBEEXZ ENDP			; CItemData::GetSubType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetType@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetType@CItemData@@QBEEXZ PROC				; CItemData::GetType, COMDAT
; _this$ = ecx

; 294  : 	return m_ItemTable.bType;

  00000	8a 81 06 01 00
	00		 mov	 al, BYTE PTR [ecx+262]

; 295  : }

  00006	c3		 ret	 0
?GetType@CItemData@@QBEEXZ ENDP				; CItemData::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSummary@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetSummary@CItemData@@QBEPBDXZ PROC			; CItemData::GetSummary, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 b9 90 00 00
	00 10		 cmp	 DWORD PTR [ecx+144], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00007	8d 41 7c	 lea	 eax, DWORD PTR [ecx+124]

; 2306 :         if (_Large_string_engaged()) {

  0000a	72 02		 jb	 SHORT $LN6@GetSummary
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 288  : 	return m_strSummary.c_str();

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetSummary:

; 289  : }

  0000e	c3		 ret	 0
?GetSummary@CItemData@@QBEPBDXZ ENDP			; CItemData::GetSummary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetDescription@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CItemData@@QBEPBDXZ PROC		; CItemData::GetDescription, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 79 78 10	 cmp	 DWORD PTR [ecx+120], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 64	 lea	 eax, DWORD PTR [ecx+100]

; 2306 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetDescrip
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 283  : 	return m_strDescription.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetDescrip:

; 284  : }

  0000b	c3		 ret	 0
?GetDescription@CItemData@@QBEPBDXZ ENDP		; CItemData::GetDescription
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetName@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetName@CItemData@@QBEPBDXZ PROC			; CItemData::GetName, COMDAT
; _this$ = ecx

; 278  : 	return m_ItemTable.szLocaleName;

  00000	8d 81 ed 00 00
	00		 lea	 eax, DWORD PTR [ecx+237]

; 279  : }

  00006	c3		 ret	 0
?GetName@CItemData@@QBEPBDXZ ENDP			; CItemData::GetName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIndex@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIndex@CItemData@@QBEKXZ PROC			; CItemData::GetIndex, COMDAT
; _this$ = ecx

; 273  : 	return m_ItemTable.dwVnum;

  00000	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [ecx+204]

; 274  : }

  00006	c3		 ret	 0
?GetIndex@CItemData@@QBEKXZ ENDP			; CItemData::GetIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ
_TEXT	SEGMENT
?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ PROC	; CItemData::GetTable, COMDAT
; _this$ = ecx

; 268  : 	return &m_ItemTable;

  00000	8d 81 cc 00 00
	00		 lea	 eax, DWORD PTR [ecx+204]

; 269  : }

  00006	c3		 ret	 0
?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ENDP	; CItemData::GetTable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CItemData::GetAttachingDataPointer, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 86   : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CItemData@@QAEKXZ ; CItemData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetAttachi

; 87   : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 91   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetAttachi:

; 89   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 8e bc 00 00
	00		 add	 ecx, DWORD PTR [esi+188]
  00028	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 89   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 90   : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 91   : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CItemData::GetAttachingDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CItemData::GetCollisionDataPointer, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 74   : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CItemData@@QAEKXZ ; CItemData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	73 22		 jae	 SHORT $LN9@GetCollisi

; 77   : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  00012	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00018	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  0001b	c1 e2 04	 shl	 edx, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 77   : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  0001e	03 ca		 add	 ecx, edx
  00020	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00023	75 0f		 jne	 SHORT $LN9@GetCollisi

; 79   : 
; 80   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00025	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
  00028	5e		 pop	 esi
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 81   : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 82   : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN9@GetCollisi:

; 78   : 		return FALSE;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 82   : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CItemData::GetCollisionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetAttachingDataCount@CItemData@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingDataCount@CItemData@@QAEKXZ PROC		; CItemData::GetAttachingDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 91 bc 00 00
	00		 sub	 edx, DWORD PTR [ecx+188]
  00011	f7 ea		 imul	 edx
  00013	c1 fa 03	 sar	 edx, 3
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 70   : }

  0001d	c3		 ret	 0
?GetAttachingDataCount@CItemData@@QAEKXZ ENDP		; CItemData::GetAttachingDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_ppModelThing$ = 12					; size = 4
?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z PROC ; CItemData::GetLODModelThingPointer, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00009	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0000f	2b c2		 sub	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 59   : 	if (dwIndex >= m_pLODModelThingVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 59   : 	if (dwIndex >= m_pLODModelThingVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	72 06		 jb	 SHORT $LN2@GetLODMode

; 60   : 		return FALSE;

  0001b	33 c0		 xor	 eax, eax

; 65   : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN2@GetLODMode:

; 61   : 
; 62   : 	*ppModelThing = m_pLODModelThingVector[dwIndex];

  00021	8b 45 0c	 mov	 eax, DWORD PTR _ppModelThing$[ebp]
  00024	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 63   : 
; 64   : 	return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 65   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z ENDP ; CItemData::GetLODModelThingPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLODModelThingCount@CItemData@@QAEKXZ
_TEXT	SEGMENT
?GetLODModelThingCount@CItemData@@QAEKXZ PROC		; CItemData::GetLODModelThingCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00006	2b 81 b0 00 00
	00		 sub	 eax, DWORD PTR [ecx+176]
  0000c	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 55   : }

  0000f	c3		 ret	 0
?GetLODModelThingCount@CItemData@@QAEKXZ ENDP		; CItemData::GetLODModelThingCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ
_TEXT	SEGMENT
?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ PROC ; CItemData::GetIconImage, COMDAT
; _this$ = ecx

; 46   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 47   : 	if(m_pIconImage == NULL && m_strIconFileName.empty() == false)

  00003	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  00009	85 c0		 test	 eax, eax
  0000b	75 20		 jne	 SHORT $LN2@GetIconIma
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4019 :         return size() == 0;

  0000d	39 46 5c	 cmp	 DWORD PTR [esi+92], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 47   : 	if(m_pIconImage == NULL && m_strIconFileName.empty() == false)

  00010	74 19		 je	 SHORT $LN14@GetIconIma
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00012	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00016	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]

; 2306 :         if (_Large_string_engaged()) {

  00019	72 02		 jb	 SHORT $LN9@GetIconIma

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@GetIconIma:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 48   : 		__SetIconImage(m_strIconFileName.c_str());

  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?__SetIconImage@CItemData@@IAEXPBD@Z ; CItemData::__SetIconImage

; 49   : 	return m_pIconImage;

  00023	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  00029	5e		 pop	 esi

; 50   : }

  0002a	c3		 ret	 0
$LN14@GetIconIma:

; 49   : 	return m_pIconImage;

  0002b	33 c0		 xor	 eax, eax
$LN2@GetIconIma:
  0002d	5e		 pop	 esi

; 50   : }

  0002e	c3		 ret	 0
?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ ENDP ; CItemData::GetIconImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC ; CItemData::GetDropModelThing, COMDAT
; _this$ = ecx

; 42   : 	return m_pDropModelThing;

  00000	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]

; 43   : }

  00006	c3		 ret	 0
?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP ; CItemData::GetDropModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC ; CItemData::GetSubModelThing, COMDAT
; _this$ = ecx

; 34   : 	if (m_pSubModelThing)

  00000	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN3@GetSubMode

; 35   : 		return m_pSubModelThing;
; 36   : 	else
; 37   : 		return m_pModelThing;

  0000a	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]
$LN3@GetSubMode:

; 38   : }

  00010	c3		 ret	 0
?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP ; CItemData::GetSubModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC	; CItemData::GetModelThing, COMDAT
; _this$ = ecx

; 29   : 	return m_pModelThing;

  00000	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]

; 30   : }

  00006	c3		 ret	 0
?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP	; CItemData::GetModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstDesc$ = 8						; size = 4
?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CItemData::SetDescription, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstDesc$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 100  : 	m_strDescription=c_rstDesc;

  00006	83 c1 64	 add	 ecx, 100		; 00000064H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 13		 je	 SHORT $LN4@SetDescrip

; 2319 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00011	8b d0		 mov	 edx, eax

; 2306 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN9@SetDescrip

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN9@SetDescrip:

; 3035 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetDescrip:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 101  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CItemData::SetDescription
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstSumm$ = 8						; size = 4
?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CItemData::SetSummary, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstSumm$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 95   : 	m_strSummary=c_rstSumm;

  00006	83 c1 7c	 add	 ecx, 124		; 0000007cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 13		 je	 SHORT $LN4@SetSummary

; 2319 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00011	8b d0		 mov	 edx, eax

; 2306 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN9@SetSummary

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN9@SetSummary:

; 3035 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetSummary:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 96   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CItemData::SetSummary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ?Clear@CItemData@@QAEXXZ
_TEXT	SEGMENT
?Clear@CItemData@@QAEXXZ PROC				; CItemData::Clear, COMDAT
; _this$ = ecx

; 505  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00004	6a 00		 push	 0
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 506  : 	m_strSummary = "";

  0000b	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 507  : 	m_strModelFileName = "";

  0001a	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 508  : 	m_strSubModelFileName = "";

  00029	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 509  : 	m_strDropModelFileName = "";

  00038	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00040	6a 00		 push	 0
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 510  : 	m_strIconFileName = "";

  00047	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1455 :         _Destroy(_Myfirst, _Mylast);

  0004f	ff b7 98 00 00
	00		 push	 DWORD PTR [edi+152]
  00055	8d 8f 94 00 00
	00		 lea	 ecx, DWORD PTR [edi+148]
  0005b	ff b7 94 00 00
	00		 push	 DWORD PTR [edi+148]
  00061	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1456 :         _Mylast = _Myfirst;

  00066	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0006c	89 87 98 00 00
	00		 mov	 DWORD PTR [edi+152], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 517  : 	m_pLODModelThingVector.clear();

  00072	8b 87 b0 00 00
	00		 mov	 eax, DWORD PTR [edi+176]

; 518  : 
; 519  : 	memset(&m_ItemTable, 0, sizeof(m_ItemTable));

  00078	68 9c 00 00 00	 push	 156			; 0000009cH
  0007d	89 87 b4 00 00
	00		 mov	 DWORD PTR [edi+180], eax
  00083	8d 87 cc 00 00
	00		 lea	 eax, DWORD PTR [edi+204]
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c7 87 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+160], 0
  00096	c7 87 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+164], 0
  000a0	c7 87 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+168], 0
  000aa	c7 87 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+172], 0
  000b4	e8 00 00 00 00	 call	 _memset

; 520  : #ifdef ENABLE_ACCE_SYSTEM
; 521  : 	memset(&m_ScaleTable, 0, sizeof(m_ScaleTable));

  000b9	68 f0 00 00 00	 push	 240			; 000000f0H
  000be	8d 87 68 05 00
	00		 lea	 eax, DWORD PTR [edi+1384]
  000c4	6a 00		 push	 0
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memset

; 522  : #endif
; 523  : #ifdef ENABLE_SHINING_SYSTEM
; 524  : #ifdef __cplusplus < 199711L
; 525  : 	memset(&m_ItemShiningTable, 0, sizeof(m_ItemShiningTable));

  000cc	68 00 04 00 00	 push	 1024			; 00000400H
  000d1	8d 87 68 01 00
	00		 lea	 eax, DWORD PTR [edi+360]
  000d7	6a 00		 push	 0
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _memset
  000df	83 c4 24	 add	 esp, 36			; 00000024H
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 526  : #else
; 527  : 	m_ItemShiningTable = {};
; 528  : #endif
; 529  : #endif
; 530  : }

  000e4	c3		 ret	 0
?Clear@CItemData@@QAEXXZ ENDP				; CItemData::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ??1CItemData@@UAE@XZ
_TEXT	SEGMENT
??1CItemData@@UAE@XZ PROC				; CItemData::~CItemData, COMDAT
; _this$ = ecx

; 538  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 539  : }

  00003	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemData@@6B@
  0000f	e8 00 00 00 00	 call	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00014	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  0001a	85 c0		 test	 eax, eax
  0001c	74 51		 je	 SHORT $LN6@CItemData

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0001e	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]
  00024	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00029	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002f	72 16		 jb	 SHORT $LN22@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00031	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00034	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00037	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003f	0f 87 dc 01 00
	00		 ja	 $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00045	8b c2		 mov	 eax, edx
$LN22@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00047	51		 push	 ecx
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0004e	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00058	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0005b	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0

; 1769 :             _Myend   = nullptr;

  00065	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
$LN6@CItemData:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 539  : }

  0006f	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  00075	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007a	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00083	72 2c		 jb	 SHORT $LN40@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00088	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00089	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008f	72 16		 jb	 SHORT $LN50@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00091	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00094	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00097	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00099	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009f	0f 87 7c 01 00
	00		 ja	 $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a5	8b c2		 mov	 eax, edx
$LN50@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000a7	51		 push	 ecx
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ae	83 c4 08	 add	 esp, 8
$LN40@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  000b1	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000bb	c7 86 90 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+144], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000c5	c6 46 7c 00	 mov	 BYTE PTR [esi+124], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  000c9	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  000cc	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000cf	72 2c		 jb	 SHORT $LN67@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d1	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000d4	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000db	72 16		 jb	 SHORT $LN77@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000dd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e0	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e3	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000eb	0f 87 30 01 00
	00		 ja	 $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f1	8b c2		 mov	 eax, edx
$LN77@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000f3	51		 push	 ecx
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fa	83 c4 08	 add	 esp, 8
$LN67@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  000fd	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00104	c7 46 78 0f 00
	00 00		 mov	 DWORD PTR [esi+120], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0010b	c6 46 64 00	 mov	 BYTE PTR [esi+100], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0010f	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00112	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00115	72 2c		 jb	 SHORT $LN94@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00117	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0011a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0011b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00121	72 16		 jb	 SHORT $LN104@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00123	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00126	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00129	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00131	0f 87 ea 00 00
	00		 ja	 $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00137	8b c2		 mov	 eax, edx
$LN104@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00139	51		 push	 ecx
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00140	83 c4 08	 add	 esp, 8
$LN94@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00143	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0014a	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00151	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  00155	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00158	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0015b	72 2c		 jb	 SHORT $LN121@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00160	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00161	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00167	72 16		 jb	 SHORT $LN131@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00169	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0016c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0016f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00171	83 c0 fc	 add	 eax, -4			; fffffffcH
  00174	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00177	0f 87 a4 00 00
	00		 ja	 $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0017d	8b c2		 mov	 eax, edx
$LN131@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0017f	51		 push	 ecx
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00186	83 c4 08	 add	 esp, 8
$LN121@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00189	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00190	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00197	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0019b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0019e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001a1	72 28		 jb	 SHORT $LN148@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001a6	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ad	72 12		 jb	 SHORT $LN158@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001af	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b2	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b5	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bd	77 62		 ja	 SHORT $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001bf	8b c2		 mov	 eax, edx
$LN158@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001c1	51		 push	 ecx
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c8	83 c4 08	 add	 esp, 8
$LN148@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  001cb	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001d2	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001d9	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  001dd	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  001e0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001e3	72 28		 jb	 SHORT $LN175@CItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001e8	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ef	72 12		 jb	 SHORT $LN185@CItemData

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001f7	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  001fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ff	77 20		 ja	 SHORT $LN182@CItemData

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00201	8b c2		 mov	 eax, edx
$LN185@CItemData:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00203	51		 push	 ecx
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020a	83 c4 08	 add	 esp, 8
$LN175@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0020d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00214	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0021b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0021f	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 539  : }

  00220	c3		 ret	 0
$LN182@CItemData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00221	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN190@CItemData:
  00226	cc		 int	 3
??1CItemData@@UAE@XZ ENDP				; CItemData::~CItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp
;	COMDAT ??0CItemData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItemData@@QAE@XZ PROC				; CItemData::CItemData, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CItemData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemData@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 4596 :         _My_data._Mysize = 0;

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0003d	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00048	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 533  : {

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00056	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0005d	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00064	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00068	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 4596 :         _My_data._Mysize = 0;

  0006f	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00076	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007d	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00081	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0

; 4596 :         _My_data._Mysize = 0;

  00088	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0008f	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00096	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0009a	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0

; 4596 :         _My_data._Mysize = 0;

  000a1	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000a8	c7 46 78 0f 00
	00 00		 mov	 DWORD PTR [esi+120], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000af	c6 46 64 00	 mov	 BYTE PTR [esi+100], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000b3	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0

; 4596 :         _My_data._Mysize = 0;

  000ba	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000c4	c7 86 90 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+144], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ce	c6 46 7c 00	 mov	 BYTE PTR [esi+124], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d2	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  000dc	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000e6	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  000f0	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  000fa	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
  00104	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
  0010e	c7 86 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+188], 0
  00118	c7 86 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+192], 0
  00122	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.cpp

; 533  : {

  0012c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 534  : 	Clear();

  00130	e8 00 00 00 00	 call	 ?Clear@CItemData@@QAEXXZ ; CItemData::Clear

; 535  : }

  00135	8b c6		 mov	 eax, esi
  00137	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00141	59		 pop	 ecx
  00142	5e		 pop	 esi
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItemData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 64	 add	 ecx, 100		; 00000064H
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0CItemData@@QAE@XZ$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
__unwindfunclet$??0CItemData@@QAE@XZ$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00067	e9 00 00 00 00	 jmp	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
__ehhandler$??0CItemData@@QAE@XZ:
  00071	90		 npad	 1
  00072	90		 npad	 1
  00073	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00077	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0007a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0007d	33 c8		 xor	 ecx, eax
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CItemData@@QAE@XZ
  00089	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CItemData@@QAE@XZ ENDP				; CItemData::CItemData
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN48@Destroy
  0000f	90		 npad	 1
$LL6@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN25@Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN35@Destroy

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 2a		 ja	 SHORT $LN32@Destroy

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN35@Destroy:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN25@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL6@Destroy
$LN48@Destroy:
  00057	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1681 :     }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN32@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN49@Destroy:
  00062	cc		 int	 3
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 61		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00009	57		 push	 edi
  0000a	ff 76 04	 push	 DWORD PTR [esi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001d	2b cf		 sub	 ecx, edi
  0001f	f7 e9		 imul	 ecx
  00021	c1 fa 02	 sar	 edx, 2
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0002e	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN20@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 23		 ja	 SHORT $LN17@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b fa		 mov	 edi, edx
$LN20@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00055	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1768 :             _Mylast  = nullptr;

  0005b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00062	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00069	5f		 pop	 edi
$LN4@vector:
  0006a	5e		 pop	 esi

; 717  :     }

  0006b	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00071	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
