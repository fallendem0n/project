; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\Distribute\FlyTrace.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z	; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8		; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8	; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z:PROC	; CDynamicPool<CFlyTrace>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyTrace@@@@8 DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyTrace@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyTrace@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyTrace@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ ; CDynamicPool<CFlyTrace>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CFlyTrace@@QAE@XZ				; CFlyTrace::CFlyTrace
PUBLIC	??1CFlyTrace@@UAE@XZ				; CFlyTrace::~CFlyTrace
PUBLIC	?Destroy@CFlyTrace@@QAEXXZ			; CFlyTrace::Destroy
PUBLIC	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
PUBLIC	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
PUBLIC	?Update@CFlyTrace@@QAEXXZ			; CFlyTrace::Update
PUBLIC	?Render@CFlyTrace@@QAEXXZ			; CFlyTrace::Render
PUBLIC	?__Initialize@CFlyTrace@@IAEXXZ			; CFlyTrace::__Initialize
PUBLIC	?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
PUBLIC	?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
PUBLIC	?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
PUBLIC	?DestroySystem@CFlyTrace@@SAXXZ			; CFlyTrace::DestroySystem
PUBLIC	?New@CFlyTrace@@SAPAV1@XZ			; CFlyTrace::New
PUBLIC	?Delete@CFlyTrace@@SAXPAV1@@Z			; CFlyTrace::Delete
PUBLIC	??_GCFlyTrace@@UAEPAXI@Z			; CFlyTrace::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
PUBLIC	?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
PUBLIC	?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
PUBLIC	??0TFlyVertex@@QAE@XZ				; TFlyVertex::TFlyVertex
PUBLIC	??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
PUBLIC	??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
PUBLIC	??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
PUBLIC	??_7CFlyTrace@@6B@				; CFlyTrace::`vftable'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlyTrace@@6B@				; CFlyTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTrace@@@8				; CFlyTrace `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTrace@@8				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTrace@@8				; CFlyTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTrace@@8			; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?UpdateViewMatrix@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::UpdateViewMatrix
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SaveVertexShader
EXTRN	?RestoreVertexShader@CStateManager@@QAEXXZ:PROC	; CStateManager::RestoreVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	??_ECFlyTrace@@UAEPAXI@Z:PROC			; CFlyTrace::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyTrace@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTrace@@8 DD FLAT:??_R0?AVCFlyTrace@@@8 ; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTrace@@8
rdata$r	SEGMENT
??_R2CFlyTrace@@8 DD FLAT:??_R1A@?0A@EA@CFlyTrace@@8	; CFlyTrace::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CFlyTrace@@8
rdata$r	SEGMENT
??_R3CFlyTrace@@8 DD 00H				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTrace@@@8
data$rs	SEGMENT
??_R0?AVCFlyTrace@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTrace@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyTrace@@6B@
rdata$r	SEGMENT
??_R4CFlyTrace@@6B@ DD 00H				; CFlyTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTrace@@@8
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CFlyTrace@@6B@
CONST	SEGMENT
??_7CFlyTrace@@6B@ DD FLAT:??_R4CFlyTrace@@6B@		; CFlyTrace::`vftable'
	DD	FLAT:??_ECFlyTrace@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyTrace@@@@6B@ ; CFlyTrace::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CFlyTrace@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CFlyTrace@@SAPAV1@XZ$0
__ehfuncinfo$?New@CFlyTrace@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CFlyTrace@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CFlyTrace@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1
__ehfuncinfo$?Render@CFlyTrace@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Render@CFlyTrace@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyTrace@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyTrace@@QAE@XZ$0
__ehfuncinfo$??0CFlyTrace@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFlyTrace@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Tmp$2 = -144						; size = 144
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7262 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7262 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0000c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7262 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00010	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00011	8b 5d 0c	 mov	 ebx, DWORD PTR __Mid$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7262 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00014	56		 push	 esi
  00015	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00016	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0001a	0f 2f c1	 comiss	 xmm0, xmm1
  0001d	76 3d		 jbe	 SHORT $LN18@Med3_unche

; 325  :         if (this != _STD addressof(_Right)) {

  0001f	3b d8		 cmp	 ebx, eax
  00021	74 39		 je	 SHORT $LN18@Med3_unche

; 105  :     _Left    = _STD move(_Right);

  00023	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00027	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 106  :     _Right   = _STD move(_Tmp);

  0002a	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 104  :     _Ty _Tmp = _STD move(_Left);

  0002e	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00034	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00039	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0003b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00040	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00043	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00046	f3 a5		 rep movsd
  00048	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0004d	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
  00053	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00056	f3 a5		 rep movsd
  00058	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
$LN18@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0005c	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0005f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00063	0f 2f c8	 comiss	 xmm1, xmm0
  00066	76 53		 jbe	 SHORT $LN4@Med3_unche

; 325  :         if (this != _STD addressof(_Right)) {

  00068	3b c3		 cmp	 eax, ebx
  0006a	74 39		 je	 SHORT $LN44@Med3_unche

; 105  :     _Left    = _STD move(_Right);

  0006c	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 104  :     _Ty _Tmp = _STD move(_Left);

  00070	8d 70 04	 lea	 esi, DWORD PTR [eax+4]

; 106  :     _Right   = _STD move(_Tmp);

  00073	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00077	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  0007d	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00082	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00084	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00089	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  0008c	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0008f	f3 a5		 rep movsd
  00091	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00096	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0009c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0009f	f3 a5		 rep movsd
  000a1	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
$LN44@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000a5	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ac	0f 2f c1	 comiss	 xmm0, xmm1
  000af	76 0a		 jbe	 SHORT $LN4@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7272 :             _STD iter_swap(_Mid, _First);

  000b1	50		 push	 eax
  000b2	53		 push	 ebx
  000b3	e8 00 00 00 00	 call	 ??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
  000b8	83 c4 08	 add	 esp, 8
$LN4@Med3_unche:

; 7273 :         }
; 7274 :     }
; 7275 : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z PROC ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 80   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 325  :         if (this != _STD addressof(_Right)) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]

; 80   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 325  :         if (this != _STD addressof(_Right)) {

  0000c	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000f	3b ca		 cmp	 ecx, edx
  00011	74 3e		 je	 SHORT $LN6@iter_swap

; 104  :     _Ty _Tmp = _STD move(_Left);

  00013	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 105  :     _Left    = _STD move(_Right);

  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	56		 push	 esi
  0001a	89 01		 mov	 DWORD PTR [ecx], eax

; 327  :             _Swap_adl(second, _Right.second);

  0001c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 104  :     _Ty _Tmp = _STD move(_Left);

  0001f	57		 push	 edi

; 106  :     _Right   = _STD move(_Tmp);

  00020	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00024	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  0002a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002f	8b f0		 mov	 esi, eax
  00031	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00033	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00038	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0003b	8b f8		 mov	 edi, eax
  0003d	f3 a5		 rep movsd
  0003f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00044	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0004a	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0004d	f3 a5		 rep movsd
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
$LN6@iter_swap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 82   : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z ENDP ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
tv516 = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__Idx$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 5672 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5673 :     // percolate _Hole to _Bottom, then push _Val
; 5674 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5675 : 
; 5676 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5677 :     const _Diff _Top = _Hole;
; 5678 :     _Diff _Idx       = _Hole;
; 5679 : 
; 5680 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5681 :     // calculating the child's index can trigger integer overflows
; 5682 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00009	53		 push	 ebx

; 5683 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	49		 dec	 ecx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00013	8b d7		 mov	 edx, edi
  00015	89 4d f8	 mov	 DWORD PTR tv516[ebp], ecx
  00018	8b c7		 mov	 eax, edi
  0001a	d1 f9		 sar	 ecx, 1
  0001c	89 55 0c	 mov	 DWORD PTR __Top$1$[ebp], edx
  0001f	89 4d fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], ecx
  00022	3b f9		 cmp	 edi, ecx
  00024	7d 64		 jge	 SHORT $LN3@Pop_heap_h
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@Pop_heap_h:

; 5684 :         _Idx = 2 * _Idx + 2;

  00030	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]

; 5685 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00033	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00036	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  0003c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0003f	69 c0 94 00 00
	00		 imul	 eax, eax, 148

; 5688 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00045	f3 0f 10 04 18	 movss	 xmm0, DWORD PTR [eax+ebx]
  0004a	33 c0		 xor	 eax, eax
  0004c	0f 2f 04 19	 comiss	 xmm0, DWORD PTR [ecx+ebx]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00050	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5688 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00055	0f 96 c0	 setbe	 al
  00058	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  0005e	40		 inc	 eax
  0005f	03 fb		 add	 edi, ebx
  00061	03 c2		 add	 eax, edx
  00063	69 f0 94 00 00
	00		 imul	 esi, eax, 148
  00069	89 45 08	 mov	 DWORD PTR __Idx$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0006c	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]
  0006f	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00071	83 c7 04	 add	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5689 :         _Hole             = _Idx;

  00074	8b 45 08	 mov	 eax, DWORD PTR __Idx$1$[ebp]
  00077	03 f3		 add	 esi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00079	83 c6 04	 add	 esi, 4
  0007c	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5683 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 5689 :         _Hole             = _Idx;

  00081	8b f8		 mov	 edi, eax
  00083	3b c1		 cmp	 eax, ecx
  00085	7c a9		 jl	 SHORT $LL2@Pop_heap_h
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Top$1$[ebp]
$LN3@Pop_heap_h:

; 5690 :     }
; 5691 : 
; 5692 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0008a	3b c1		 cmp	 eax, ecx
  0008c	75 33		 jne	 SHORT $LN5@Pop_heap_h
  0008e	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00091	a8 01		 test	 al, 1
  00093	75 2c		 jne	 SHORT $LN5@Pop_heap_h

; 5693 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00095	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0009b	8d b3 70 ff ff
	ff		 lea	 esi, DWORD PTR [ebx-144]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5693 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000a1	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  000a7	03 fb		 add	 edi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000a9	03 f1		 add	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  000ab	8b 84 19 6c ff
	ff ff		 mov	 eax, DWORD PTR [ecx+ebx-148]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000b2	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  000b7	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000b9	83 c7 04	 add	 edi, 4
  000bc	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5694 :         _Hole             = _Bottom - 1;

  000be	8b 7d f8	 mov	 edi, DWORD PTR tv516[ebp]
$LN5@Pop_heap_h:

; 5563 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000c1	3b d7		 cmp	 edx, edi
  000c3	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  000c6	7d 43		 jge	 SHORT $LN54@Pop_heap_h
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL25@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000d0	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5562 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  000d4	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000d7	d1 f8		 sar	 eax, 1

; 5563 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000d9	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000df	f3 0f 10 0c 19	 movss	 xmm1, DWORD PTR [ecx+ebx]
  000e4	0f 2f c1	 comiss	 xmm0, xmm1
  000e7	76 22		 jbe	 SHORT $LN54@Pop_heap_h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5566 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000e9	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000ef	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5566 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000f2	03 fb		 add	 edi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000f4	03 f1		 add	 esi, ecx
  000f6	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  000fb	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000ff	83 c7 04	 add	 edi, 4
  00102	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5567 :         _Hole             = _Idx;

  00104	8b f8		 mov	 edi, eax
  00106	39 45 0c	 cmp	 DWORD PTR __Top$1$[ebp], eax
  00109	7c c5		 jl	 SHORT $LL25@Pop_heap_h
$LN54@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0010b	8b 02		 mov	 eax, DWORD PTR [edx]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0010d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5570 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00110	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00116	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5570 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0011b	03 fb		 add	 edi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0011d	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0011f	83 c7 04	 add	 edi, 4
  00122	f3 a5		 rep movsd
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5698 : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -1020						; size = 144
__Tmp$2 = -876						; size = 144
__Tmp$3 = -732						; size = 144
__Tmp$4 = -588						; size = 144
__Tmp$5 = -444						; size = 144
__Tmp$6 = -300						; size = 144
__Tmp$7 = -156						; size = 144
tv1100 = -12						; size = 4
tv1091 = -12						; size = 4
__Glast$1$ = -8						; size = 4
__Pfirst$1$ = -8					; size = 4
tv1102 = -4						; size = 4
__Last$1$ = -4						; size = 4
__Gfirst$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
tv1101 = 20						; size = 4
__Plast$1$ = 20						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7295 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 03 00
	00		 sub	 esp, 1020		; 000003fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 7296 :     // partition [_First, _Last)
; 7297 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00013	8b ce		 mov	 ecx, esi

; 7298 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00015	81 c6 6c ff ff
	ff		 add	 esi, -148		; ffffff6cH
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  0001f	2b cf		 sub	 ecx, edi
  00021	f7 e9		 imul	 ecx

; 7281 :     const _Diff _Count = _Last - _First;

  00023	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H

; 7298 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00028	89 75 fc	 mov	 DWORD PTR __Last$1$[ebp], esi
  0002b	03 d1		 add	 edx, ecx
  0002d	c1 fa 07	 sar	 edx, 7
  00030	8b ca		 mov	 ecx, edx
  00032	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00035	03 ca		 add	 ecx, edx
  00037	d1 f9		 sar	 ecx, 1
  00039	69 d9 94 00 00
	00		 imul	 ebx, ecx, 148

; 7281 :     const _Diff _Count = _Last - _First;

  0003f	8b ce		 mov	 ecx, esi
  00041	2b cf		 sub	 ecx, edi
  00043	f7 e9		 imul	 ecx

; 7296 :     // partition [_First, _Last)
; 7297 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00045	03 df		 add	 ebx, edi

; 7281 :     const _Diff _Count = _Last - _First;

  00047	03 d1		 add	 edx, ecx

; 7296 :     // partition [_First, _Last)
; 7297 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00049	89 5d f8	 mov	 DWORD PTR __Pfirst$1$[ebp], ebx

; 7281 :     const _Diff _Count = _Last - _First;

  0004c	c1 fa 07	 sar	 edx, 7
  0004f	8b c2		 mov	 eax, edx
  00051	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00054	03 c2		 add	 eax, edx

; 7282 :     if (40 < _Count) { // Tukey's ninther

  00056	83 f8 28	 cmp	 eax, 40			; 00000028H
  00059	7e 64		 jle	 SHORT $LN35@Partition_

; 7283 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 7284 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7285 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0005b	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0005e	40		 inc	 eax
  0005f	8b 75 14	 mov	 esi, DWORD PTR __Pred$[ebp]
  00062	c1 f8 03	 sar	 eax, 3
  00065	69 d8 28 01 00
	00		 imul	 ebx, eax, 296
  0006b	69 f8 94 00 00
	00		 imul	 edi, eax, 148
  00071	56		 push	 esi
  00072	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00075	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	89 4d f4	 mov	 DWORD PTR tv1091[ebp], ecx
  0007e	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7286 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$1$[ebp]
  00086	56		 push	 esi
  00087	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	2b cf		 sub	 ecx, edi
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7287 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00094	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00097	8b f0		 mov	 esi, eax
  00099	2b f7		 sub	 esi, edi
  0009b	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0009e	57		 push	 edi
  0009f	50		 push	 eax
  000a0	2b c3		 sub	 eax, ebx
  000a2	56		 push	 esi
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7288 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a9	8b 5d f8	 mov	 ebx, DWORD PTR __Pfirst$1$[ebp]
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	53		 push	 ebx
  000af	ff 75 f4	 push	 DWORD PTR tv1091[ebp]
  000b2	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7289 :     } else {

  000b7	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  000ba	83 c4 40	 add	 esp, 64			; 00000040H
  000bd	eb 0e		 jmp	 SHORT $LN36@Partition_
$LN35@Partition_:

; 7290 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000bf	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c2	56		 push	 esi
  000c3	53		 push	 ebx
  000c4	57		 push	 edi
  000c5	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000ca	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@Partition_:

; 7299 :     _RanIt _Pfirst = _Mid;
; 7300 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  000cd	8d 8b 94 00 00
	00		 lea	 ecx, DWORD PTR [ebx+148]
  000d3	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx

; 7301 : 
; 7302 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 7303 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000d6	3b fb		 cmp	 edi, ebx
  000d8	73 25		 jae	 SHORT $LN263@Partition_
  000da	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  000de	66 90		 npad	 2
$LL2@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000e0	f3 0f 10 83 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [ebx-148]
  000e8	0f 2f c8	 comiss	 xmm1, xmm0
  000eb	77 12		 ja	 SHORT $LN263@Partition_
  000ed	0f 2f c1	 comiss	 xmm0, xmm1
  000f0	77 0d		 ja	 SHORT $LN263@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7304 :         --_Pfirst;

  000f2	81 c3 6c ff ff
	ff		 add	 ebx, -148		; ffffff6cH
  000f8	0f 28 c8	 movaps	 xmm1, xmm0
  000fb	3b fb		 cmp	 edi, ebx
  000fd	72 e1		 jb	 SHORT $LL2@Partition_
$LN263@Partition_:

; 7307 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ff	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00102	3b c8		 cmp	 ecx, eax
  00104	73 25		 jae	 SHORT $LN64@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00106	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Partition_:
  00110	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00114	0f 2f c8	 comiss	 xmm1, xmm0
  00117	77 0f		 ja	 SHORT $LN264@Partition_
  00119	0f 2f c1	 comiss	 xmm0, xmm1
  0011c	77 0a		 ja	 SHORT $LN264@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7307 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0011e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00124	3b c8		 cmp	 ecx, eax
  00126	72 e8		 jb	 SHORT $LL4@Partition_
$LN264@Partition_:
  00128	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
$LN64@Partition_:

; 7308 :         ++_Plast;
; 7309 :     }
; 7310 : 
; 7311 :     _RanIt _Gfirst = _Plast;
; 7312 :     _RanIt _Glast  = _Pfirst;

  0012b	8b f3		 mov	 esi, ebx
  0012d	8b d1		 mov	 edx, ecx
  0012f	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
$LN269@Partition_:

; 7313 : 
; 7314 :     for (;;) { // partition
; 7315 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00132	89 55 fc	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LL6@Partition_:
  00135	3b d0		 cmp	 edx, eax
  00137	0f 83 9b 00 00
	00		 jae	 $LN78@Partition_
  0013d	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00140	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00143	89 45 14	 mov	 DWORD PTR tv1101[ebp], eax
  00146	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL11@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00150	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00154	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00158	0f 2f c8	 comiss	 xmm1, xmm0
  0015b	77 65		 ja	 SHORT $LN9@Partition_
  0015d	0f 2f c1	 comiss	 xmm0, xmm1
  00160	77 6a		 ja	 SHORT $LN265@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7320 :             } else if (_Plast != _Gfirst) {

  00162	8d b1 94 00 00
	00		 lea	 esi, DWORD PTR [ecx+148]
  00168	89 75 f4	 mov	 DWORD PTR tv1100[ebp], esi
  0016b	8d b8 94 00 00
	00		 lea	 edi, DWORD PTR [eax+148]
  00171	89 7d fc	 mov	 DWORD PTR tv1102[ebp], edi
  00174	3b ca		 cmp	 ecx, edx
  00176	74 40		 je	 SHORT $LN19@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00178	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0017c	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$7[ebp]

; 105  :     _Left    = _STD move(_Right);

  00182	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1

; 104  :     _Ty _Tmp = _STD move(_Left);

  00186	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7322 :                 ++_Plast;

  00188	8b 45 fc	 mov	 eax, DWORD PTR tv1102[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  0018b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 106  :     _Right   = _STD move(_Tmp);

  00190	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00194	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00196	8b 7d 14	 mov	 edi, DWORD PTR tv1101[ebp]
  00199	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0019c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001a1	f3 a5		 rep movsd
  001a3	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001a8	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$7[ebp]
  001ae	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  001b1	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7322 :                 ++_Plast;

  001b3	8b 4d f4	 mov	 ecx, DWORD PTR tv1100[ebp]

; 7323 :             } else {

  001b6	eb 04		 jmp	 SHORT $LN267@Partition_
$LN19@Partition_:

; 7324 :                 ++_Plast;

  001b8	8b ce		 mov	 ecx, esi
  001ba	8b c7		 mov	 eax, edi
$LN267@Partition_:

; 7313 : 
; 7314 :     for (;;) { // partition
; 7315 :         for (; _Gfirst < _Last; ++_Gfirst) {

  001bc	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  001bf	89 45 14	 mov	 DWORD PTR tv1101[ebp], eax
$LN9@Partition_:
  001c2	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  001c8	3b d6		 cmp	 edx, esi
  001ca	72 84		 jb	 SHORT $LL11@Partition_
$LN265@Partition_:
  001cc	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  001cf	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  001d2	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
  001d5	89 55 fc	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LN78@Partition_:

; 7328 :         for (; _First < _Glast; --_Glast) {

  001d8	3b f7		 cmp	 esi, edi
  001da	76 79		 jbe	 SHORT $LN268@Partition_
  001dc	8d 96 6c ff ff
	ff		 lea	 edx, DWORD PTR [esi-148]
$LL14@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  001e2	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  001e6	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  001ea	0f 2f c1	 comiss	 xmm0, xmm1
  001ed	77 4e		 ja	 SHORT $LN12@Partition_
  001ef	0f 2f c8	 comiss	 xmm1, xmm0
  001f2	77 5c		 ja	 SHORT $LN266@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7333 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001f4	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  001fa	3b da		 cmp	 ebx, edx
  001fc	74 3f		 je	 SHORT $LN12@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  001fe	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00202	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 105  :     _Left    = _STD move(_Right);

  00205	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 104  :     _Ty _Tmp = _STD move(_Left);

  00209	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR __Tmp$6[ebp]

; 106  :     _Right   = _STD move(_Tmp);

  0020f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00213	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00218	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0021a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0021f	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00222	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00225	f3 a5		 rep movsd
  00227	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0022c	8d b5 d4 fe ff
	ff		 lea	 esi, DWORD PTR __Tmp$6[ebp]
  00232	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00235	f3 a5		 rep movsd
  00237	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  0023a	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
$LN12@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7328 :         for (; _First < _Glast; --_Glast) {

  0023d	81 ee 94 00 00
	00		 sub	 esi, 148		; 00000094H
  00243	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
  00249	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
  0024c	3b fe		 cmp	 edi, esi
  0024e	72 92		 jb	 SHORT $LL14@Partition_
$LN266@Partition_:
  00250	8b 55 fc	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]

; 7334 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7335 :             }
; 7336 :         }
; 7337 : 
; 7338 :         if (_Glast == _First && _Gfirst == _Last) {

  00253	3b f7		 cmp	 esi, edi
$LN268@Partition_:
  00255	0f 85 ba 00 00
	00		 jne	 $LN27@Partition_
  0025b	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  0025e	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  00261	0f 84 d1 01 00
	00		 je	 $LN237@Partition_

; 7340 :         }
; 7341 : 
; 7342 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7343 :             if (_Plast != _Gfirst) {

  00267	3b ca		 cmp	 ecx, edx
  00269	74 44		 je	 SHORT $LN139@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  0026b	3b d9		 cmp	 ebx, ecx
  0026d	74 40		 je	 SHORT $LN139@Partition_

; 105  :     _Left    = _STD move(_Right);

  0026f	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :             _Swap_adl(second, _Right.second);

  00271	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 104  :     _Ty _Tmp = _STD move(_Left);

  00274	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00278	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 105  :     _Left    = _STD move(_Right);

  0027b	89 03		 mov	 DWORD PTR [ebx], eax

; 104  :     _Ty _Tmp = _STD move(_Left);

  0027d	8d bd 44 fe ff
	ff		 lea	 edi, DWORD PTR __Tmp$5[ebp]

; 106  :     _Right   = _STD move(_Tmp);

  00283	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00287	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0028c	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0028e	8b f2		 mov	 esi, edx
  00290	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00293	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00298	f3 a5		 rep movsd
  0029a	8b fa		 mov	 edi, edx
  0029c	8d b5 44 fe ff
	ff		 lea	 esi, DWORD PTR __Tmp$5[ebp]
  002a2	8b 55 fc	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  002a5	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002aa	f3 a5		 rep movsd
  002ac	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
$LN139@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7347 :             ++_Plast;

  002af	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  002b5	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  002b8	3b da		 cmp	 ebx, edx
  002ba	74 3f		 je	 SHORT $LN158@Partition_

; 105  :     _Left    = _STD move(_Right);

  002bc	8b 02		 mov	 eax, DWORD PTR [edx]

; 104  :     _Ty _Tmp = _STD move(_Left);

  002be	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  002c1	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  002c5	8d bd b4 fd ff
	ff		 lea	 edi, DWORD PTR __Tmp$4[ebp]

; 105  :     _Left    = _STD move(_Right);

  002cb	89 03		 mov	 DWORD PTR [ebx], eax

; 104  :     _Ty _Tmp = _STD move(_Left);

  002cd	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 106  :     _Right   = _STD move(_Tmp);

  002d2	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  002d6	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  002d8	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  002db	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002e0	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  002e3	f3 a5		 rep movsd
  002e5	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  002e8	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002ed	8b 55 fc	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  002f0	8d b5 b4 fd ff
	ff		 lea	 esi, DWORD PTR __Tmp$4[ebp]
  002f6	f3 a5		 rep movsd
  002f8	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
$LN158@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7350 :             ++_Gfirst;

  002fb	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  002fe	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
  00304	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00307	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  0030d	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00310	e9 1d fe ff ff	 jmp	 $LN269@Partition_
$LN27@Partition_:

; 7351 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00315	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00318	81 c6 6c ff ff
	ff		 add	 esi, -148		; ffffff6cH
  0031e	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
  00321	3b d0		 cmp	 edx, eax
  00323	0f 85 b2 00 00
	00		 jne	 $LN30@Partition_

; 7352 :             if (--_Glast != --_Pfirst) {

  00329	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  0032f	3b f3		 cmp	 esi, ebx
  00331	74 46		 je	 SHORT $LN177@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00333	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00337	8d bd 24 fd ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]

; 105  :     _Left    = _STD move(_Right);

  0033d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 104  :     _Ty _Tmp = _STD move(_Left);

  0033f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00344	8b 55 fc	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]

; 105  :     _Left    = _STD move(_Right);

  00347	89 06		 mov	 DWORD PTR [esi], eax

; 327  :             _Swap_adl(second, _Right.second);

  00349	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 106  :     _Right   = _STD move(_Tmp);

  0034c	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  00350	8b f0		 mov	 esi, eax
  00352	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00354	8b f8		 mov	 edi, eax
  00356	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00359	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0035c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00361	f3 a5		 rep movsd
  00363	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00368	8d b5 24 fd ff
	ff		 lea	 esi, DWORD PTR __Tmp$3[ebp]
  0036e	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00371	f3 a5		 rep movsd
  00373	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  00376	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
$LN177@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7356 :             _STD iter_swap(_Pfirst, --_Plast);

  00379	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  0037c	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  00382	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  00385	3b d9		 cmp	 ebx, ecx
  00387	0f 84 a8 fd ff
	ff		 je	 $LL6@Partition_

; 105  :     _Left    = _STD move(_Right);

  0038d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :             _Swap_adl(second, _Right.second);

  0038f	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 104  :     _Ty _Tmp = _STD move(_Left);

  00392	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00396	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 105  :     _Left    = _STD move(_Right);

  00399	89 03		 mov	 DWORD PTR [ebx], eax

; 104  :     _Ty _Tmp = _STD move(_Left);

  0039b	8d bd 94 fc ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7357 :         } else {

  003a1	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  003a4	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  003a8	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003ad	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  003af	8b f2		 mov	 esi, edx
  003b1	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  003b4	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003b9	f3 a5		 rep movsd
  003bb	8b fa		 mov	 edi, edx
  003bd	8d b5 94 fc ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7357 :         } else {

  003c3	8b 55 fc	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  003c6	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003cb	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7357 :         } else {

  003cd	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  003d0	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  003d3	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  003d6	e9 5a fd ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:

; 7358 :             _STD iter_swap(_Gfirst, --_Glast);

  003db	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  003de	3b d6		 cmp	 edx, esi
  003e0	74 48		 je	 SHORT $LN215@Partition_

; 105  :     _Left    = _STD move(_Right);

  003e2	8b 06		 mov	 eax, DWORD PTR [esi]

; 104  :     _Ty _Tmp = _STD move(_Left);

  003e4	8d bd 04 fc ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  003ea	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  003ee	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 105  :     _Left    = _STD move(_Right);

  003f3	89 02		 mov	 DWORD PTR [edx], eax

; 327  :             _Swap_adl(second, _Right.second);

  003f5	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  003f8	8b 45 fc	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]

; 106  :     _Right   = _STD move(_Tmp);

  003fb	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 104  :     _Ty _Tmp = _STD move(_Left);

  003ff	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00402	f3 a5		 rep movsd
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00404	8b f2		 mov	 esi, edx
  00406	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00409	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0040e	f3 a5		 rep movsd
  00410	8b fa		 mov	 edi, edx
  00412	8d b5 04 fc ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  00418	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0041d	8b d0		 mov	 edx, eax
  0041f	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00422	f3 a5		 rep movsd
  00424	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  00427	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
$LN215@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7361 :     }

  0042a	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  0042d	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00433	e9 fa fc ff ff	 jmp	 $LN269@Partition_
$LN237@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00438	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7339 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0043b	5f		 pop	 edi
  0043c	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0043d	89 18		 mov	 DWORD PTR [eax], ebx
  0043f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7339 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00442	5b		 pop	 ebx

; 7362 : }

  00443	8b e5		 mov	 esp, ebp
  00445	5d		 pop	 ebp
  00446	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z PROC ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -176						; size = 148
__Val$2 = -176						; size = 148
__Val$3 = -176						; size = 148
tv1105 = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Idx$1$ = -20						; size = 4
__Bottom$1$ = -16					; size = 4
__Max_sequence_non_leaf$1$ = -12			; size = 4
__Mid$4 = -8						; size = 8
tv1098 = -4						; size = 4
__Mid$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7365 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx

; 7366 :     // order [_First, _Last)
; 7367 :     for (;;) {
; 7368 :         if (_Last - _First <= _ISORT_MAX) { // small

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00012	8b c7		 mov	 eax, edi
  00014	2b c3		 sub	 eax, ebx
  00016	3d 14 13 00 00	 cmp	 eax, 4884		; 00001314H
  0001b	0f 8c 98 00 00
	00		 jl	 $LN124@Sort_unche
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 7369 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7370 :             return;
; 7371 :         }
; 7372 : 
; 7373 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00024	85 f6		 test	 esi, esi
  00026	0f 8e 0f 01 00
	00		 jle	 $LN125@Sort_unche

; 7374 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7375 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7376 :             return;
; 7377 :         }
; 7378 : 
; 7379 :         // divide and conquer by quicksort
; 7380 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002c	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002f	8d 45 f8	 lea	 eax, DWORD PTR __Mid$4[ebp]
  00032	57		 push	 edi
  00033	53		 push	 ebx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7381 : 
; 7382 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  0003a	8b c6		 mov	 eax, esi

; 7383 : 
; 7384 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  0003c	8b cf		 mov	 ecx, edi
  0003e	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$4[ebp+4]
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	c1 f8 02	 sar	 eax, 2
  00047	d1 fe		 sar	 esi, 1
  00049	03 f0		 add	 esi, eax
  0004b	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00050	f7 e9		 imul	 ecx
  00052	89 75 10	 mov	 DWORD PTR __Ideal$[ebp], esi
  00055	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0005a	03 d1		 add	 edx, ecx
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$4[ebp]
  0005f	c1 fa 07	 sar	 edx, 7
  00062	2b cb		 sub	 ecx, ebx
  00064	8b f2		 mov	 esi, edx
  00066	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00069	03 f2		 add	 esi, edx
  0006b	f7 e9		 imul	 ecx
  0006d	03 d1		 add	 edx, ecx
  0006f	c1 fa 07	 sar	 edx, 7
  00072	8b c2		 mov	 eax, edx
  00074	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00077	03 c2		 add	 eax, edx
  00079	3b c6		 cmp	 eax, esi
  0007b	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0007e	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  00081	50		 push	 eax
  00082	56		 push	 esi
  00083	7d 12		 jge	 SHORT $LN7@Sort_unche

; 7385 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  00085	8b 45 f8	 mov	 eax, DWORD PTR __Mid$4[ebp]
  00088	50		 push	 eax
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7386 :             _First = _Mid.second;

  0008f	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$4[ebp+4]
  00092	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 7387 :         } else { // loop on first half

  00095	eb 10		 jmp	 SHORT $LN158@Sort_unche
$LN7@Sort_unche:

; 7388 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00097	8b 45 fc	 mov	 eax, DWORD PTR __Mid$4[ebp+4]
  0009a	57		 push	 edi
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7389 :             _Last = _Mid.first;

  000a1	8b 7d f8	 mov	 edi, DWORD PTR __Mid$4[ebp]
  000a4	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
$LN158@Sort_unche:

; 7366 :     // order [_First, _Last)
; 7367 :     for (;;) {
; 7368 :         if (_Last - _First <= _ISORT_MAX) { // small

  000a7	8b c7		 mov	 eax, edi
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	2b c3		 sub	 eax, ebx
  000ae	3d 14 13 00 00	 cmp	 eax, 4884		; 00001314H
  000b3	0f 8d 6b ff ff
	ff		 jge	 $LL2@Sort_unche
$LN124@Sort_unche:

; 7240 :     if (_First != _Last) {

  000b9	3b df		 cmp	 ebx, edi
  000bb	0f 84 ef 02 00
	00		 je	 $LN103@Sort_unche

; 7241 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  000c1	8d 83 94 00 00
	00		 lea	 eax, DWORD PTR [ebx+148]
  000c7	89 45 08	 mov	 DWORD PTR __Mid$1$[ebp], eax
  000ca	3b c7		 cmp	 eax, edi
  000cc	0f 84 de 02 00
	00		 je	 $LN103@Sort_unche
  000d2	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL11@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000e0	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7243 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000e4	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR __Val$3[ebp]
  000ea	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  000ef	8b f0		 mov	 esi, eax
  000f1	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000f3	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR __Val$3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7242 :             _BidIt _Hole               = _Mid;

  000fb	8b d0		 mov	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000fd	0f 2f c1	 comiss	 xmm0, xmm1
  00100	0f 87 49 02 00
	00		 ja	 $LN140@Sort_unche
  00106	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL16@Sort_unche:
  00110	f3 0f 10 80 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [eax-148]
  00118	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7249 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0011b	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00120	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00125	0f 2f c1	 comiss	 xmm0, xmm1
  00128	0f 86 18 02 00
	00		 jbe	 $LN155@Sort_unche

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0012e	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00132	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00135	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7249 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00137	8b d0		 mov	 edx, eax
  00139	eb d5		 jmp	 SHORT $LL16@Sort_unche
$LN125@Sort_unche:

; 5846 :     _Diff _Bottom = _Last - _First;

  0013b	2b fb		 sub	 edi, ebx
  0013d	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00142	f7 ef		 imul	 edi
  00144	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
  00147	03 d7		 add	 edx, edi
  00149	c1 fa 07	 sar	 edx, 7
  0014c	8b c2		 mov	 eax, edx
  0014e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00151	03 c2		 add	 eax, edx

; 5847 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00153	8b d0		 mov	 edx, eax
  00155	89 45 f0	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00158	d1 fa		 sar	 edx, 1
  0015a	85 d2		 test	 edx, edx
  0015c	0f 8e 41 01 00
	00		 jle	 $LN57@Sort_unche
  00162	48		 dec	 eax
  00163	89 45 e4	 mov	 DWORD PTR tv1105[ebp], eax
  00166	d1 f8		 sar	 eax, 1
  00168	89 45 f4	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax

; 5717 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5718 :     }
; 5719 : }
; 5720 : 
; 5721 : template <class _RanIt, class _Pr>
; 5722 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 5723 :     // pop *_First to *(_Last - 1) and reheap
; 5724 :     _Adl_verify_range(_First, _Last);
; 5725 :     _Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
; 5726 : }
; 5727 : 
; 5728 : template <class _RanIt>
; 5729 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last) {
; 5730 :     // pop *_First to *(_Last - 1) and reheap
; 5731 :     _STD pop_heap(_First, _Last, less<>{});
; 5732 : }
; 5733 : 
; 5734 : #ifdef __cpp_lib_concepts
; 5735 : namespace ranges {
; 5736 :     // VARIABLE ranges::pop_heap
; 5737 :     // clang-format off
; 5738 :     template <random_access_iterator _It, class _Ty, class _Pr, class _Pj1, class _Pj2>
; 5739 :         requires sortable<_It, _Pr, _Pj1> && indirectly_writable<_It, _Ty>
; 5740 :             && indirect_strict_weak_order<_Pr, projected<_It, _Pj1>, projected<remove_reference_t<_Ty>*, _Pj2>>
; 5741 :     constexpr void _Pop_heap_hole_by_index(_It _First, iter_difference_t<_It> _Hole,
; 5742 :         const iter_difference_t<_It> _Bottom, _Ty&& _Val, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
; 5743 :         // clang-format on
; 5744 :         // percolate _Hole to _Bottom, then push _Val
; 5745 :         _STL_INTERNAL_CHECK(_Hole >= 0);
; 5746 :         _STL_INTERNAL_CHECK(_Bottom > 0);
; 5747 : 
; 5748 :         using _Diff      = iter_difference_t<_It>;
; 5749 :         const _Diff _Top = _Hole;
; 5750 :         _Diff _Idx       = _Hole;
; 5751 : 
; 5752 :         // Check whether _Idx can have a child before calculating that child's index, since
; 5753 :         // calculating the child's index can trigger integer overflows
; 5754 :         const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5755 :         while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child
; 5756 :             _Idx      = 2 * _Idx + 2;
; 5757 :             auto _Mid = _First + _Idx;
; 5758 :             if (_STD invoke(_Pred, _STD invoke(_Proj1, *_Mid), _STD invoke(_Proj1, *_RANGES prev(_Mid)))) {
; 5759 :                 --_Idx;
; 5760 :                 --_Mid;
; 5761 :             }
; 5762 :             *(_First + _Hole) = _RANGES iter_move(_Mid);
; 5763 :             _Hole             = _Idx;
; 5764 :         }
; 5765 : 
; 5766 :         if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it
; 5767 :             *(_First + _Hole) = _RANGES iter_move(_First + (_Bottom - 1));
; 5768 :             _Hole             = _Bottom - 1;
; 5769 :         }
; 5770 : 
; 5771 :         _RANGES _Push_heap_by_index(_STD move(_First), _Hole, _Top, _STD forward<_Ty>(_Val), _Pred, _Proj1, _Proj2);
; 5772 :     }
; 5773 : 
; 5774 :     // clang-format off
; 5775 :     template <random_access_iterator _It, class _Ty, class _Pr, class _Pj1, class _Pj2>
; 5776 :         requires sortable<_It, _Pr, _Pj1> && indirectly_writable<_It, _Ty>
; 5777 :             && indirect_strict_weak_order<_Pr, projected<_It, _Pj1>, projected<remove_reference_t<_Ty>*, _Pj2>>
; 5778 :     constexpr void _Pop_heap_hole_unchecked(
; 5779 :         _It _First, const _It _Last, const _It _Dest, _Ty&& _Val, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
; 5780 :         // clang-format on
; 5781 :         // pop *_First to *_Dest and reheap
; 5782 :         _STL_INTERNAL_CHECK(_First != _Last);
; 5783 :         _STL_INTERNAL_CHECK(_First != _Dest);
; 5784 : 
; 5785 :         *_Dest            = _RANGES iter_move(_First);
; 5786 :         const auto _Count = _Last - _First;
; 5787 :         _RANGES _Pop_heap_hole_by_index(_STD move(_First), 0, _Count, _STD forward<_Ty>(_Val), _Pred, _Proj1, _Proj2);
; 5788 :     }
; 5789 : 
; 5790 :     // clang-format off
; 5791 :     template <random_access_iterator _It, class _Pr, class _Pj>
; 5792 :         requires sortable<_It, _Pr, _Pj>
; 5793 :     constexpr void _Pop_heap_unchecked(_It _First, _It _Last, _Pr _Pred, _Pj _Proj) {
; 5794 :         // clang-format on
; 5795 :         // pop *_First to *(_Last - 1) and reheap
; 5796 :         if (_Last - _First < 2) {
; 5797 :             return;
; 5798 :         }
; 5799 : 
; 5800 :         --_Last;
; 5801 :         iter_value_t<_It> _Val = _RANGES iter_move(_Last);
; 5802 :         // NB: if _Proj is a _Ref_fn, this aliases the _Proj1 and _Proj2 parameters of _Pop_heap_hole_unchecked
; 5803 :         _RANGES _Pop_heap_hole_unchecked(_STD move(_First), _Last, _Last, _STD move(_Val), _Pred, _Proj, _Proj);
; 5804 :     }
; 5805 : 
; 5806 :     class _Pop_heap_fn : private _Not_quite_object {
; 5807 :     public:
; 5808 :         using _Not_quite_object::_Not_quite_object;
; 5809 : 
; 5810 :         // clang-format off
; 5811 :         template <random_access_iterator _It, sentinel_for<_It> _Se, class _Pr = ranges::less, class _Pj = identity>
; 5812 :             requires sortable<_It, _Pr, _Pj>
; 5813 :         constexpr _It operator()(_It _First, _Se _Last, _Pr _Pred = {}, _Pj _Proj = {}) const {
; 5814 :             _Adl_verify_range(_First, _Last);
; 5815 :             auto _UFirst = _Get_unwrapped(_STD move(_First));
; 5816 :             auto _ULast  = _Get_final_iterator_unwrapped<_It>(_UFirst, _STD move(_Last));
; 5817 :             _Seek_wrapped(_First, _ULast);
; 5818 :             _RANGES _Pop_heap_unchecked(_STD move(_UFirst), _STD move(_ULast), _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5819 :             return _First;
; 5820 :         }
; 5821 : 
; 5822 :         template <random_access_range _Rng, class _Pr = ranges::less, class _Pj = identity>
; 5823 :             requires sortable<iterator_t<_Rng>, _Pr, _Pj>
; 5824 :         constexpr borrowed_iterator_t<_Rng> operator()(_Rng&& _Range, _Pr _Pred = {}, _Pj _Proj = {}) const {
; 5825 :             if constexpr (common_range<_Rng>) {
; 5826 :                 _RANGES _Pop_heap_unchecked(_Ubegin(_Range), _Uend(_Range), _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5827 :                 return _RANGES end(_Range);
; 5828 :             } else {
; 5829 :                 auto _ULast = _Get_final_iterator_unwrapped(_Range);
; 5830 :                 _RANGES _Pop_heap_unchecked(_Ubegin(_Range), _ULast, _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5831 :                 return _Rewrap_iterator(_Range, _STD move(_ULast));
; 5832 :             }
; 5833 :         }
; 5834 :         // clang-format on
; 5835 :     };
; 5836 : 
; 5837 :     inline constexpr _Pop_heap_fn pop_heap{_Not_quite_object::_Construct_tag{}};
; 5838 : } // namespace ranges
; 5839 : #endif // __cpp_lib_concepts
; 5840 : 
; 5841 : // FUNCTION TEMPLATE make_heap
; 5842 : template <class _RanIt, class _Pr>
; 5843 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 5844 :     // make [_First, _Last) into a heap
; 5845 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5846 :     _Diff _Bottom = _Last - _First;

  0016b	69 c2 94 00 00
	00		 imul	 eax, edx, 148
  00171	03 c3		 add	 eax, ebx
$LL56@Sort_unche:

; 5848 :         // reheap top half, bottom to top
; 5849 :         --_Hole;

  00173	2d 94 00 00 00	 sub	 eax, 148		; 00000094H

; 5850 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00178	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR __Val$2[ebp]
  0017e	4a		 dec	 edx
  0017f	89 45 fc	 mov	 DWORD PTR tv1098[ebp], eax
  00182	8b f0		 mov	 esi, eax
  00184	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H

; 5678 :     _Diff _Idx       = _Hole;

  00189	8b c2		 mov	 eax, edx

; 5849 :         --_Hole;

  0018b	89 55 e8	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 5850 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0018e	f3 a5		 rep movsd

; 5851 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00190	8b fa		 mov	 edi, edx

; 5683 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00192	3b 55 f4	 cmp	 edx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00195	7d 61		 jge	 SHORT $LN62@Sort_unche
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL61@Sort_unche:

; 5684 :         _Idx = 2 * _Idx + 2;

  001a0	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]

; 5685 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  001a3	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  001a6	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  001ac	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  001af	69 c0 94 00 00
	00		 imul	 eax, eax, 148

; 5688 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  001b5	f3 0f 10 04 18	 movss	 xmm0, DWORD PTR [eax+ebx]
  001ba	33 c0		 xor	 eax, eax
  001bc	0f 2f 04 19	 comiss	 xmm0, DWORD PTR [ecx+ebx]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  001c0	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5688 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  001c5	0f 96 c0	 setbe	 al
  001c8	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  001ce	40		 inc	 eax
  001cf	03 fb		 add	 edi, ebx
  001d1	03 c2		 add	 eax, edx
  001d3	69 f0 94 00 00
	00		 imul	 esi, eax, 148
  001d9	89 45 ec	 mov	 DWORD PTR __Idx$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  001dc	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]
  001df	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  001e1	83 c7 04	 add	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5689 :         _Hole             = _Idx;

  001e4	8b 45 ec	 mov	 eax, DWORD PTR __Idx$1$[ebp]
  001e7	03 f3		 add	 esi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  001e9	83 c6 04	 add	 esi, 4
  001ec	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5689 :         _Hole             = _Idx;

  001ee	8b f8		 mov	 edi, eax
  001f0	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  001f3	7c ab		 jl	 SHORT $LL61@Sort_unche
  001f5	8b 55 e8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN62@Sort_unche:

; 5690 :     }
; 5691 : 
; 5692 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  001f8	3b 7d f4	 cmp	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  001fb	75 33		 jne	 SHORT $LN64@Sort_unche
  001fd	8b 45 f0	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00200	a8 01		 test	 al, 1
  00202	75 2c		 jne	 SHORT $LN64@Sort_unche

; 5693 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00204	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  0020a	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  00210	03 fb		 add	 edi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  00212	8b 84 19 6c ff
	ff ff		 mov	 eax, DWORD PTR [ecx+ebx-148]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00219	8d b1 70 ff ff
	ff		 lea	 esi, DWORD PTR [ecx-144]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0021f	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00221	03 f3		 add	 esi, ebx
  00223	83 c7 04	 add	 edi, 4
  00226	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0022b	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5694 :         _Hole             = _Bottom - 1;

  0022d	8b 7d e4	 mov	 edi, DWORD PTR tv1105[ebp]
$LN64@Sort_unche:

; 5563 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00230	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR __Val$2[ebp]
  00238	3b d7		 cmp	 edx, edi
  0023a	7d 3a		 jge	 SHORT $LN157@Sort_unche
  0023c	0f 1f 40 00	 npad	 4
$LL84@Sort_unche:

; 5562 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00240	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00243	d1 f8		 sar	 eax, 1

; 5563 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00245	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 369  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0024b	f3 0f 10 04 19	 movss	 xmm0, DWORD PTR [ecx+ebx]
  00250	0f 2f c8	 comiss	 xmm1, xmm0
  00253	76 21		 jbe	 SHORT $LN157@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5566 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00255	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0025b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5566 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0025e	03 fb		 add	 edi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00260	03 f3		 add	 esi, ebx
  00262	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  00267	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0026b	83 c7 04	 add	 edi, 4
  0026e	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5567 :         _Hole             = _Idx;

  00270	8b f8		 mov	 edi, eax
  00272	3b d0		 cmp	 edx, eax
  00274	7c ca		 jl	 SHORT $LL84@Sort_unche
$LN157@Sort_unche:

; 5847 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00276	8b 45 fc	 mov	 eax, DWORD PTR tv1098[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00279	8d b5 54 ff ff
	ff		 lea	 esi, DWORD PTR __Val$2[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5570 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0027f	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00285	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5570 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0028a	03 fb		 add	 edi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0028c	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00290	83 c7 04	 add	 edi, 4
  00293	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5847 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00295	85 d2		 test	 edx, edx
  00297	0f 8f d6 fe ff
	ff		 jg	 $LL56@Sort_unche
  0029d	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  002a0	8b 45 f0	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN57@Sort_unche:

; 6078 :     for (; _Last - _First >= 2; --_Last) {

  002a3	83 f8 02	 cmp	 eax, 2
  002a6	0f 8c 04 01 00
	00		 jl	 $LN103@Sort_unche
  002ac	0f 1f 40 00	 npad	 4
$LL104@Sort_unche:

; 5714 :     if (2 <= _Last - _First) {

  002b0	b8 4d 91 cf ba	 mov	 eax, -1160801971	; bacf914dH
  002b5	f7 e7		 mul	 edi
  002b7	8b c7		 mov	 eax, edi
  002b9	2b c2		 sub	 eax, edx
  002bb	d1 e8		 shr	 eax, 1
  002bd	03 c2		 add	 eax, edx
  002bf	c1 e8 07	 shr	 eax, 7
  002c2	83 f8 02	 cmp	 eax, 2
  002c5	7c 63		 jl	 SHORT $LN102@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  002c7	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5716 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  002c9	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]

; 5707 :     _Pop_heap_hole_by_index(

  002cc	ff 75 14	 push	 DWORD PTR __Pred$[ebp]

; 5716 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  002cf	8d b2 6c ff ff
	ff		 lea	 esi, DWORD PTR [edx-148]
  002d5	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  002da	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp]
  002e0	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  002e2	89 82 6c ff ff
	ff		 mov	 DWORD PTR [edx-148], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  002e8	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  002eb	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5707 :     _Pop_heap_hole_by_index(

  002ee	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR __Val$1[ebp]
  002f4	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  002f5	81 c3 6c ff ff
	ff		 add	 ebx, -148		; ffffff6cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5707 :     _Pop_heap_hole_by_index(

  002fb	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00300	f7 eb		 imul	 ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00302	8d 3c 1e	 lea	 edi, DWORD PTR [esi+ebx]
  00305	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5707 :     _Pop_heap_hole_by_index(

  0030a	03 d3		 add	 edx, ebx
  0030c	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0030f	c1 fa 07	 sar	 edx, 7
  00312	8b c2		 mov	 eax, edx
  00314	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00317	03 c2		 add	 eax, edx
  00319	50		 push	 eax
  0031a	6a 00		 push	 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0031c	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 5707 :     _Pop_heap_hole_by_index(

  0031e	53		 push	 ebx
  0031f	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
  00324	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00327	83 c4 14	 add	 esp, 20			; 00000014H
$LN102@Sort_unche:

; 6078 :     for (; _Last - _First >= 2; --_Last) {

  0032a	81 ef 94 00 00
	00		 sub	 edi, 148		; 00000094H
  00330	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
  00333	81 ff 28 01 00
	00		 cmp	 edi, 296		; 00000128H
  00339	0f 8d 71 ff ff
	ff		 jge	 $LL104@Sort_unche

; 7390 :         }
; 7391 :     }
; 7392 : }

  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	5b		 pop	 ebx
  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c3		 ret	 0
$LN155@Sort_unche:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00346	8b 45 08	 mov	 eax, DWORD PTR __Mid$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  00349	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0034d	eb 48		 jmp	 SHORT $LN159@Sort_unche
$LN140@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4472 :     while (_First != _Last) {

  0034f	3b c3		 cmp	 eax, ebx
  00351	74 38		 je	 SHORT $LN30@Sort_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7246 :                 _Move_backward_unchecked(_First, _Mid, ++_Hole);

  00353	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00356	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL131@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  00360	8b 82 68 ff ff
	ff		 mov	 eax, DWORD PTR [edx-152]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4473 :         *--_Dest = _STD move(*--_Last);

  00366	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0036c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00371	8b f2		 mov	 esi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  00373	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00379	8d ba 94 00 00
	00		 lea	 edi, DWORD PTR [edx+148]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4472 :     while (_First != _Last) {

  0037f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00382	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4472 :     while (_First != _Last) {

  00384	3b c3		 cmp	 eax, ebx
  00386	75 d8		 jne	 SHORT $LL131@Sort_unche
  00388	8b 45 08	 mov	 eax, DWORD PTR __Mid$1$[ebp]
$LN30@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 295  :         first  = _STD forward<_Ty1>(_Right.first);

  0038b	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0038f	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00392	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
$LN159@Sort_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7241 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00397	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0039c	8d b5 54 ff ff
	ff		 lea	 esi, DWORD PTR __Val$3[ebp+4]
  003a2	f3 a5		 rep movsd
  003a4	89 45 08	 mov	 DWORD PTR __Mid$1$[ebp], eax
  003a7	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  003aa	0f 85 30 fd ff
	ff		 jne	 $LL11@Sort_unche
$LN103@Sort_unche:
  003b0	5f		 pop	 edi

; 7390 :         }
; 7391 :     }
; 7392 : }

  003b1	5e		 pop	 esi
  003b2	5b		 pop	 ebx
  003b3	8b e5		 mov	 esp, ebp
  003b5	5d		 pop	 ebp
  003b6	c3		 ret	 0
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z PROC ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1806 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1807 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1808 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1809 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1810 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1811 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ENDP ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>, COMDAT

; 1838 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1839 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1840 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1841 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1842 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1843 :     } else {
; 1844 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1845 :         for (; 0 < _Count; --_Count) {
; 1846 :             _Backout._Emplace_back();
; 1847 :         }
; 1848 : 
; 1849 :         return _Backout._Release();
; 1850 :     }
; 1851 : }

  00012	5d		 pop	 ebp

; 1839 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1840 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1841 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1842 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z PROC ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1700 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1701 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1702 :     _Adl_verify_range(_First, _Last);
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1706 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1707 :     return _Dest;
; 1708 : }

  00003	5d		 pop	 ebp

; 1687 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ENDP ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
_TEXT	SEGMENT
tv683 = -16						; size = 4
tv688 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
$T4 = 8							; size = 4
__Whereptr$ = 8						; size = 4
$T5 = 12						; size = 4
__Backout$2$sroa$307$1$ = 12				; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b f3		 mov	 esi, ebx
  00015	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00018	2b 37		 sub	 esi, DWORD PTR [edi]

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001f	f7 ee		 imul	 esi
  00021	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00026	03 d6		 add	 edx, esi
  00028	c1 fa 07	 sar	 edx, 7
  0002b	8b f2		 mov	 esi, edx
  0002d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00030	03 f2		 add	 esi, edx
  00032	f7 e9		 imul	 ecx
  00034	03 d1		 add	 edx, ecx
  00036	c1 fa 07	 sar	 edx, 7
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00040	3d 91 cf ba 01	 cmp	 eax, 29020049		; 01bacf91H
  00045	0f 84 a7 01 00
	00		 je	 $LN118@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0004e	40		 inc	 eax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004f	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00051	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00054	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00059	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005b	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00060	03 d1		 add	 edx, ecx
  00062	c1 fa 07	 sar	 edx, 7
  00065	8b ca		 mov	 ecx, edx
  00067	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006a	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006c	8b d1		 mov	 edx, ecx
  0006e	d1 ea		 shr	 edx, 1
  00070	2b c2		 sub	 eax, edx
  00072	3b c8		 cmp	 ecx, eax
  00074	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00076	b8 d4 ff ff ff	 mov	 eax, -44		; ffffffd4H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1689 :             return _Max; // geometric growth would overflow

  0007c	89 45 f4	 mov	 DWORD PTR tv688[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	83 c4 04	 add	 esp, 4
  00087	8b c8		 mov	 ecx, eax
  00089	eb 4a		 jmp	 SHORT $LN116@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0008b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  00091	3b c1		 cmp	 eax, ecx
  00093	0f 43 c8	 cmovae	 ecx, eax
  00096	81 f9 91 cf ba
	01		 cmp	 ecx, 29020049		; 01bacf91H
  0009c	0f 87 55 01 00
	00		 ja	 $LN119@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000a2	69 c1 94 00 00
	00		 imul	 eax, ecx, 148
  000a8	89 45 f4	 mov	 DWORD PTR tv688[ebp], eax

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ab	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b0	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b8	83 c4 04	 add	 esp, 4
  000bb	8b c8		 mov	 ecx, eax
  000bd	eb 16		 jmp	 SHORT $LN116@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000bf	85 c0		 test	 eax, eax
  000c1	74 10		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c9	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000cc	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  000cf	8b c8		 mov	 ecx, eax
  000d1	eb 05		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000d3	33 c9		 xor	 ecx, ecx
$LN116@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d5	89 4d 08	 mov	 DWORD PTR $T4[ebp], ecx
$LN23@Emplace_re:
  000d8	69 c6 94 00 00
	00		 imul	 eax, esi, 148
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000de	8b 75 0c	 mov	 esi, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e1	03 c1		 add	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000e3	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  000e8	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ea	89 45 f0	 mov	 DWORD PTR tv683[ebp], eax

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000f0	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000f2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f5	8b 00		 mov	 eax, DWORD PTR [eax]
  000f7	8b 7d 08	 mov	 edi, DWORD PTR $T4[ebp]
  000fa	89 55 0c	 mov	 DWORD PTR $T5[ebp], edx
  000fd	3b da		 cmp	 ebx, edx
  000ff	75 2b		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00101	8b 5d 0c	 mov	 ebx, DWORD PTR $T5[ebp]

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00104	8b d7		 mov	 edx, edi

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00106	3b c3		 cmp	 eax, ebx
  00108	74 76		 je	 SHORT $LN68@Emplace_re
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL39@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00110	8b f0		 mov	 esi, eax
  00112	8b fa		 mov	 edi, edx

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00114	05 94 00 00 00	 add	 eax, 148		; 00000094H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00119	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H

; 1632 :         ++_Last;

  0011e	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00124	f3 a5		 rep movsd

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00126	3b c3		 cmp	 eax, ebx
  00128	75 e6		 jne	 SHORT $LL39@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  0012a	eb 51		 jmp	 SHORT $LN114@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0012c	89 7d 0c	 mov	 DWORD PTR __Backout$2$sroa$307$1$[ebp], edi

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0012f	3b c3		 cmp	 eax, ebx
  00131	74 24		 je	 SHORT $LN53@Emplace_re
$LL54@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00133	8b f0		 mov	 esi, eax
  00135	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  0013a	f3 a5		 rep movsd

; 1632 :         ++_Last;

  0013c	8b 7d 0c	 mov	 edi, DWORD PTR __Backout$2$sroa$307$1$[ebp]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0013f	05 94 00 00 00	 add	 eax, 148		; 00000094H

; 1632 :         ++_Last;

  00144	81 c7 94 00 00
	00		 add	 edi, 148		; 00000094H
  0014a	89 7d 0c	 mov	 DWORD PTR __Backout$2$sroa$307$1$[ebp], edi

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0014d	3b c3		 cmp	 eax, ebx
  0014f	75 e2		 jne	 SHORT $LL54@Emplace_re
  00151	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00154	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
$LN53@Emplace_re:
  00157	3b da		 cmp	 ebx, edx
  00159	74 22		 je	 SHORT $LN114@Emplace_re

; 1633 :     }
; 1634 : 
; 1635 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last
; 1636 :         _First = _Last;
; 1637 :         return _Last;
; 1638 :     }
; 1639 : 
; 1640 : private:
; 1641 :     pointer _First;
; 1642 :     pointer _Last;
; 1643 :     _Alloc& _Al;
; 1644 : };
; 1645 : 
; 1646 : // FUNCTION TEMPLATE _Uninitialized_copy WITH ALLOCATOR
; 1647 : template <class _InIt, class _Alloc>
; 1648 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_copy(
; 1649 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1650 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1651 :     // note: only called internally from elsewhere in the STL
; 1652 :     using _Ptrval = typename _Alloc::value_type*;
; 1653 : 
; 1654 :     auto _UFirst      = _Get_unwrapped(_First);
; 1655 :     const auto _ULast = _Get_unwrapped(_Last);
; 1656 : 
; 1657 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1658 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1659 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1660 :         if (!_STD is_constant_evaluated())
; 1661 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1662 :         {
; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1664 :             _Dest += _ULast - _UFirst;
; 1665 :             return _Dest;
; 1666 :         }
; 1667 :     }
; 1668 : 
; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1671 :         _Backout._Emplace_back(*_UFirst);
; 1672 :     }
; 1673 : 
; 1674 :     return _Backout._Release();
; 1675 : }
; 1676 : 
; 1677 : // FUNCTION TEMPLATE uninitialized_copy
; 1678 : template <class _InIt, class _NoThrowFwdIt>
; 1679 : _CONSTEXPR20_DYNALLOC _NoThrowFwdIt _Uninitialized_copy_unchecked(
; 1680 :     _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1681 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1682 :     if constexpr (_Ptr_copy_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
; 1683 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1686 :         {
; 1687 :             return _Copy_memmove(_First, _Last, _Dest);
; 1688 :         }
; 1689 :     }
; 1690 : 
; 1691 :     _Uninitialized_backout<_NoThrowFwdIt> _Backout{_Dest};
; 1692 :     for (; _First != _Last; ++_First) {
; 1693 :         _Backout._Emplace_back(*_First);
; 1694 :     }
; 1695 : 
; 1696 :     return _Backout._Release();
; 1697 : }
; 1698 : 
; 1699 : template <class _InIt, class _NoThrowFwdIt>
; 1700 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1701 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1702 :     _Adl_verify_range(_First, _Last);
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1706 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1707 :     return _Dest;
; 1708 : }
; 1709 : 
; 1710 : // FUNCTION TEMPLATE _Uninitialized_move WITH ALLOCATOR
; 1711 : template <class _InIt, class _Alloc>
; 1712 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_move(
; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);

  0015b	8b 45 f0	 mov	 eax, DWORD PTR tv683[ebp]
  0015e	05 94 00 00 00	 add	 eax, 148		; 00000094H
$LL69@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00163	8b f3		 mov	 esi, ebx
  00165	8b f8		 mov	 edi, eax

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00167	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0016d	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00172	05 94 00 00 00	 add	 eax, 148		; 00000094H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00177	f3 a5		 rep movsd

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00179	3b da		 cmp	 ebx, edx
  0017b	75 e6		 jne	 SHORT $LL69@Emplace_re
$LN114@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  0017d	8b 7d 08	 mov	 edi, DWORD PTR $T4[ebp]
$LN68@Emplace_re:
  00180	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00183	8b 33		 mov	 esi, DWORD PTR [ebx]
  00185	85 f6		 test	 esi, esi
  00187	74 42		 je	 SHORT $LN86@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00189	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0018c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00191	2b ce		 sub	 ecx, esi
  00193	f7 e9		 imul	 ecx
  00195	03 d1		 add	 edx, ecx
  00197	c1 fa 07	 sar	 edx, 7
  0019a	8b c2		 mov	 eax, edx
  0019c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0019f	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a1	69 c8 94 00 00
	00		 imul	 ecx, eax, 148

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ad	72 12		 jb	 SHORT $LN96@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001af	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  001b2	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b5	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b7	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bd	77 2e		 ja	 SHORT $LN93@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001bf	8b f2		 mov	 esi, edx
$LN96@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001c1	51		 push	 ecx
  001c2	56		 push	 esi
  001c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c8	83 c4 08	 add	 esp, 8
$LN86@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001cb	69 4d f8 94 00
	00 00		 imul	 ecx, DWORD PTR __Newsize$1$[ebp], 148

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001d2	8b 45 f0	 mov	 eax, DWORD PTR tv683[ebp]

; 1750 :         _Myfirst = _Newvec;

  001d5	89 3b		 mov	 DWORD PTR [ebx], edi

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001d7	03 cf		 add	 ecx, edi
  001d9	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001dc	8b 4d f4	 mov	 ecx, DWORD PTR tv688[ebp]
  001df	03 cf		 add	 ecx, edi

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001e1	5f		 pop	 edi
  001e2	5e		 pop	 esi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001e3	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001e6	5b		 pop	 ebx

; 807  :     }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 08 00	 ret	 8
$LN93@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ed	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN118@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  001f2	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
$LN119@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  001f7	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN115@Emplace_re:
  001fc	cc		 int	 3
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 56		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	03 d1		 add	 edx, ecx
  00018	c1 fa 07	 sar	 edx, 7
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	69 c8 94 00 00
	00		 imul	 ecx, eax, 148

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 12		 jb	 SHORT $LN20@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00030	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00033	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00036	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003e	77 23		 ja	 SHORT $LN17@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00040	8b f2		 mov	 esi, edx
$LN20@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00042	51		 push	 ecx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00049	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00052	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1769 :             _Myend   = nullptr;

  00059	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00060	5f		 pop	 edi

; 717  :     }

  00061	5e		 pop	 esi
  00062	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00068	cc		 int	 3
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??0TFlyVertex@@QAE@XZ
_TEXT	SEGMENT
??0TFlyVertex@@QAE@XZ PROC				; TFlyVertex::TFlyVertex, COMDAT
; _this$ = ecx

; 95   : 	TFlyVertex(){};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0TFlyVertex@@QAE@XZ ENDP				; TFlyVertex::TFlyVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyTrace::ms_kPool'', COMDAT

; 8    : CDynamicPool<CFlyTrace>		CFlyTrace::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyTrace::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z PROC		; CDynamicPool<CFlyTrace>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z ENDP		; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z PROC ; CDynamicPool<CFlyTrace>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ENDP ; CDynamicPool<CFlyTrace>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ PROC		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1769 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ENDP		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyTrace@@UAEPAXI@Z PROC				; CFlyTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyTrace@@UAE@XZ	; CFlyTrace::~CFlyTrace
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlyTrace@@UAEPAXI@Z ENDP				; CFlyTrace::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Delete@CFlyTrace@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CFlyTrace@@SAXPAV1@@Z PROC			; CFlyTrace::Delete, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 22   : 	pkInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 23   : 	ms_kPool.Free(pkInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 24   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
  00039	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 24   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CFlyTrace@@SAXPAV1@@Z ENDP			; CFlyTrace::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?New@CFlyTrace@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CFlyTrace@@SAPAV1@XZ PROC				; CFlyTrace::New, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CFlyTrace@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16, ecx
  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	6a 28		 push	 40			; 00000028H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0CFlyTrace@@QAE@XZ	; CFlyTrace::CFlyTrace
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+12
  00070	74 21		 je	 SHORT $LN14@New

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 17   : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 18   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 17   : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 18   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1624 :         return _My_data._Mylast[-1];

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1403 :         --_Mylast;

  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 18   : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CFlyTrace@@SAPAV1@XZ$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CFlyTrace@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CFlyTrace@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CFlyTrace@@SAPAV1@XZ ENDP				; CFlyTrace::New
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?DestroySystem@CFlyTrace@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CFlyTrace@@SAXXZ PROC			; CFlyTrace::DestroySystem, COMDAT

; 11   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 11   : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 269  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 13   : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00041	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 13   : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CFlyTrace@@SAXXZ ENDP			; CFlyTrace::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy, COMDAT
; _this$ = ecx

; 1478 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1009 :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1479 :         _Orphan_all();
; 1480 : 
; 1481 :         _Alpty _Almap(_Getal());
; 1482 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN60@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1153 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1154 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN60@Tidy:
  0001f	56		 push	 esi

; 1486 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00020	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00023	85 f6		 test	 esi, esi
  00025	74 1a		 je	 SHORT $LN5@Tidy
$LL4@Tidy:

; 1487 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00027	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002a	4e		 dec	 esi
  0002b	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN23@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 10		 push	 16			; 00000010H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN23@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1486 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0003d	85 f6		 test	 esi, esi
  0003f	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:

; 1488 :                 _Getal().deallocate(_Map()[_Block], _Block_size);
; 1489 :                 _Destroy_in_place(_Map()[_Block]);
; 1490 :             }
; 1491 :         }
; 1492 : 
; 1493 :         if (_Map() != _Mapptr()) {

  00041	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00044	5e		 pop	 esi
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN41@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004c	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 12		 jb	 SHORT $LN51@Tidy

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	77 1c		 ja	 SHORT $LN48@Tidy

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00067	8b c2		 mov	 eax, edx
$LN51@Tidy:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00070	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1497 :         _Mapsize() = 0;

  00073	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1498 :         _Map()     = _Mapptr();

  0007a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00081	5f		 pop	 edi

; 1499 :     }

  00082	c3		 ret	 0
$LN48@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00083	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@Tidy:
  00088	cc		 int	 3
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv483 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap, COMDAT
; _this$ = ecx

; 1439 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1440 :         static_assert(1 < _Minimum_map_size, "The _Xlen() test should always be performed.");
; 1441 : 
; 1442 :         _Alpty _Almap(_Getal());
; 1443 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1444 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1445 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1446 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 fb 00 00
	00		 jb	 $LN44@Growmap

; 1448 :             }
; 1449 : 
; 1450 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1451 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1452 :         _Count = _Newsize - _Mapsize();
; 1453 : 
; 1454 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00043	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00046	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004b	0f 87 ed 00 00
	00		 ja	 $LN51@Growmap

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00051	c1 e0 02	 shl	 eax, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00059	72 0d		 jb	 SHORT $LN19@Growmap

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	83 c4 04	 add	 esp, 4
  00064	8b d8		 mov	 ebx, eax
  00066	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00068	85 c0		 test	 eax, eax
  0006a	74 0d		 je	 SHORT $LN20@Growmap

; 85   :         return ::operator new(_Bytes);

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00075	8b d8		 mov	 ebx, eax
  00077	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00079	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1456 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  0007b	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]

; 1457 : 
; 1458 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0007e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00081	c1 e2 02	 shl	 edx, 2
  00084	89 55 fc	 mov	 DWORD PTR tv483[ebp], edx
  00087	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0008a	50		 push	 eax
  0008b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0008e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00091	50		 push	 eax
  00092	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1459 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a1	50		 push	 eax
  000a2	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a5	77 22		 ja	 SHORT $LN6@Growmap

; 1460 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a7	8b 45 fc	 mov	 eax, DWORD PTR tv483[ebp]
  000aa	03 c1		 add	 eax, ecx
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1461 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b3	8b ce		 mov	 ecx, esi
  000b5	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>

; 1462 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1463 :         } else { // increment not greater than offset of initial block

  000bf	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	8b cb		 mov	 ecx, ebx
  000c7	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1464 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000c9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000cc	50		 push	 eax
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1465 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d6	8b 45 fc	 mov	 eax, DWORD PTR tv483[ebp]
  000d9	03 c1		 add	 eax, ecx
  000db	53		 push	 ebx
  000dc	50		 push	 eax
  000dd	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1466 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e6	8b c8		 mov	 ecx, eax
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1467 :         }
; 1468 : 
; 1469 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());
; 1470 :         if (_Map() != _Mapptr()) {

  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  000f4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f7	83 c4 08	 add	 esp, 8
  000fa	85 c0		 test	 eax, eax
  000fc	74 2a		 je	 SHORT $LN29@Growmap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00101	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010a	72 12		 jb	 SHORT $LN39@Growmap

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010f	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	83 c0 fc	 add	 eax, -4			; fffffffcH
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	77 27		 ja	 SHORT $LN36@Growmap

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011c	8b c2		 mov	 eax, edx
$LN39@Growmap:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0011e	51		 push	 ecx
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
$LN29@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1475 :         _Mapsize() += _Count;

  00128	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx

; 1476 :     }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 04 00	 ret	 4
$LN44@Growmap:

; 1447 :                 _Xlen(); // result too long

  00137	8b cf		 mov	 ecx, edi
  00139	e8 00 00 00 00	 call	 ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
$LN51@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0013e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN36@Growmap:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN49@Growmap:
  00148	cc		 int	 3
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen, COMDAT
; _this$ = ecx

; 1432 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?__Initialize@CFlyTrace@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CFlyTrace@@IAEXXZ PROC			; CFlyTrace::__Initialize, COMDAT
; _this$ = ecx

; 48   : 	m_bRectShape=false;

  00000	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 49   : 	m_dwColor=0;

  00004	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 50   : 	m_fSize=0.0f;

  0000b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 51   : 	m_fTailLength=0.0f;

  00012	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 52   : }

  00019	c3		 ret	 0
?__Initialize@CFlyTrace@@IAEXXZ ENDP			; CFlyTrace::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\cmath
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\cmath
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SphereLib\vector.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SphereLib\vector.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Render@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
$T10 = -548						; size = 148
_E$11 = -400						; size = 12
tv3678 = -388						; size = 4
_B$1$sroa$2133$1$ = -384				; size = 4
_B$1$sroa$2134$1$ = -380				; size = 4
_VSVector$ = -376					; size = 12
_s$ = -364						; size = 4
_pCurrentCamera$1$ = -360				; size = 4
_F$ = -356						; size = 12
_E$2$ = -344						; size = 4
_rate1$1$ = -344					; size = 4
_VSVector$2$ = -340					; size = 4
$T12 = -336						; size = 4
_this$GSCopy$1$ = -332					; size = 4
_E$3$ = -328						; size = 4
__Ptr$1$ = -328						; size = 4
$T13 = -328						; size = 1
_it1$$sroa$2137$1$ = -324				; size = 4
_it2$$sroa$2135$1$ = -320				; size = 4
_E$1$ = -316						; size = 4
$T14 = -316						; size = 4
$T15 = -316						; size = 4
tv2058 = -316						; size = 4
tv2009 = -316						; size = 4
_matWorld$ = -312					; size = 64
_c$16 = -248						; size = 12
_m$ = -236						; size = 64
_U$17 = -172						; size = 12
_v$18 = -160						; size = 144
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Render@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Render, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CFlyTrace@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 121  : 	if (m_TimePositionDeque.size()<=1)

  00033	83 79 24 01	 cmp	 DWORD PTR [ecx+36], 1
  00037	0f 86 7f 0b 00
	00		 jbe	 $LN422@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003d	33 ff		 xor	 edi, edi
  0003f	33 f6		 xor	 esi, esi
  00041	89 b5 88 fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp], esi
  00047	89 bd 8c fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+4], edi
  0004d	89 bd ac fe ff
	ff		 mov	 DWORD PTR _VSVector$2$[ebp], edi
  00053	89 bd 90 fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+8], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 126  : 	STATEMANAGER.SaveRenderState(D3DRS_ZFUNC,D3DCMP_LESS);

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005f	6a 02		 push	 2
  00061	6a 17		 push	 23			; 00000017H
  00063	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00066	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 132  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00071	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  00077	50		 push	 eax
  00078	68 00 01 00 00	 push	 256			; 00000100H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0007d	89 bd 00 ff ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+56], edi
  00083	89 bd fc fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+52], edi
  00089	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+48], edi
  0008f	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+44], edi
  00095	89 bd ec fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+36], edi
  0009b	89 bd e8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+32], edi
  000a1	89 bd e4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+28], edi
  000a7	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+24], edi
  000ad	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+16], edi
  000b3	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+12], edi
  000b9	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+8], edi
  000bf	89 bd cc fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+4], edi

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000c5	c7 85 04 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+60], 1065353216 ; 3f800000H
  000cf	c7 85 f0 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+40], 1065353216 ; 3f800000H
  000d9	c7 85 dc fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+20], 1065353216 ; 3f800000H
  000e3	c7 85 c8 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp], 1065353216 ; 3f800000H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 132  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  000ed	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 133  : 	STATEMANAGER.SaveVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f8	68 42 01 00 00	 push	 322			; 00000142H
  000fd	e8 00 00 00 00	 call	 ?SaveVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SaveVertexShader

; 134  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00108	6a 01		 push	 1
  0010a	6a 16		 push	 22			; 00000016H
  0010c	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 135  : 
; 136  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00117	6a 01		 push	 1
  00119	6a 1b		 push	 27			; 0000001bH
  0011b	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 137  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00126	6a 05		 push	 5
  00128	6a 13		 push	 19			; 00000013H
  0012a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 138  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00135	6a 02		 push	 2
  00137	6a 14		 push	 20			; 00000014H
  00139	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 139  : 
; 140  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00144	6a 01		 push	 1
  00146	6a 0f		 push	 15			; 0000000fH
  00148	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 141  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00153	6a 05		 push	 5
  00155	6a 19		 push	 25			; 00000019H
  00157	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 142  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00162	57		 push	 edi
  00163	6a 18		 push	 24			; 00000018H
  00165	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 143  : 
; 144  : 	STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );

  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00170	6a 01		 push	 1
  00172	68 ab 00 00 00	 push	 171			; 000000abH
  00177	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 145  : 	//STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );
; 146  : 
; 147  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00182	57		 push	 edi
  00183	6a 02		 push	 2
  00185	57		 push	 edi
  00186	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 148  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TEXTURE);

  0018b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00191	6a 02		 push	 2
  00193	6a 03		 push	 3
  00195	57		 push	 edi
  00196	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 149  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG2);
; 150  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  0019b	6a 02		 push	 2
  0019d	6a 01		 push	 1
  0019f	57		 push	 edi
  001a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 151  : 
; 152  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b1	57		 push	 edi
  001b2	6a 05		 push	 5
  001b4	57		 push	 edi
  001b5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 153  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

  001ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c0	6a 02		 push	 2
  001c2	6a 06		 push	 6
  001c4	57		 push	 edi
  001c5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 154  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 155  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG1);

  001ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d0	6a 02		 push	 2
  001d2	6a 04		 push	 4
  001d4	57		 push	 edi
  001d5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 156  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  001da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e0	6a 01		 push	 1
  001e2	6a 01		 push	 1
  001e4	6a 01		 push	 1
  001e6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 157  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  001eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f1	6a 01		 push	 1
  001f3	6a 04		 push	 4
  001f5	6a 01		 push	 1
  001f7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 158  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  001fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00202	57		 push	 edi
  00203	68 89 00 00 00	 push	 137			; 00000089H
  00208	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 159  : 	STATEMANAGER.SetTexture(0, NULL);

  0020d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00213	57		 push	 edi
  00214	57		 push	 edi
  00215	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 160  : 	STATEMANAGER.SetTexture(1, NULL);

  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00220	57		 push	 edi
  00221	6a 01		 push	 1
  00223	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 161  : 
; 162  : 
; 163  : 	D3DXMATRIX m;
; 164  : 	CScreen s;s.UpdateViewMatrix();

  00228	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0022e	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00233	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00239	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0023d	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 165  : 	CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  00242	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00248	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  0024d	89 85 98 fe ff
	ff		 mov	 DWORD PTR _pCurrentCamera$1$[ebp], eax

; 166  : 	if (!pCurrentCamera)

  00253	85 c0		 test	 eax, eax
  00255	0f 84 13 09 00
	00		 je	 $LN30@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 256  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0025b	8b b5 b4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00261	89 bd 4c ff ff
	ff		 mov	 DWORD PTR _m$[ebp+56], edi
  00267	89 bd 48 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+52], edi
  0026d	89 bd 44 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+48], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 256  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00273	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00276	89 bd 40 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+44], edi
  0027c	89 bd 30 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+28], edi
  00282	89 bd 2c ff ff
	ff		 mov	 DWORD PTR _m$[ebp+24], edi
  00288	89 bd 24 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+16], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  0028e	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00291	89 bd 20 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+12], edi
  00297	89 bd 1c ff ff
	ff		 mov	 DWORD PTR _m$[ebp+8], edi
  0029d	89 bd 18 ff ff
	ff		 mov	 DWORD PTR _m$[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1155 :             _Myproxy = _Parent->_Myproxy;

  002a3	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  002a6	c7 85 50 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+60], 1065353216 ; 3f800000H
  002b0	c7 85 28 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+20], 1065353216 ; 3f800000H
  002ba	c7 85 14 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp], 1065353216 ; 3f800000H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 171  : 	D3DXVECTOR3 F(pCurrentCamera->GetView());

  002c4	f3 0f 7e 40 54	 movq	 xmm0, QWORD PTR [eax+84]
  002c9	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  002cc	66 0f d6 85 9c
	fe ff ff	 movq	 QWORD PTR _F$[ebp], xmm0

; 172  : 	m._31 = F.x;

  002d4	f3 0f 10 bd 9c
	fe ff ff	 movss	 xmm7, DWORD PTR _F$[ebp]
  002dc	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _F$[ebp+8], eax

; 173  : 	m._32 = F.y;
; 174  : 	m._33 = F.z;

  002e2	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
  002ea	f3 0f 11 bd 34
	ff ff ff	 movss	 DWORD PTR _m$[ebp+32], xmm7
  002f2	f3 0f 10 bd a0
	fe ff ff	 movss	 xmm7, DWORD PTR _F$[ebp+4]
  002fa	f3 0f 11 bd 38
	ff ff ff	 movss	 DWORD PTR _m$[ebp+36], xmm7
  00302	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+40], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1155 :             _Myproxy = _Parent->_Myproxy;

  0030a	89 bd b0 fe ff
	ff		 mov	 DWORD PTR $T12[ebp], edi
$LN479@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 904  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00310	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00313	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00316	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f000000
  0031e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00326	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _it2$$sroa$2135$1$[ebp], ecx
  0032c	89 95 bc fe ff
	ff		 mov	 DWORD PTR _it1$$sroa$2137$1$[ebp], edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 183  : 	{

  00332	3b c8		 cmp	 ecx, eax
  00334	0f 84 27 07 00
	00		 je	 $LN3@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0033a	85 ff		 test	 edi, edi
  0033c	74 04		 je	 SHORT $LN154@Render
  0033e	8b 07		 mov	 eax, DWORD PTR [edi]
  00340	eb 02		 jmp	 SHORT $LN155@Render
$LN154@Render:
  00342	33 c0		 xor	 eax, eax
$LN155@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00344	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 184  : 		const D3DXVECTOR3& rkOld=it1->second;

  00347	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0034a	49		 dec	 ecx
  0034b	23 ca		 and	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 184  : 		const D3DXVECTOR3& rkOld=it1->second;

  0034d	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00350	85 ff		 test	 edi, edi
  00352	74 04		 je	 SHORT $LN166@Render
  00354	8b 07		 mov	 eax, DWORD PTR [edi]
  00356	eb 02		 jmp	 SHORT $LN167@Render
$LN166@Render:
  00358	33 c0		 xor	 eax, eax
$LN167@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0035a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 185  : 		const D3DXVECTOR3& rkNew=it2->second;

  0035d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00360	49		 dec	 ecx
  00361	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2135$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 185  : 		const D3DXVECTOR3& rkNew=it2->second;

  00367	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0036a	f3 0f 10 70 08	 movss	 xmm6, DWORD PTR [eax+8]
  0036f	f3 0f 10 68 0c	 movss	 xmm5, DWORD PTR [eax+12]
  00374	f3 0f 5c 76 08	 subss	 xmm6, DWORD PTR [esi+8]
  00379	f3 0f 5c 6e 0c	 subss	 xmm5, DWORD PTR [esi+12]
  0037e	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]
  00383	f3 0f 5c 66 04	 subss	 xmm4, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 670  :             return (float)fabs(_X);

  00388	0f 28 ce	 movaps	 xmm1, xmm6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0038b	f3 0f 11 b5 84
	fe ff ff	 movss	 DWORD PTR _B$1$sroa$2134$1$[ebp], xmm6
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 670  :             return (float)fabs(_X);

  00393	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00396	f3 0f 11 ad 80
	fe ff ff	 movss	 DWORD PTR _B$1$sroa$2133$1$[ebp], xmm5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 670  :             return (float)fabs(_X);

  0039e	0f 54 ca	 andps	 xmm1, xmm2
  003a1	0f 54 c2	 andps	 xmm0, xmm2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  003a4	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003a7	f3 0f 11 a5 7c
	fe ff ff	 movss	 DWORD PTR tv3678[ebp], xmm4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  003af	76 05		 jbe	 SHORT $LN22@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\cmath

; 117  :     return _CSTD fabsf(_Xx);

  003b1	0f 28 d1	 movaps	 xmm2, xmm1

; 118  : }

  003b4	eb 03		 jmp	 SHORT $LN187@Render
$LN22@Render:

; 117  :     return _CSTD fabsf(_Xx);

  003b6	0f 28 d0	 movaps	 xmm2, xmm0
$LN187@Render:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 670  :             return (float)fabs(_X);

  003b9	0f 28 dc	 movaps	 xmm3, xmm4
  003bc	0f 54 1d 00 00
	00 00		 andps	 xmm3, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  003c3	0f 2f da	 comiss	 xmm3, xmm2
  003c6	77 0d		 ja	 SHORT $LN211@Render
  003c8	0f 2f c8	 comiss	 xmm1, xmm0
  003cb	76 05		 jbe	 SHORT $LN24@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\cmath

; 117  :     return _CSTD fabsf(_Xx);

  003cd	0f 28 d9	 movaps	 xmm3, xmm1

; 118  : }

  003d0	eb 03		 jmp	 SHORT $LN211@Render
$LN24@Render:

; 117  :     return _CSTD fabsf(_Xx);

  003d2	0f 28 d8	 movaps	 xmm3, xmm0
$LN211@Render:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  003d5	f3 0f 59 df	 mulss	 xmm3, xmm7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  003d9	85 ff		 test	 edi, edi
  003db	74 2c		 je	 SHORT $LN222@Render
  003dd	8b 07		 mov	 eax, DWORD PTR [edi]
  003df	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  003e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  003e4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  003e7	49		 dec	 ecx
  003e8	23 ca		 and	 ecx, edx

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  003ea	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  003ed	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  003f3	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  003f5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  003f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  003fb	49		 dec	 ecx
  003fc	23 ca		 and	 ecx, edx

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  003fe	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00401	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  00407	eb 30		 jmp	 SHORT $LN247@Render
$LN222@Render:
  00409	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ds:8
  0040f	33 f6		 xor	 esi, esi
  00411	a1 04 00 00 00	 mov	 eax, DWORD PTR ds:4
  00416	49		 dec	 ecx
  00417	23 ca		 and	 ecx, edx
  00419	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0041c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ds:8
  00422	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  00428	49		 dec	 ecx
  00429	a1 04 00 00 00	 mov	 eax, DWORD PTR ds:4
  0042e	23 ca		 and	 ecx, edx
  00430	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00433	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
$LN247@Render:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 189  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00439	0f 28 d6	 movaps	 xmm2, xmm6
  0043c	0f 28 cd	 movaps	 xmm1, xmm5
  0043f	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00443	0f 28 c4	 movaps	 xmm0, xmm4
  00446	f3 0f 59 cf	 mulss	 xmm1, xmm7
  0044a	f3 0f 58 51 08	 addss	 xmm2, DWORD PTR [ecx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0044f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 189  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00452	f3 0f 58 48 0c	 addss	 xmm1, DWORD PTR [eax+12]
  00457	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0045a	49		 dec	 ecx
  0045b	23 ca		 and	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 189  : 		Vector3d c(it1->second.x+B.x*0.5f,

  0045d	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00461	51		 push	 ecx
  00462	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  00467	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0046a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  0046f	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00474	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _c$16[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SphereLib\vector.h

; 38   : 		y = b;

  0047a	f3 0f 11 95 0c
	ff ff ff	 movss	 DWORD PTR _c$16[ebp+4], xmm2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00482	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SphereLib\vector.h

; 39   : 		z = c;

  00483	f3 0f 11 8d 10
	ff ff ff	 movss	 DWORD PTR _c$16[ebp+8], xmm1
  0048b	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _c$16[ebp], xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00493	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00498	83 f8 02	 cmp	 eax, 2
  0049b	0f 84 a7 05 00
	00		 je	 $LN2@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  004a1	85 ff		 test	 edi, edi
  004a3	74 04		 je	 SHORT $LN260@Render
  004a5	8b 07		 mov	 eax, DWORD PTR [edi]
  004a7	eb 02		 jmp	 SHORT $LN261@Render
$LN260@Render:
  004a9	33 c0		 xor	 eax, eax
$LN261@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004ab	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  004ae	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004b1	49		 dec	 ecx
  004b2	23 8d bc fe ff
	ff		 and	 ecx, DWORD PTR _it1$$sroa$2137$1$[ebp]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  004b8	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 196  : 		float rate1 = (1-(CTimer::Instance().GetCurrentSecond()-it1->first)/m_fTailLength);

  004bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  004c1	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  004c6	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  004cc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  004d4	d8 26		 fsub	 DWORD PTR [esi]
  004d6	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR tv2009[ebp]
  004dc	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv2009[ebp]
  004e4	f3 0f 5e 41 10	 divss	 xmm0, DWORD PTR [ecx+16]
  004e9	f3 0f 5c c8	 subss	 xmm1, xmm0
  004ed	f3 0f 11 8d a8
	fe ff ff	 movss	 DWORD PTR _rate1$1$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  004f5	85 ff		 test	 edi, edi
  004f7	74 04		 je	 SHORT $LN272@Render
  004f9	8b 07		 mov	 eax, DWORD PTR [edi]
  004fb	eb 02		 jmp	 SHORT $LN273@Render
$LN272@Render:
  004fd	33 c0		 xor	 eax, eax
$LN273@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004ff	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  00502	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00505	49		 dec	 ecx
  00506	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2135$1$[ebp]

; 457  :         return pointer_traits<pointer>::pointer_to(**this);

  0050c	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 197  : 		float rate2 = (1-(CTimer::Instance().GetCurrentSecond()-it2->first)/m_fTailLength);

  0050f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00515	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0051a	d8 26		 fsub	 DWORD PTR [esi]
  0051c	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00522	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000

; 198  : 		float size1 = m_fSize;
; 199  : 		float size2 = m_fSize;
; 200  : 		if (!m_bRectShape)

  0052a	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0052e	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR tv2058[ebp]
  00534	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv2058[ebp]
  0053c	f3 0f 5e 40 10	 divss	 xmm0, DWORD PTR [eax+16]
  00541	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  00546	f3 0f 5c d8	 subss	 xmm3, xmm0
  0054a	0f 28 d1	 movaps	 xmm2, xmm1
  0054d	75 0c		 jne	 SHORT $LN20@Render

; 201  : 		{
; 202  : 			size1 *= rate1;

  0054f	f3 0f 59 8d a8
	fe ff ff	 mulss	 xmm1, DWORD PTR _rate1$1$[ebp]

; 203  : 			size2 *= rate2;

  00557	f3 0f 59 d3	 mulss	 xmm2, xmm3
$LN20@Render:

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0055b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 204  : 		}
; 205  : 		TFlyVertex v[6] =
; 206  : 		{
; 207  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),
; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),

  0055e	0f 28 c1	 movaps	 xmm0, xmm1
  00561	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00568	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+24], xmm0

; 209  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),
; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),

  00570	0f 28 c2	 movaps	 xmm0, xmm2
  00573	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0057a	89 85 6c ff ff
	ff		 mov	 DWORD PTR _v$18[ebp+12], eax
  00580	89 45 84	 mov	 DWORD PTR _v$18[ebp+36], eax
  00583	89 45 9c	 mov	 DWORD PTR _v$18[ebp+60], eax
  00586	89 45 b4	 mov	 DWORD PTR _v$18[ebp+84], eax
  00589	89 45 cc	 mov	 DWORD PTR _v$18[ebp+108], eax
  0058c	89 45 e4	 mov	 DWORD PTR _v$18[ebp+132], eax

; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};
; 235  : 
; 236  : 
; 237  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 238  : 		E = pCurrentCamera->GetEye();

  0058f	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00595	f3 0f 11 45 a8	 movss	 DWORD PTR _v$18[ebp+72], xmm0
  0059a	f3 0f 11 45 dc	 movss	 DWORD PTR _v$18[ebp+124], xmm0
  0059f	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$18[ebp], 0

; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};
; 235  : 
; 236  : 
; 237  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 238  : 		E = pCurrentCamera->GetEye();

  005a9	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  005ae	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  005b1	f3 0f 11 8d 64
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+4], xmm1
  005b9	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$18[ebp+8], 0
  005c3	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$18[ebp+16], 0
  005cd	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$18[ebp+20], 0
  005d7	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$18[ebp+28], 0
  005e1	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+32], 0
  005e8	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+40], 0
  005ef	c7 45 8c 00 00
	00 3f		 mov	 DWORD PTR _v$18[ebp+44], 1056964608 ; 3f000000H
  005f6	f3 0f 11 4d 90	 movss	 DWORD PTR _v$18[ebp+48], xmm1
  005fb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+52], 0
  00602	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+56], 0
  00609	c7 45 a0 00 00
	00 3f		 mov	 DWORD PTR _v$18[ebp+64], 1056964608 ; 3f000000H
  00610	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+68], 0
  00617	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+76], 0
  0061e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+80], 0
  00625	c7 45 b8 00 00
	00 3f		 mov	 DWORD PTR _v$18[ebp+88], 1056964608 ; 3f000000H
  0062c	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _v$18[ebp+92], 1065353216 ; 3f800000H
  00633	f3 0f 11 55 c0	 movss	 DWORD PTR _v$18[ebp+96], xmm2
  00638	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+100], 0
  0063f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+104], 0
  00646	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _v$18[ebp+112], 1065353216 ; 3f800000H
  0064d	c7 45 d4 00 00
	00 3f		 mov	 DWORD PTR _v$18[ebp+116], 1056964608 ; 3f000000H
  00654	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+120], 0
  0065b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _v$18[ebp+128], 0
  00662	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _v$18[ebp+136], 1065353216 ; 3f800000H
  00669	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR _v$18[ebp+140], 1065353216 ; 3f800000H

; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};
; 235  : 
; 236  : 
; 237  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 238  : 		E = pCurrentCamera->GetEye();

  00670	66 0f d6 85 70
	fe ff ff	 movq	 QWORD PTR _E$11[ebp], xmm0
  00678	89 85 78 fe ff
	ff		 mov	 DWORD PTR _E$11[ebp+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0067e	85 ff		 test	 edi, edi
  00680	74 04		 je	 SHORT $LN322@Render
  00682	8b 07		 mov	 eax, DWORD PTR [edi]
  00684	eb 02		 jmp	 SHORT $LN323@Render
$LN322@Render:
  00686	33 c0		 xor	 eax, eax
$LN323@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00688	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 239  : 		E-=it1->second;

  0068b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0068e	49		 dec	 ecx
  0068f	23 8d bc fe ff
	ff		 and	 ecx, DWORD PTR _it1$$sroa$2137$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 214  :     y -= v.y;

  00695	f3 0f 10 8d 74
	fe ff ff	 movss	 xmm1, DWORD PTR _E$11[ebp+4]

; 215  :     z -= v.z;

  0069d	f3 0f 10 bd 78
	fe ff ff	 movss	 xmm7, DWORD PTR _E$11[ebp+8]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  006a5	f3 0f 10 a5 80
	fe ff ff	 movss	 xmm4, DWORD PTR _B$1$sroa$2133$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 239  : 		E-=it1->second;

  006ad	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  006b0	0f 28 c4	 movaps	 xmm0, xmm4

; 215  :     z -= v.z;

  006b3	f3 0f 10 ad 84
	fe ff ff	 movss	 xmm5, DWORD PTR _B$1$sroa$2134$1$[ebp]
  006bb	f3 0f 10 b5 70
	fe ff ff	 movss	 xmm6, DWORD PTR _E$11[ebp]
  006c3	0f 28 d5	 movaps	 xmm2, xmm5

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  006c6	f3 0f 10 9d 7c
	fe ff ff	 movss	 xmm3, DWORD PTR tv3678[ebp]

; 214  :     y -= v.y;

  006ce	f3 0f 5c 48 08	 subss	 xmm1, DWORD PTR [eax+8]

; 215  :     z -= v.z;

  006d3	f3 0f 5c 78 0c	 subss	 xmm7, DWORD PTR [eax+12]
  006d8	f3 0f 5c 70 04	 subss	 xmm6, DWORD PTR [eax+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  006dd	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _U$17[ebp]
  006e3	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  006e4	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  006e8	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 215  :     z -= v.z;

  006e9	f3 0f 59 d7	 mulss	 xmm2, xmm7

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  006ed	f3 0f 59 e6	 mulss	 xmm4, xmm6
  006f1	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  006f5	f3 0f 59 ee	 mulss	 xmm5, xmm6
  006f9	0f 28 c3	 movaps	 xmm0, xmm3

; 214  :     y -= v.y;

  006fc	f3 0f 11 8d a8
	fe ff ff	 movss	 DWORD PTR _E$2$[ebp], xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00704	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00708	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0070c	f3 0f 5c e0	 subss	 xmm4, xmm0

; 213  :     x -= v.x;

  00710	f3 0f 11 b5 c4
	fe ff ff	 movss	 DWORD PTR _E$1$[ebp], xmm6

; 215  :     z -= v.z;

  00718	f3 0f 11 bd b8
	fe ff ff	 movss	 DWORD PTR _E$3$[ebp], xmm7

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00720	f3 0f 5c dd	 subss	 xmm3, xmm5

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00724	0f 28 c4	 movaps	 xmm0, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00727	f3 0f 59 a5 9c
	fe ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp]
  0072f	f3 0f 59 85 a4
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1281 :     *pOut = v;

  00737	0f 28 cb	 movaps	 xmm1, xmm3
  0073a	f3 0f 59 8d a0
	fe ff ff	 mulss	 xmm1, DWORD PTR _F$[ebp+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00742	f3 0f 59 9d 9c
	fe ff ff	 mulss	 xmm3, DWORD PTR _F$[ebp]
  0074a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0074e	0f 28 c2	 movaps	 xmm0, xmm2
  00751	f3 0f 59 85 a4
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00759	f3 0f 59 95 a0
	fe ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp+4]
  00761	f3 0f 5c c3	 subss	 xmm0, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  00765	f3 0f 11 8d 54
	ff ff ff	 movss	 DWORD PTR _U$17[ebp], xmm1
  0076d	f3 0f 5c e2	 subss	 xmm4, xmm2
  00771	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _U$17[ebp+4], xmm0
  00779	f3 0f 11 a5 5c
	ff ff ff	 movss	 DWORD PTR _U$17[ebp+8], xmm4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  00781	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00786	f3 0f 10 ad 5c
	ff ff ff	 movss	 xmm5, DWORD PTR _U$17[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0078e	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _v$18[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00794	f3 0f 10 9d 58
	ff ff ff	 movss	 xmm3, DWORD PTR _U$17[ebp+4]
  0079c	0f 28 f5	 movaps	 xmm6, xmm5
  0079f	f3 0f 59 b5 a0
	fe ff ff	 mulss	 xmm6, DWORD PTR _F$[ebp+4]
  007a7	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007aa	bf 06 00 00 00	 mov	 edi, 6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  007af	f3 0f 59 85 a4
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  007b7	0f 28 d3	 movaps	 xmm2, xmm3
  007ba	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR _U$17[ebp]
  007c2	f3 0f 59 95 9c
	fe ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp]
  007ca	0f 28 e1	 movaps	 xmm4, xmm1
  007cd	f3 0f 59 a5 a4
	fe ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp+8]
  007d5	f3 0f 5c f0	 subss	 xmm6, xmm0
  007d9	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 250  : 		m._21 = U.x;

  007dc	f3 0f 11 8d 24
	ff ff ff	 movss	 DWORD PTR _m$[ebp+16], xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  007e4	f3 0f 59 85 9c
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 251  : 		m._22 = U.y;

  007ec	f3 0f 11 9d 28
	ff ff ff	 movss	 DWORD PTR _m$[ebp+20], xmm3

; 252  : 		m._23 = U.z;

  007f4	f3 0f 11 ad 2c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+24], xmm5
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  007fc	f3 0f 5c e0	 subss	 xmm4, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 253  : 		m._11 = R.x;

  00800	f3 0f 11 b5 14
	ff ff ff	 movss	 DWORD PTR _m$[ebp], xmm6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00808	0f 28 c1	 movaps	 xmm0, xmm1
  0080b	f3 0f 59 85 a0
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 254  : 		m._12 = R.y;

  00813	f3 0f 11 a5 18
	ff ff ff	 movss	 DWORD PTR _m$[ebp+4], xmm4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0081b	f3 0f 5c d0	 subss	 xmm2, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 255  : 		m._13 = R.z;

  0081f	f3 0f 11 95 1c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+8], xmm2
$LL7@Render:

; 256  : 		int i;
; 257  : 		for(i=0;i<6;i++)
; 258  : 			D3DXVec3TransformNormal(&v[i].p,&v[i].p,&m);

  00827	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _m$[ebp]
  0082d	50		 push	 eax
  0082e	56		 push	 esi
  0082f	56		 push	 esi
  00830	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  00835	83 c6 18	 add	 esi, 24			; 00000018H
  00838	83 ef 01	 sub	 edi, 1
  0083b	75 ea		 jne	 SHORT $LL7@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0083d	8b bd b0 fe ff
	ff		 mov	 edi, DWORD PTR $T12[ebp]
  00843	85 ff		 test	 edi, edi
  00845	74 04		 je	 SHORT $LN342@Render
  00847	8b 07		 mov	 eax, DWORD PTR [edi]
  00849	eb 02		 jmp	 SHORT $LN343@Render
$LN342@Render:
  0084b	33 c0		 xor	 eax, eax
$LN343@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0084d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  00850	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00853	49		 dec	 ecx
  00854	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _it1$$sroa$2137$1$[ebp]
  0085a	23 ca		 and	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0085c	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _v$18[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  00864	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00867	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0086c	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _v$18[ebp], xmm0

; 205  :     y += v.y;

  00874	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _v$18[ebp+4]
  0087c	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00881	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+4], xmm0

; 206  :     z += v.z;

  00889	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _v$18[ebp+8]
  00891	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00896	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+8], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0089e	85 ff		 test	 edi, edi
  008a0	74 04		 je	 SHORT $LN466@Render
  008a2	8b 07		 mov	 eax, DWORD PTR [edi]
  008a4	eb 02		 jmp	 SHORT $LN467@Render
$LN466@Render:
  008a6	33 c0		 xor	 eax, eax
$LN467@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  008a8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  008ab	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  008ae	49		 dec	 ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  008af	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _v$18[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  008b7	23 ca		 and	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  008b9	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  008bc	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  008c1	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+24], xmm0

; 205  :     y += v.y;

  008c9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _v$18[ebp+28]
  008d1	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  008d6	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v$18[ebp+28], xmm0

; 206  :     z += v.z;

  008de	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _v$18[ebp+32]
  008e3	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  008e8	f3 0f 11 45 80	 movss	 DWORD PTR _v$18[ebp+32], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  008ed	85 ff		 test	 edi, edi
  008ef	74 04		 je	 SHORT $LN469@Render
  008f1	8b 07		 mov	 eax, DWORD PTR [edi]
  008f3	eb 02		 jmp	 SHORT $LN470@Render
$LN469@Render:
  008f5	33 c0		 xor	 eax, eax
$LN470@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  008f7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  008fa	be 03 00 00 00	 mov	 esi, 3
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  008ff	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00902	49		 dec	 ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00903	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v$18[ebp+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00908	23 ca		 and	 ecx, edx
  0090a	8d 55 b0	 lea	 edx, DWORD PTR _v$18[ebp+80]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  0090d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00910	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00915	f3 0f 11 45 90	 movss	 DWORD PTR _v$18[ebp+48], xmm0

; 205  :     y += v.y;

  0091a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v$18[ebp+52]
  0091f	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00924	f3 0f 11 45 94	 movss	 DWORD PTR _v$18[ebp+52], xmm0

; 206  :     z += v.z;

  00929	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _v$18[ebp+56]
  0092e	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00933	f3 0f 11 45 98	 movss	 DWORD PTR _v$18[ebp+56], xmm0
$LL461@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1163 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00938	85 ff		 test	 edi, edi
  0093a	74 04		 je	 SHORT $LN356@Render
  0093c	8b 07		 mov	 eax, DWORD PTR [edi]
  0093e	eb 02		 jmp	 SHORT $LN357@Render
$LN356@Render:
  00940	33 c0		 xor	 eax, eax
$LN357@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00942	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 262  : 			v[i].p += it2->second;

  00945	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00948	49		 dec	 ecx
  00949	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2135$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 262  : 			v[i].p += it2->second;

  0094f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00952	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00957	f3 0f 58 42 f8	 addss	 xmm0, DWORD PTR [edx-8]
  0095c	f3 0f 11 42 f8	 movss	 DWORD PTR [edx-8], xmm0

; 205  :     y += v.y;

  00961	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00966	f3 0f 58 42 fc	 addss	 xmm0, DWORD PTR [edx-4]
  0096b	f3 0f 11 42 fc	 movss	 DWORD PTR [edx-4], xmm0

; 206  :     z += v.z;

  00970	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00975	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00979	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 261  : 		for(;i<6;i++)

  0097d	83 c2 18	 add	 edx, 24			; 00000018H
  00980	83 ee 01	 sub	 esi, 1
  00983	75 b3		 jne	 SHORT $LL461@Render
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00985	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0098b	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _v$18[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00991	f3 0f 10 8d c4
	fe ff ff	 movss	 xmm1, DWORD PTR _E$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00999	8d bd e0 fd ff
	ff		 lea	 edi, DWORD PTR $T10[ebp+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0099f	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _E$2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  009a7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009ac	f3 0f 59 40 58	 mulss	 xmm0, DWORD PTR [eax+88]
  009b1	f3 0f 59 48 54	 mulss	 xmm1, DWORD PTR [eax+84]
  009b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  009ba	f3 0f 10 8d b8
	fe ff ff	 movss	 xmm1, DWORD PTR _E$3$[ebp]
  009c2	f3 0f 59 48 5c	 mulss	 xmm1, DWORD PTR [eax+92]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  009c7	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009cd	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 266  : 		VSVector.push_back(make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  009d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  009d8	f3 0f 11 85 dc
	fd ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  009e0	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  009e2	3b 85 ac fe ff
	ff		 cmp	 eax, DWORD PTR _VSVector$2$[ebp]
  009e8	74 39		 je	 SHORT $LN377@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  009ea	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _it1$$sroa$2137$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  009f0	8d b5 dc fd ff
	ff		 lea	 esi, DWORD PTR $T10[ebp]
  009f6	8b f8		 mov	 edi, eax
  009f8	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  009fd	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  009ff	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _it2$$sroa$2135$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00a05	05 94 00 00 00	 add	 eax, 148		; 00000094H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  00a0a	8b bd b0 fe ff
	ff		 mov	 edi, DWORD PTR $T12[ebp]
  00a10	41		 inc	 ecx
  00a11	8b b5 b4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00a17	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00a18	89 85 8c fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  00a1e	e9 ed f8 ff ff	 jmp	 $LN479@Render
$LN377@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a23	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00a29	51		 push	 ecx
  00a2a	50		 push	 eax
  00a2b	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00a31	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
  00a36	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  00a3c	8b bd b0 fe ff
	ff		 mov	 edi, DWORD PTR $T12[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a42	89 85 ac fe ff
	ff		 mov	 DWORD PTR _VSVector$2$[ebp], eax
$LN2@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 284  :         ++_Myoff;

  00a48	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _it2$$sroa$2135$1$[ebp]
  00a4e	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _it1$$sroa$2137$1$[ebp]
  00a54	41		 inc	 ecx
  00a55	8b b5 b4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00a5b	42		 inc	 edx
  00a5c	e9 af f8 ff ff	 jmp	 $LN479@Render
$LN3@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7399 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00a61	8b bd 8c fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$[ebp+4]
  00a67	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00a6c	8b b5 88 fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$[ebp]
  00a72	8b cf		 mov	 ecx, edi
  00a74	2b ce		 sub	 ecx, esi
  00a76	c6 85 b8 fe ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0
  00a7d	ff b5 b8 fe ff
	ff		 push	 DWORD PTR $T13[ebp]
  00a83	f7 e9		 imul	 ecx
  00a85	89 b5 b8 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], esi
  00a8b	03 d1		 add	 edx, ecx
  00a8d	c1 fa 07	 sar	 edx, 7
  00a90	8b c2		 mov	 eax, edx
  00a92	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00a95	03 c2		 add	 eax, edx
  00a97	50		 push	 eax
  00a98	57		 push	 edi
  00a99	56		 push	 esi
  00a9a	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00a9f	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00aa2	3b f7		 cmp	 esi, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00aa4	74 29		 je	 SHORT $LN15@Render
  00aa6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL408@Render:

; 274  : 	{
; 275  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 4, it->second.v, sizeof(TVertex));

  00ab0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00ab6	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00ab9	6a 18		 push	 24			; 00000018H
  00abb	50		 push	 eax
  00abc	6a 04		 push	 4
  00abe	6a 05		 push	 5
  00ac0	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 78   :         ++_Ptr;

  00ac5	81 c6 94 00 00
	00		 add	 esi, 148		; 00000094H

; 154  :         return _Ptr == _Right._Ptr;

  00acb	3b f7		 cmp	 esi, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00acd	75 e1		 jne	 SHORT $LL408@Render
$LN15@Render:

; 276  : 	}
; 277  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  00acf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00ad5	6a 14		 push	 20			; 00000014H
  00ad7	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 278  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00adc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00ae2	6a 13		 push	 19			; 00000013H
  00ae4	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 279  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  00ae9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00aef	6a 1b		 push	 27			; 0000001bH
  00af1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 280  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00af6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00afc	6a 16		 push	 22			; 00000016H
  00afe	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 281  : 	STATEMANAGER.RestoreVertexShader();

  00b03	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b09	e8 00 00 00 00	 call	 ?RestoreVertexShader@CStateManager@@QAEXXZ ; CStateManager::RestoreVertexShader

; 282  : 	STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  00b0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b14	68 00 01 00 00	 push	 256			; 00000100H
  00b19	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 283  : 	//STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);
; 284  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZFUNC);

  00b1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b24	6a 17		 push	 23			; 00000017H
  00b26	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 285  : 	STATEMANAGER.RestoreRenderState(D3DRS_BLENDOP);

  00b2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b31	68 ab 00 00 00	 push	 171			; 000000abH
  00b36	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 286  : 
; 287  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00b3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b41	6a 0f		 push	 15			; 0000000fH
  00b43	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 288  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00b48	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b4e	6a 19		 push	 25			; 00000019H
  00b50	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 289  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  00b55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b5b	6a 18		 push	 24			; 00000018H
  00b5d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
  00b62	8b b5 b8 fe ff
	ff		 mov	 esi, DWORD PTR __Ptr$1$[ebp]
  00b68	8b bd ac fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$2$[ebp]
$LN30@Render:

; 291  : }

  00b6e	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00b74	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00b79	85 f6		 test	 esi, esi
  00b7b	74 3f		 je	 SHORT $LN422@Render

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00b7d	2b fe		 sub	 edi, esi
  00b7f	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00b84	f7 ef		 imul	 edi
  00b86	03 d7		 add	 edx, edi
  00b88	c1 fa 07	 sar	 edx, 7
  00b8b	8b c2		 mov	 eax, edx
  00b8d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00b90	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00b92	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  00b98	8b c6		 mov	 eax, esi

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00b9a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00ba0	72 10		 jb	 SHORT $LN438@Render

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00ba2	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00ba5	83 c1 23	 add	 ecx, 35			; 00000023H
  00ba8	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00baa	83 c0 fc	 add	 eax, -4			; fffffffcH
  00bad	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00bb0	77 25		 ja	 SHORT $LN481@Render
$LN438@Render:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00bb2	51		 push	 ecx
  00bb3	56		 push	 esi
  00bb4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00bb9	83 c4 08	 add	 esp, 8
$LN422@Render:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 291  : }

  00bbc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00bbf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00bc6	59		 pop	 ecx
  00bc7	5f		 pop	 edi
  00bc8	5e		 pop	 esi
  00bc9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bcc	33 cd		 xor	 ecx, ebp
  00bce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bd3	8b e5		 mov	 esp, ebp
  00bd5	5d		 pop	 ebp
  00bd6	c3		 ret	 0
$LN481@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00bd7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN477@Render:
  00bdc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0:
  00000	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1:
  0000b	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?Render@CFlyTrace@@QAEXXZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a dc fd ff
	ff		 mov	 ecx, DWORD PTR [edx-548]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CFlyTrace@@QAEXXZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Render
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Update@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Update@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Update, COMDAT
; _this$ = ecx

; 83   : 
; 84   : }

  00000	c2 00 00	 ret	 0
?Update@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
__First$ = -8						; size = 8
tv623 = -4						; size = 4
tv645 = 8						; size = 4
__Newoff$1$ = 8						; size = 4
_v3Position$ = 8					; size = 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyTrace::UpdateNewPosition, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00015	8b 45 08	 mov	 eax, DWORD PTR _v3Position$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 797  :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00018	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0001b	d9 5d f0	 fstp	 DWORD PTR $T1[ebp]
  0001e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00022	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00025	89 45 fc	 mov	 DWORD PTR $T1[ebp+12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 797  :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00028	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0002c	66 0f d6 45 f4	 movq	 QWORD PTR $T1[ebp+4], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 797  :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00031	3b c8		 cmp	 ecx, eax
  00033	77 0d		 ja	 SHORT $LN10@UpdateNewP

; 798  :             _Growmap(1);

  00035	6a 01		 push	 1
  00037	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0003a	e8 00 00 00 00	 call	 ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
  0003f	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
$LN10@UpdateNewP:
  00042	53		 push	 ebx

; 799  :         }
; 800  :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00043	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
  00046	21 5e 20	 and	 DWORD PTR [esi+32], ebx
  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 801  :         size_type _Newoff = _Myoff() != 0 ? _Myoff() : _Mapsize() * _Block_size;
; 802  :         size_type _Block  = _Getblock(--_Newoff);

  0004c	0f 44 c1	 cmove	 eax, ecx
  0004f	48		 dec	 eax

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00050	23 d8		 and	 ebx, eax

; 802  :         size_type _Block  = _Getblock(--_Newoff);

  00052	89 45 08	 mov	 DWORD PTR __Newoff$1$[ebp], eax

; 803  :         if (_Map()[_Block] == nullptr) {

  00055	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00058	83 3c 98 00	 cmp	 DWORD PTR [eax+ebx*4], 0
  0005c	75 13		 jne	 SHORT $LN11@UpdateNewP
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  0005e	6a 10		 push	 16			; 00000010H
  00060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 804  :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00065	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00068	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 804  :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0006b	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax
  0006e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
$LN11@UpdateNewP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00071	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00074	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1009 :         return _Mysize() == 0;

  00078	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00079	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 810  :         _Myoff() = _Newoff;

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Newoff$1$[ebp]

; 811  :         ++_Mysize();

  0007f	ff 46 24	 inc	 DWORD PTR [esi+36]
  00082	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 1009 :         return _Mysize() == 0;

  00085	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00089	74 4f		 je	 SHORT $LN3@UpdateNewP
  0008b	0f 1f 44 00 00	 npad	 5
$LL2@UpdateNewP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 920  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00090	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00093	03 46 24	 add	 eax, DWORD PTR [esi+36]

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00096	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]

; 1069 :         return *_Prev_iter(_Unchecked_end());

  00099	89 45 fc	 mov	 DWORD PTR __First$[ebp+4], eax

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009c	49		 dec	 ecx

; 68   :         --_Myoff;

  0009d	48		 dec	 eax

; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009e	23 c8		 and	 ecx, eax

; 1069 :         return *_Prev_iter(_Unchecked_end());

  000a0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a3	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000ac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b0	f3 0f 58 46 10	 addss	 xmm0, DWORD PTR [esi+16]
  000b5	f3 0f 11 45 fc	 movss	 DWORD PTR tv623[ebp], xmm0
  000ba	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  000bf	d9 5d 08	 fstp	 DWORD PTR tv645[ebp]
  000c2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv645[ebp]
  000c7	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv623[ebp]
  000cb	76 0d		 jbe	 SHORT $LN3@UpdateNewP
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1153 :         if (--_Mysize() == 0) {

  000cd	83 46 24 ff	 add	 DWORD PTR [esi+36], -1
  000d1	75 bd		 jne	 SHORT $LL2@UpdateNewP

; 1154 :             _Myoff() = 0;

  000d3	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN3@UpdateNewP:
  000da	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 69   : }

  000db	5e		 pop	 esi
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 04 00	 ret	 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyTrace::UpdateNewPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z
_TEXT	SEGMENT
_rFlyingAttachData$ = 8					; size = 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z PROC ; CFlyTrace::Create, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	//assert(rFlyingAttachData.bHasTail);
; 74   : 	m_dwColor = rFlyingAttachData.dwTailColor;

  00003	8b 55 08	 mov	 edx, DWORD PTR _rFlyingAttachData$[ebp]
  00006	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 75   : 	m_fTailLength = rFlyingAttachData.fTailLength;

  0000c	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 76   : 	m_fSize = rFlyingAttachData.fTailSize;

  00012	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 77   : 	m_bRectShape = rFlyingAttachData.bRectShape;

  00018	8a 42 30	 mov	 al, BYTE PTR [edx+48]
  0001b	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 78   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ENDP ; CFlyTrace::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Destroy@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Destroy, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	m_TimePositionDeque.clear();

  00003	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 1339 :         _Tidy();

  00006	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 58   : 	__Initialize();

  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize
?Destroy@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??1CFlyTrace@@UAE@XZ
_TEXT	SEGMENT
??1CFlyTrace@@UAE@XZ PROC				; CFlyTrace::~CFlyTrace, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@

; 42   : 	Destroy();

  0000a	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 868  :         _Tidy();

  0000f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0001a	6a 08		 push	 8
  0001c	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 43   : }

  0002c	8b cf		 mov	 ecx, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CFlyTrace@@UAE@XZ ENDP				; CFlyTrace::~CFlyTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??0CFlyTrace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyTrace@@QAE@XZ PROC				; CFlyTrace::CFlyTrace, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyTrace@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@
  00035	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00038	6a 08		 push	 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 27   : {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1089 :     _Container_proxy* _Myproxy = nullptr;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\deque

; 561  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00047	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0004e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00055	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00063	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00068	83 c4 04	 add	 esp, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 28   : 	__Initialize();

  0006b	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1076 :         _Myproxy            = _New_proxy;

  00074	89 06		 mov	 DWORD PTR [esi], eax

; 1077 :         _New_proxy->_Mycont = this;

  00076	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTrace.cpp

; 28   : 	__Initialize();

  00078	e8 00 00 00 00	 call	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize

; 29   : 
; 30   : 	/*
; 31   : 	// Code for texture
; 32   : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer("d:/ray.jpg");
; 33   : 	m_ImageInstance.SetImagePointer(pImage);
; 34   : 
; 35   : 	CGraphicTexture * pTexture = m_ImageInstance.GetTexturePointer();
; 36   : 	m_lpTexture = pTexture->GetD3DTexture();
; 37   : 	*/
; 38   : }

  0007d	8b c7		 mov	 eax, edi
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyTrace@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CFlyTrace@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyTrace@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyTrace@@QAE@XZ ENDP				; CFlyTrace::CFlyTrace
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
