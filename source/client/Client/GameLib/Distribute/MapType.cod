; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\Distribute\MapType.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA DB 'None', 00H ; prt::c_szPropertyTypeName
	ORG $+27
	DB	'Tree', 00H
	ORG $+27
	DB	'Building', 00H
	ORG $+23
	DB	'Effect', 00H
	ORG $+25
	DB	'Ambience', 00H
	ORG $+23
	DB	'DungeonBlock', 00H
	ORG $+19
?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA DB '.pr', 00H ; prt::c_szPropertyExtension
	ORG $+12
	DB	'.prt', 00H
	ORG $+11
	DB	'.prb', 00H
	ORG $+11
	DB	'.pre', 00H
	ORG $+11
	DB	'.pra', 00H
	ORG $+11
	DB	'.prd', 00H
	ORG $+11
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?GetPropertyType@prt@@YAKPBD@Z			; prt::GetPropertyType
PUBLIC	?GetPropertyExtension@prt@@YAPBDK@Z		; prt::GetPropertyExtension
PUBLIC	?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ; prt::PropertyTreeDataToString
PUBLIC	?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ; prt::PropertyTreeStringToData
PUBLIC	?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ; prt::PropertyBuildingDataToString
PUBLIC	?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ; prt::PropertyBuildingStringToData
PUBLIC	?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ; prt::PropertyEffectDataToString
PUBLIC	?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ; prt::PropertyEffectStringToData
PUBLIC	?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ; prt::PropertyAmbienceDataToString
PUBLIC	?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ; prt::PropertyAmbienceStringToData
PUBLIC	?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ; prt::PropertyDungeonBlockDataToString
PUBLIC	?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ; prt::PropertyDungeonBlockStringToData
PUBLIC	?GetFogNearDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogNearDistance
PUBLIC	?GetFogFarDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogFarDistance
PUBLIC	?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ; SPixelPosition_CalculateDistanceSq3d
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?IntegerNumberToString@prt@@YAPBDH@Z		; prt::IntegerNumberToString
PUBLIC	?FloatNumberToString@prt@@YAPBDM@Z		; prt::FloatNumberToString
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_04GDOOJPNH@Tree@				; `string'
PUBLIC	??_C@_0N@FPEBPNJJ@PropertyType@			; `string'
PUBLIC	??_C@_0N@PEECDNOJ@PropertyName@			; `string'
PUBLIC	??_C@_08JBFACIKL@TreeFile@			; `string'
PUBLIC	??_C@_08CBPLOPJL@TreeSize@			; `string'
PUBLIC	??_C@_0N@IDDBDNKA@TreeVariance@			; `string'
PUBLIC	??_C@_08COFDOLHN@Building@			; `string'
PUBLIC	??_C@_0N@LJHIPMJO@BuildingFile@			; `string'
PUBLIC	??_C@_0L@GJODCEE@ShadowFlag@			; `string'
PUBLIC	??_C@_06OIKCOENH@?4mdatr@			; `string'
PUBLIC	??_C@_06LBEFNKEP@Effect@			; `string'
PUBLIC	??_C@_0L@LKNLHIBB@EffectFile@			; `string'
PUBLIC	??_C@_08HABDNILH@Ambience@			; `string'
PUBLIC	??_C@_08HKNDHFCE@PlayType@			; `string'
PUBLIC	??_C@_0N@PFAKOMHI@PlayInterval@			; `string'
PUBLIC	??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@	; `string'
PUBLIC	??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@	; `string'
PUBLIC	??_C@_0BE@CHLDPEGL@AmbienceSoundVector@		; `string'
PUBLIC	??_C@_0N@HFPGEGLM@DungeonBlock@			; `string'
PUBLIC	??_C@_0BB@IJOAHLBO@DungeonBlockFile@		; `string'
PUBLIC	??_C@_0BB@CJNPGFDA@dungeonblockfile@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Clear@CProperty@@QAEXXZ:PROC			; CProperty::Clear
EXTRN	?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::GetVector
EXTRN	?GetString@CProperty@@QAE_NPBDPAPBD@Z:PROC	; CProperty::GetString
EXTRN	?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::PutVector
EXTRN	?PutString@CProperty@@QAEXPBD0@Z:PROC		; CProperty::PutString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
_BSS	SEGMENT
?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA DB 011H DUP (?) ; `prt::IntegerNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
_BSS	SEGMENT
?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA DB 011H DUP (?) ; `prt::FloatNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJNPGFDA@dungeonblockfile@
CONST	SEGMENT
??_C@_0BB@CJNPGFDA@dungeonblockfile@ DB 'dungeonblockfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
CONST	SEGMENT
??_C@_0BB@IJOAHLBO@DungeonBlockFile@ DB 'DungeonBlockFile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFPGEGLM@DungeonBlock@
CONST	SEGMENT
??_C@_0N@HFPGEGLM@DungeonBlock@ DB 'DungeonBlock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
CONST	SEGMENT
??_C@_0BE@CHLDPEGL@AmbienceSoundVector@ DB 'AmbienceSoundVector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
CONST	SEGMENT
??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@ DB 'MaxVolumeAreaPercentage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
CONST	SEGMENT
??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@ DB 'PlayIntervalVariation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFAKOMHI@PlayInterval@
CONST	SEGMENT
??_C@_0N@PFAKOMHI@PlayInterval@ DB 'PlayInterval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKNDHFCE@PlayType@
CONST	SEGMENT
??_C@_08HKNDHFCE@PlayType@ DB 'PlayType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HABDNILH@Ambience@
CONST	SEGMENT
??_C@_08HABDNILH@Ambience@ DB 'Ambience', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LKNLHIBB@EffectFile@
CONST	SEGMENT
??_C@_0L@LKNLHIBB@EffectFile@ DB 'EffectFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBEFNKEP@Effect@
CONST	SEGMENT
??_C@_06LBEFNKEP@Effect@ DB 'Effect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKCOENH@?4mdatr@
CONST	SEGMENT
??_C@_06OIKCOENH@?4mdatr@ DB '.mdatr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJODCEE@ShadowFlag@
CONST	SEGMENT
??_C@_0L@GJODCEE@ShadowFlag@ DB 'ShadowFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJHIPMJO@BuildingFile@
CONST	SEGMENT
??_C@_0N@LJHIPMJO@BuildingFile@ DB 'BuildingFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08COFDOLHN@Building@
CONST	SEGMENT
??_C@_08COFDOLHN@Building@ DB 'Building', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDDBDNKA@TreeVariance@
CONST	SEGMENT
??_C@_0N@IDDBDNKA@TreeVariance@ DB 'TreeVariance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBPLOPJL@TreeSize@
CONST	SEGMENT
??_C@_08CBPLOPJL@TreeSize@ DB 'TreeSize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBFACIKL@TreeFile@
CONST	SEGMENT
??_C@_08JBFACIKL@TreeFile@ DB 'TreeFile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEECDNOJ@PropertyName@
CONST	SEGMENT
??_C@_0N@PEECDNOJ@PropertyName@ DB 'PropertyName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPEBPNJJ@PropertyType@
CONST	SEGMENT
??_C@_0N@FPEBPNJJ@PropertyType@ DB 'PropertyType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOOJPNH@Tree@
CONST	SEGMENT
??_C@_04GDOOJPNH@Tree@ DB 'Tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1
__ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0
__ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1
__ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0
__ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1733 :     }
; 1734 : 
; 1735 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1736 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 949  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
tv377 = -36						; size = 4
__Oldsize$1$ = -32					; size = 4
__Whereoff$1$ = -28					; size = 4
__Constructed_last$ = -28				; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d d8	 mov	 DWORD PTR _this$[ebp], ebx

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 33		 mov	 esi, DWORD PTR [ebx]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx
  00061	89 45 e0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00064	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00069	0f 84 29 01 00
	00		 je	 $LN47@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00072	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	2b ce		 sub	 ecx, esi
  00077	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007c	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 02	 sar	 edx, 2
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00097	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009c	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1689 :             return _Max; // geometric growth would overflow

  000a2	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b f8		 mov	 edi, eax
  000af	eb 49		 jmp	 SHORT $LN44@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b1	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000b4	8b f7		 mov	 esi, edi
  000b6	3b c7		 cmp	 eax, edi
  000b8	0f 43 f0	 cmovae	 esi, eax
  000bb	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000c1	0f 87 d6 00 00
	00		 ja	 $LN48@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000c7	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000ca	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cd	c1 e0 03	 shl	 eax, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d0	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d5	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000dd	83 c4 04	 add	 esp, 4
  000e0	8b f8		 mov	 edi, eax
  000e2	eb 16		 jmp	 SHORT $LN44@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000e4	85 c0		 test	 eax, eax
  000e6	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ee	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000f1	8b f8		 mov	 edi, eax
  000f3	eb 02		 jmp	 SHORT $LN45@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000f5	33 ff		 xor	 edi, edi
$LN45@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f7	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN44@Emplace_re:
  000fa	8b 45 e4	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000fd	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00100	89 7d e8	 mov	 DWORD PTR $T2[ebp], edi

; 786  :         pointer _Constructed_first      = _Constructed_last;
; 787  : 
; 788  :         _TRY_BEGIN

  00103	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010d	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  00110	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00113	89 4d dc	 mov	 DWORD PTR tv377[ebp], ecx
  00116	89 45 e4	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00119	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0011e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00121	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00124	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00126	3b d0		 cmp	 edx, eax
  00128	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0012a	8b d7		 mov	 edx, edi

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  0012c	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0012e	53		 push	 ebx
  0012f	57		 push	 edi
  00130	52		 push	 edx
  00131	51		 push	 ecx
  00132	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00137	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
  0013d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00140	8b 55 e4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00143	53		 push	 ebx
  00144	52		 push	 edx
  00145	50		 push	 eax
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0014c	8b 45 e0	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0014f	83 c4 10	 add	 esp, 16			; 00000010H
  00152	40		 inc	 eax
  00153	8b cb		 mov	 ecx, ebx
  00155	56		 push	 esi
  00156	50		 push	 eax
  00157	57		 push	 edi
  00158	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 806  :         return _Newvec + _Whereoff;

  0015d	8b 45 dc	 mov	 eax, DWORD PTR tv377[ebp]

; 807  :     }

  00160	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00163	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016a	59		 pop	 ecx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);

  00174	8b 45 e4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00177	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	50		 push	 eax
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 801  :         _Al.deallocate(_Newvec, _Newcapacity);

  00181	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  00184	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  0018a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 802  :         _RERAISE;

  0018f	6a 00		 push	 0
  00191	6a 00		 push	 0
  00193	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN47@Emplace_re:

; 778  :             _Xlength();

  00198	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN48@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0019d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN43@Emplace_re:
  001a2	cc		 int	 3
  001a3	cc		 int	 3
  001a4	cc		 int	 3
  001a5	cc		 int	 3
  001a6	cc		 int	 3
  001a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 33		 mov	 esi, DWORD PTR [ebx]
  00015	2b d6		 sub	 edx, esi

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 14 01 00
	00		 je	 $LN68@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b ce		 sub	 ecx, esi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00077	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	83 c4 04	 add	 esp, 4
  00085	8b f8		 mov	 edi, eax
  00087	eb 43		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00089	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0008c	8b f7		 mov	 esi, edi
  0008e	3b c7		 cmp	 eax, edi
  00090	0f 43 f0	 cmovae	 esi, eax
  00093	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00099	0f 87 c4 00 00
	00		 ja	 $LN69@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0009f	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000a2	c1 e0 03	 shl	 eax, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000aa	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b2	83 c4 04	 add	 esp, 4
  000b5	8b f8		 mov	 edi, eax
  000b7	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000b9	85 c0		 test	 eax, eax
  000bb	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c3	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000c6	8b f8		 mov	 edi, eax
  000c8	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000ca	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000cf	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d2	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000d8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  000de	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  000e5	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ec	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ef	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f2	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000f5	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000fa	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000ff	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00106	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0010d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00110	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00113	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00116	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00118	3b c2		 cmp	 eax, edx
  0011a	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0011c	8b c7		 mov	 eax, edi

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  0011e	eb 18		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00120	53		 push	 ebx
  00121	57		 push	 edi
  00122	50		 push	 eax
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00129	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0012c	83 c4 10	 add	 esp, 16			; 00000010H
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00132	83 c0 18	 add	 eax, 24			; 00000018H

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00135	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00138	53		 push	 ebx
  00139	50		 push	 eax
  0013a	52		 push	 edx
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00141	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	40		 inc	 eax
  00148	8b cb		 mov	 ecx, ebx
  0014a	56		 push	 esi
  0014b	50		 push	 eax
  0014c	57		 push	 edi
  0014d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 806  :         return _Newvec + _Whereoff;

  00152	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx

; 807  :     }

  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
$LN68@Emplace_re:

; 778  :             _Xlength();

  0015e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN69@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00163	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN66@Emplace_re:
  00168	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?FloatNumberToString@prt@@YAPBDM@Z
_TEXT	SEGMENT
_fNumber$ = 8						; size = 4
?FloatNumberToString@prt@@YAPBDM@Z PROC			; prt::FloatNumberToString, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fNumber$[ebp]

; 55   : 	static char szString[16+1];
; 56   : 	_snprintf(szString, sizeof(szString), "%f", fNumber);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00018	6a 11		 push	 17			; 00000011H
  0001a	68 00 00 00 00	 push	 OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
  0001f	e8 00 00 00 00	 call	 __snprintf
  00024	83 c4 14	 add	 esp, 20			; 00000014H

; 57   : 	return szString;

  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA

; 58   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?FloatNumberToString@prt@@YAPBDM@Z ENDP			; prt::FloatNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?IntegerNumberToString@prt@@YAPBDH@Z
_TEXT	SEGMENT
_iNumber$ = 8						; size = 4
?IntegerNumberToString@prt@@YAPBDH@Z PROC		; prt::IntegerNumberToString, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	static char szString[16+1];
; 49   : 	_snprintf(szString, sizeof(szString), "%d", iNumber);

  00003	ff 75 08	 push	 DWORD PTR _iNumber$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0000b	6a 11		 push	 17			; 00000011H
  0000d	68 00 00 00 00	 push	 OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
  00012	e8 00 00 00 00	 call	 __snprintf
  00017	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : 	return szString;

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA

; 51   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?IntegerNumberToString@prt@@YAPBDH@Z ENDP		; prt::IntegerNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv184 = 8						; size = 4
_c_rkPPosLeft$ = 8					; size = 4
_c_rkPPosRight$ = 12					; size = 4
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z PROC ; SPixelPosition_CalculateDistanceSq3d, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	float dx=c_rkPPosLeft.x-c_rkPPosRight.x;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c_rkPPosLeft$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_rkPPosRight$[ebp]
  00009	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]

; 18   : 	float dy=c_rkPPosLeft.y-c_rkPPosRight.y;

  0000d	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  00012	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
  00017	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]

; 19   : 	float dz=c_rkPPosLeft.z-c_rkPPosRight.z;

  0001b	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00020	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]

; 20   : 
; 21   : 	return dx*dx+dy*dy+dz*dz;

  00025	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00029	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00031	f3 0f 58 d1	 addss	 xmm2, xmm1
  00035	f3 0f 58 d0	 addss	 xmm2, xmm0
  00039	f3 0f 11 55 08	 movss	 DWORD PTR tv184[ebp], xmm2
  0003e	d9 45 08	 fld	 DWORD PTR tv184[ebp]

; 22   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ENDP ; SPixelPosition_CalculateDistanceSq3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogFarDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogFarDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogFarDistance, COMDAT
; _this$ = ecx

; 12   : 	return m_fFogFarDistance;

  00000	d9 81 28 01 00
	00		 fld	 DWORD PTR [ecx+296]

; 13   : }

  00006	c3		 ret	 0
?GetFogFarDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogFarDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogNearDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogNearDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogNearDistance, COMDAT
; _this$ = ecx

; 7    : 	return m_fFogNearDistance;

  00000	d9 81 24 01 00
	00		 fld	 DWORD PTR [ecx+292]

; 8    : }

  00006	c3		 ret	 0
?GetFogNearDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogNearDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
_TEXT	SEGMENT
_c_pszPropertyType$ = -100				; size = 4
$T2 = -96						; size = 1
_c_pszPropertyName$ = -96				; size = 4
_c_pszDungeonBlockFileName$ = -92			; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z PROC ; prt::PropertyDungeonBlockStringToData, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 273  : 	const char * c_pszPropertyType;
; 274  : 	const char * c_pszPropertyName;
; 275  : 
; 276  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002e	8d 45 9c	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _pData$[ebp]
  00034	8b ce		 mov	 ecx, esi
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003c	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00041	84 c0		 test	 al, al
  00043	0f 84 48 01 00
	00		 je	 $LN126@PropertyDu

; 277  : 		return false;
; 278  : 
; 279  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00049	8d 45 a0	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004c	8b ce		 mov	 ecx, esi
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00054	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00059	84 c0		 test	 al, al
  0005b	0f 84 30 01 00
	00		 je	 $LN126@PropertyDu

; 280  : 		return false;
; 281  : 
; 282  : 	if (strcmp(c_pszPropertyType, "DungeonBlock"))

  00061	8b 45 9c	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL127@PropertyDu:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN128@PropertyDu
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN129@PropertyDu
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN128@PropertyDu
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL127@PropertyDu
$LN129@PropertyDu:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN130@PropertyDu
$LN128@PropertyDu:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN130@PropertyDu:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 f4 00 00
	00		 jne	 $LN126@PropertyDu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 4d a0	 mov	 ecx, DWORD PTR _c_pszPropertyName$[ebp]
  000a0	8b d1		 mov	 edx, ecx
  000a2	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL131@PropertyDu:
  000a5	8a 02		 mov	 al, BYTE PTR [edx]
  000a7	42		 inc	 edx
  000a8	84 c0		 test	 al, al
  000aa	75 f9		 jne	 SHORT $LL131@PropertyDu
  000ac	2b d7		 sub	 edx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	52		 push	 edx
  000af	51		 push	 ecx
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 290  : 	if (!pProperty->GetString("dungeonblockfile", &c_pszDungeonBlockFileName))

  000b7	8d 45 a4	 lea	 eax, DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000ba	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _c_pszDungeonBlockFileName$[ebp], 0
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CJNPGFDA@dungeonblockfile@
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000ce	84 c0		 test	 al, al
  000d0	0f 84 bb 00 00
	00		 je	 $LN126@PropertyDu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d6	8b 55 a4	 mov	 edx, DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000d9	8b ca		 mov	 ecx, edx
  000db	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  000de	66 90		 npad	 2
$LL132@PropertyDu:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	41		 inc	 ecx
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL132@PropertyDu
  000e7	2b ce		 sub	 ecx, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 293  : 	pData->strFileName = c_pszDungeonBlockFileName;

  000e9	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ec	51		 push	 ecx
  000ed	52		 push	 edx
  000ee	8b ce		 mov	 ecx, esi
  000f0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIKCOENH@?4mdatr@
  000fa	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
  000fd	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06OIKCOENH@?4mdatr@+4

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00103	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  0010a	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 6

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00111	66 89 45 dc	 mov	 WORD PTR $T5[ebp+4], ax

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00115	c6 45 de 00	 mov	 BYTE PTR $T5[ebp+6], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  00119	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  0011c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00123	56		 push	 esi
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0012a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0012d	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  00130	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00134	51		 push	 ecx
  00135	50		 push	 eax
  00136	ff 75 a0	 push	 DWORD PTR $T2[ebp]
  00139	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0013c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  00141	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00144	50		 push	 eax
  00145	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  00148	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0014d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00150	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00155	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00158	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0015d	8b 55 ec	 mov	 edx, DWORD PTR $T5[ebp+20]
  00160	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00163	72 28		 jb	 SHORT $LN111@PropertyDu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00165	8b 4d d8	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00168	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00169	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0016b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00171	72 10		 jb	 SHORT $LN121@PropertyDu

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00173	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00176	83 c2 23	 add	 edx, 35			; 00000023H
  00179	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0017e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00181	77 2c		 ja	 SHORT $LN136@PropertyDu
$LN121@PropertyDu:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00183	52		 push	 edx
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0018a	83 c4 08	 add	 esp, 8
$LN111@PropertyDu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 296  : 	return true;

  0018d	b0 01		 mov	 al, 1
  0018f	eb 02		 jmp	 SHORT $LN1@PropertyDu
$LN126@PropertyDu:

; 291  : 		return false;

  00191	32 c0		 xor	 al, al
$LN1@PropertyDu:

; 297  : }

  00193	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00196	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019d	59		 pop	 ecx
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	33 cd		 xor	 ecx, ebp
  001a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
$LN136@PropertyDu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001af	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN134@PropertyDu:
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ENDP ; prt::PropertyDungeonBlockStringToData
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z PROC ; prt::PropertyDungeonBlockDataToString, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 265  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 266  : 	pProperty->PutString("PropertyType", "DungeonBlock");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyDu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyDu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 267  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2306 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyDu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyDu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 268  : 	pProperty->PutString("DungeonBlockFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 269  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 270  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ENDP ; prt::PropertyDungeonBlockDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
_TEXT	SEGMENT
_AmbienceSoundVector$ = -52				; size = 12
_c_pszPlayIntervalVariation$ = -40			; size = 4
_c_pszPlayInterval$ = -36				; size = 4
_c_pszPlayType$ = -32					; size = 4
_c_pszPropertyName$ = -28				; size = 4
_c_pszPropertyType$ = -24				; size = 4
_c_pszMaxVolumeAreaPercentage$ = -20			; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z PROC ; prt::PropertyAmbienceStringToData, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 218  : 	const char * c_pszPropertyType;
; 219  : 	const char * c_pszPropertyName;
; 220  : 
; 221  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00028	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0002b	8d 45 e8	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0003b	84 c0		 test	 al, al
  0003d	0f 84 30 02 00
	00		 je	 $LN405@PropertyAm

; 222  : 		return false;
; 223  : 
; 224  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00043	8d 45 e4	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00046	8b ce		 mov	 ecx, esi
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0004e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00053	84 c0		 test	 al, al
  00055	0f 84 18 02 00
	00		 je	 $LN405@PropertyAm

; 225  : 		return false;
; 226  : 
; 227  : 	if (strcmp(c_pszPropertyType, "Ambience"))

  0005b	8b 45 e8	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08HABDNILH@Ambience@
$LL406@PropertyAm:
  00063	8a 10		 mov	 dl, BYTE PTR [eax]
  00065	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00067	75 1a		 jne	 SHORT $LN407@PropertyAm
  00069	84 d2		 test	 dl, dl
  0006b	74 12		 je	 SHORT $LN408@PropertyAm
  0006d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00070	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00073	75 0e		 jne	 SHORT $LN407@PropertyAm
  00075	83 c0 02	 add	 eax, 2
  00078	83 c1 02	 add	 ecx, 2
  0007b	84 d2		 test	 dl, dl
  0007d	75 e4		 jne	 SHORT $LL406@PropertyAm
$LN408@PropertyAm:
  0007f	33 c0		 xor	 eax, eax
  00081	eb 05		 jmp	 SHORT $LN409@PropertyAm
$LN407@PropertyAm:
  00083	1b c0		 sbb	 eax, eax
  00085	83 c8 01	 or	 eax, 1
$LN409@PropertyAm:
  00088	85 c0		 test	 eax, eax
  0008a	0f 85 e3 01 00
	00		 jne	 $LN405@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00090	8b 55 e4	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  00093	8b ca		 mov	 ecx, edx
  00095	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL410@PropertyAm:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL410@PropertyAm
  0009f	2b cf		 sub	 ecx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a1	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  000a4	51		 push	 ecx
  000a5	52		 push	 edx
  000a6	8b cf		 mov	 ecx, edi
  000a8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 237  : 	const char * c_pszMaxVolumeAreaPercentage = NULL;

  000ad	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000b4	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000bb	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000c2	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 239  : 	if (!pProperty->GetString("PlayType", &c_pszPlayType))

  000c9	8d 45 e0	 lea	 eax, DWORD PTR _c_pszPlayType$[ebp]
  000cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d3	50		 push	 eax
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000e0	84 c0		 test	 al, al
  000e2	0f 84 d2 00 00
	00		 je	 $LN18@PropertyAm

; 240  : 		return false;
; 241  : 	if (!pProperty->GetString("PlayInterval", &c_pszPlayInterval))

  000e8	8d 45 dc	 lea	 eax, DWORD PTR _c_pszPlayInterval$[ebp]
  000eb	8b ce		 mov	 ecx, esi
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  000f3	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000f8	84 c0		 test	 al, al
  000fa	0f 84 ba 00 00
	00		 je	 $LN18@PropertyAm

; 242  : 		return false;
; 243  : 	if (!pProperty->GetString("PlayIntervalVariation", &c_pszPlayIntervalVariation))

  00100	8d 45 d8	 lea	 eax, DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  00103	8b ce		 mov	 ecx, esi
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  0010b	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00110	84 c0		 test	 al, al
  00112	0f 84 a2 00 00
	00		 je	 $LN18@PropertyAm

; 244  : 		return false;
; 245  : 	if (!pProperty->GetString("MaxVolumeAreaPercentage", &c_pszMaxVolumeAreaPercentage))

  00118	8d 45 ec	 lea	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  0011b	8b ce		 mov	 ecx, esi
  0011d	50		 push	 eax
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  00123	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00128	84 c0		 test	 al, al
  0012a	75 07		 jne	 SHORT $LN11@PropertyAm

; 246  : 	{
; 247  : 		pData->fMaxVolumeAreaPercentage = 0.0f;

  0012c	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN11@PropertyAm:

; 248  : 	}
; 249  : 	if (!pProperty->GetVector("AmbienceSoundVector", AmbienceSoundVector))

  00133	8d 45 cc	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  00136	8b ce		 mov	 ecx, esi
  00138	50		 push	 eax
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  0013e	e8 00 00 00 00	 call	 ?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::GetVector
  00143	84 c0		 test	 al, al
  00145	74 73		 je	 SHORT $LN18@PropertyAm

; 250  : 		return false;
; 251  : 
; 252  : 	pData->strPlayType = c_pszPlayType;

  00147	ff 75 e0	 push	 DWORD PTR _c_pszPlayType$[ebp]
  0014a	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0014d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 253  : 	pData->fPlayInterval = atof(c_pszPlayInterval);

  00152	ff 75 dc	 push	 DWORD PTR _c_pszPlayInterval$[ebp]
  00155	e8 00 00 00 00	 call	 _atof

; 254  : 	pData->fPlayIntervalVariation = atof(c_pszPlayIntervalVariation);

  0015a	ff 75 d8	 push	 DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  0015d	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  00160	e8 00 00 00 00	 call	 _atof

; 255  : 	if (c_pszMaxVolumeAreaPercentage)

  00165	8b 45 ec	 mov	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  00168	83 c4 08	 add	 esp, 8
  0016b	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  0016e	85 c0		 test	 eax, eax
  00170	74 0c		 je	 SHORT $LN13@PropertyAm

; 256  : 		pData->fMaxVolumeAreaPercentage = atof(c_pszMaxVolumeAreaPercentage);

  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _atof
  00178	d9 5f 38	 fstp	 DWORD PTR [edi+56]
  0017b	83 c4 04	 add	 esp, 4
$LN13@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0017e	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  00181	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]
  00184	3b f3		 cmp	 esi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  00186	74 2c		 je	 SHORT $LN3@PropertyAm
$LL310@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00188	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0018b	56		 push	 esi
  0018c	3b 47 44	 cmp	 eax, DWORD PTR [edi+68]
  0018f	74 0d		 je	 SHORT $LN324@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00191	8b c8		 mov	 ecx, eax
  00193	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00198	83 47 40 18	 add	 DWORD PTR [edi+64], 24	; 00000018H

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019c	eb 09		 jmp	 SHORT $LN2@PropertyAm
$LN324@PropertyAm:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0019e	50		 push	 eax
  0019f	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  001a2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
$LN2@PropertyAm:

; 154  :         return _Ptr == _Right._Ptr;

  001a7	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]

; 78   :         ++_Ptr;

  001aa	83 c6 18	 add	 esi, 24			; 00000018H

; 154  :         return _Ptr == _Right._Ptr;

  001ad	3b f3		 cmp	 esi, ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  001af	75 d7		 jne	 SHORT $LL310@PropertyAm
  001b1	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN3@PropertyAm:

; 260  : 	return true;

  001b4	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  001b8	eb 0a		 jmp	 SHORT $LN19@PropertyAm
$LN18@PropertyAm:
  001ba	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]
  001bd	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  001c0	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
$LN19@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  001c4	85 f6		 test	 esi, esi
  001c6	0f 84 92 00 00
	00		 je	 $LN333@PropertyAm

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  001cc	3b f3		 cmp	 esi, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  001ce	74 4e		 je	 SHORT $LN339@PropertyAm
$LL340@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  001d0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001d3	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001d6	72 2b		 jb	 SHORT $LN359@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d8	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001da	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e1	72 16		 jb	 SHORT $LN369@PropertyAm

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001e6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001e9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f1	0f 87 90 00 00
	00		 ja	 $LN390@PropertyAm

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001f7	8b c2		 mov	 eax, edx
$LN369@PropertyAm:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001f9	51		 push	 ecx
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00200	83 c4 08	 add	 esp, 8
$LN359@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00203	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0020a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00211	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00214	83 c6 18	 add	 esi, 24			; 00000018H
  00217	3b f3		 cmp	 esi, ebx
  00219	75 b5		 jne	 SHORT $LL340@PropertyAm
  0021b	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN339@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0021e	8b 4d d4	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  00221	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00226	2b ce		 sub	 ecx, esi
  00228	f7 e9		 imul	 ecx
  0022a	c1 fa 02	 sar	 edx, 2
  0022d	8b c2		 mov	 eax, edx
  0022f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00232	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00234	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00237	8b c6		 mov	 eax, esi
  00239	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0023c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00242	72 10		 jb	 SHORT $LN393@PropertyAm

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00244	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00247	83 c1 23	 add	 ecx, 35			; 00000023H
  0024a	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0024f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00252	77 33		 ja	 SHORT $LN390@PropertyAm
$LN393@PropertyAm:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00254	51		 push	 ecx
  00255	56		 push	 esi
  00256	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0025b	83 c4 08	 add	 esp, 8
$LN333@PropertyAm:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 260  : 	return true;

  0025e	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 261  : }

  00261	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00264	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026b	59		 pop	 ecx
  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	5b		 pop	 ebx
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
$LN405@PropertyAm:

; 228  : 		return false;

  00273	32 c0		 xor	 al, al

; 261  : }

  00275	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00278	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0027f	59		 pop	 ecx
  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5b		 pop	 ebx
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
$LN390@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00287	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN412@PropertyAm:
  0028c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ENDP ; prt::PropertyAmbienceStringToData
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pProperty$GSCopy$1$ = -60				; size = 4
tv939 = -56						; size = 4
_AmbienceSoundVector$ = -52				; size = 12
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z PROC ; prt::PropertyAmbienceDataToString, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 197  : 	pProperty->Clear();

  0002d	8b ce		 mov	 ecx, esi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _pData$[ebp]
  00032	89 75 c4	 mov	 DWORD PTR _pProperty$GSCopy$1$[ebp], esi
  00035	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 198  : 	pProperty->PutString("PropertyType", "Ambience");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_08HABDNILH@Ambience@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0004b	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0004f	8b c7		 mov	 eax, edi
  00051	72 02		 jb	 SHORT $LN11@PropertyAm

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00053	8b 07		 mov	 eax, DWORD PTR [edi]
$LN11@PropertyAm:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 199  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00062	83 7f 2c 10	 cmp	 DWORD PTR [edi+44], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00066	8d 47 18	 lea	 eax, DWORD PTR [edi+24]

; 2306 :         if (_Large_string_engaged()) {

  00069	72 02		 jb	 SHORT $LN18@PropertyAm

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@PropertyAm:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 200  : 	pProperty->PutString("PlayType", pData->strPlayType.c_str());

  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 201  : 	pProperty->PutString("PlayInterval", FloatNumberToString(pData->fPlayInterval));

  0007a	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0007f	51		 push	 ecx
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  0008a	83 c4 04	 add	 esp, 4
  0008d	8b ce		 mov	 ecx, esi
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  00095	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 202  : 	pProperty->PutString("PlayIntervalVariation", FloatNumberToString(pData->fPlayIntervalVariation));

  0009a	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0009f	51		 push	 ecx
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b ce		 mov	 ecx, esi
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  000b5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 203  : 	pProperty->PutString("MaxVolumeAreaPercentage", FloatNumberToString(pData->fMaxVolumeAreaPercentage));

  000ba	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  000bf	51		 push	 ecx
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000ca	83 c4 04	 add	 esp, 4
  000cd	8b ce		 mov	 ecx, esi
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  000d5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000da	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000e1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000e8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ef	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 205  : 	CTokenVector AmbienceSoundVector;

  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  000f9	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
  000fc	0f 84 c5 00 00
	00		 je	 $LN3@PropertyAm
$LL37@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00102	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00106	8b d6		 mov	 edx, esi
  00108	72 02		 jb	 SHORT $LN51@PropertyAm

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0010a	8b 16		 mov	 edx, DWORD PTR [esi]
$LN51@PropertyAm:

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0010c	8b ca		 mov	 ecx, edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0010e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  00115	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0011c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00123	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00127	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0012a	89 45 c8	 mov	 DWORD PTR tv939[ebp], eax
  0012d	0f 1f 00	 npad	 3
$LL163@PropertyAm:
  00130	8a 01		 mov	 al, BYTE PTR [ecx]
  00132	41		 inc	 ecx
  00133	84 c0		 test	 al, al
  00135	75 f9		 jne	 SHORT $LL163@PropertyAm
  00137	2b 4d c8	 sub	 ecx, DWORD PTR tv939[ebp]

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013a	51		 push	 ecx
  0013b	52		 push	 edx
  0013c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0013f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00144	8b 45 d0	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  00147	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0014b	3b 45 d4	 cmp	 eax, DWORD PTR _AmbienceSoundVector$[ebp+8]
  0014e	74 26		 je	 SHORT $LN74@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00150	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00154	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0015a	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0015f	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00163	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00166	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  0016b	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00170	83 45 d0 18	 add	 DWORD PTR _AmbienceSoundVector$[ebp+4], 24 ; 00000018H

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00174	eb 10		 jmp	 SHORT $LN73@PropertyAm
$LN74@PropertyAm:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00176	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00179	51		 push	 ecx
  0017a	50		 push	 eax
  0017b	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  0017e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00183	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
$LN73@PropertyAm:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  00186	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0018a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0018d	72 2c		 jb	 SHORT $LN117@PropertyAm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018f	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00192	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00193	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00195	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0019b	72 14		 jb	 SHORT $LN127@PropertyAm

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001a0	83 c2 23	 add	 edx, 35			; 00000023H
  001a3	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ab	0f 87 9e 00 00
	00		 ja	 $LN151@PropertyAm
$LN127@PropertyAm:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001b1	52		 push	 edx
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b8	83 c4 08	 add	 esp, 8
$LN117@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 78   :         ++_Ptr;

  001bb	83 c6 18	 add	 esi, 24			; 00000018H

; 154  :         return _Ptr == _Right._Ptr;

  001be	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  001c1	0f 85 3b ff ff
	ff		 jne	 $LL37@PropertyAm
$LN3@PropertyAm:

; 211  : 	}
; 212  : 	pProperty->PutVector("AmbienceSoundVector", AmbienceSoundVector);

  001c7	8b 4d c4	 mov	 ecx, DWORD PTR _pProperty$GSCopy$1$[ebp]
  001ca	8d 45 cc	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001cd	50		 push	 eax
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  001d3	e8 00 00 00 00	 call	 ?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::PutVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  001d8	8b 45 cc	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001db	85 c0		 test	 eax, eax
  001dd	74 53		 je	 SHORT $LN136@PropertyAm

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  001df	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  001e2	51		 push	 ecx
  001e3	ff 75 d0	 push	 DWORD PTR _AmbienceSoundVector$[ebp+4]
  001e6	50		 push	 eax
  001e7	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001ec	8b 4d d4	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  001ef	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001f4	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001fa	2b ce		 sub	 ecx, esi
  001fc	f7 e9		 imul	 ecx
  001fe	c1 fa 02	 sar	 edx, 2
  00201	8b c2		 mov	 eax, edx
  00203	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00206	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00208	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0020b	8b c6		 mov	 eax, esi
  0020d	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00210	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00216	72 10		 jb	 SHORT $LN154@PropertyAm

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00218	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0021b	83 c1 23	 add	 ecx, 35			; 00000023H
  0021e	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00220	83 c0 fc	 add	 eax, -4			; fffffffcH
  00223	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00226	77 27		 ja	 SHORT $LN151@PropertyAm
$LN154@PropertyAm:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00228	51		 push	 ecx
  00229	56		 push	 esi
  0022a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0022f	83 c4 08	 add	 esp, 8
$LN136@PropertyAm:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 213  : 	return true;

  00232	b0 01		 mov	 al, 1

; 214  : }

  00234	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00237	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023e	59		 pop	 ecx
  0023f	5f		 pop	 edi
  00240	5e		 pop	 esi
  00241	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	33 cd		 xor	 ecx, ebp
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
$LN151@PropertyAm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN165@PropertyAm:
  00254	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ENDP ; prt::PropertyAmbienceDataToString
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z
_TEXT	SEGMENT
_c_pszEffectName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z PROC ; prt::PropertyEffectStringToData, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 170  : 	const char * c_pszPropertyType;
; 171  : 	const char * c_pszPropertyName;
; 172  : 
; 173  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	0f 84 9d 00 00
	00		 je	 $LN19@PropertyEf

; 174  : 		return false;
; 175  : 
; 176  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00023	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00033	84 c0		 test	 al, al
  00035	0f 84 85 00 00
	00		 je	 $LN19@PropertyEf

; 177  : 		return false;
; 178  : 
; 179  : 	if (strcmp(c_pszPropertyType, "Effect"))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06LBEFNKEP@Effect@
$LL20@PropertyEf:
  00043	8a 10		 mov	 dl, BYTE PTR [eax]
  00045	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00047	75 1a		 jne	 SHORT $LN21@PropertyEf
  00049	84 d2		 test	 dl, dl
  0004b	74 12		 je	 SHORT $LN22@PropertyEf
  0004d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00050	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00053	75 0e		 jne	 SHORT $LN21@PropertyEf
  00055	83 c0 02	 add	 eax, 2
  00058	83 c1 02	 add	 ecx, 2
  0005b	84 d2		 test	 dl, dl
  0005d	75 e4		 jne	 SHORT $LL20@PropertyEf
$LN22@PropertyEf:
  0005f	33 c0		 xor	 eax, eax
  00061	eb 05		 jmp	 SHORT $LN23@PropertyEf
$LN21@PropertyEf:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
$LN23@PropertyEf:
  00068	85 c0		 test	 eax, eax
  0006a	75 54		 jne	 SHORT $LN19@PropertyEf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _c_pszPropertyName$[ebp]
  0006f	8b d1		 mov	 edx, ecx
  00071	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL24@PropertyEf:
  00074	8a 02		 mov	 al, BYTE PTR [edx]
  00076	42		 inc	 edx
  00077	84 c0		 test	 al, al
  00079	75 f9		 jne	 SHORT $LL24@PropertyEf
  0007b	2b d7		 sub	 edx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007d	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00080	52		 push	 edx
  00081	51		 push	 ecx
  00082	8b cf		 mov	 ecx, edi
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 187  : 	if (!pProperty->GetString("EffectFile", &c_pszEffectName))

  00089	8d 45 f4	 lea	 eax, DWORD PTR _c_pszEffectName$[ebp]
  0008c	8b ce		 mov	 ecx, esi
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  00094	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00099	84 c0		 test	 al, al
  0009b	74 23		 je	 SHORT $LN19@PropertyEf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 55 f4	 mov	 edx, DWORD PTR _c_pszEffectName$[ebp]
  000a0	8b ca		 mov	 ecx, edx
  000a2	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL25@PropertyEf:
  000a5	8a 01		 mov	 al, BYTE PTR [ecx]
  000a7	41		 inc	 ecx
  000a8	84 c0		 test	 al, al
  000aa	75 f9		 jne	 SHORT $LL25@PropertyEf
  000ac	2b ce		 sub	 ecx, esi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	51		 push	 ecx
  000af	52		 push	 edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 190  : 	pData->strFileName = c_pszEffectName;

  000b0	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b8	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 192  : 	return true;

  000b9	b0 01		 mov	 al, 1

; 193  : }

  000bb	5e		 pop	 esi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN19@PropertyEf:
  000c0	5f		 pop	 edi

; 188  : 		return false;

  000c1	32 c0		 xor	 al, al

; 193  : }

  000c3	5e		 pop	 esi
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ENDP ; prt::PropertyEffectStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z PROC ; prt::PropertyEffectDataToString, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 160  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 161  : 
; 162  : 	pProperty->PutString("PropertyType", "Effect");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06LBEFNKEP@Effect@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyEf

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyEf:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 163  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2306 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyEf

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyEf:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 164  : 	pProperty->PutString("EffectFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 165  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 166  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ENDP ; prt::PropertyEffectDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
_TEXT	SEGMENT
_c_pszShadowFlag$ = -88					; size = 4
_pData$GSCopy$1$ = -84					; size = 4
_c_pszBuildingName$ = -80				; size = 4
_c_pszPropertyName$ = -76				; size = 4
_c_pszPropertyType$ = -72				; size = 4
tv448 = -68						; size = 4
tv445 = -68						; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z PROC ; prt::PropertyBuildingStringToData, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR _pProperty$[ebp]

; 121  : 	const char * c_pszPropertyType;
; 122  : 	const char * c_pszPropertyName;
; 123  : 
; 124  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002d	8d 45 b8	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00030	8b 75 0c	 mov	 esi, DWORD PTR _pData$[ebp]
  00033	8b cf		 mov	 ecx, edi
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003b	89 75 ac	 mov	 DWORD PTR _pData$GSCopy$1$[ebp], esi
  0003e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00043	84 c0		 test	 al, al
  00045	0f 84 6c 01 00
	00		 je	 $LN84@PropertyBu

; 125  : 		return false;
; 126  : 
; 127  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  0004b	8d 45 b4	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004e	8b cf		 mov	 ecx, edi
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00056	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0005b	84 c0		 test	 al, al
  0005d	0f 84 54 01 00
	00		 je	 $LN84@PropertyBu

; 128  : 		return false;
; 129  : 
; 130  : 	if (strcmp(c_pszPropertyType, "Building"))

  00063	8b 45 b8	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08COFDOLHN@Building@
  0006b	0f 1f 44 00 00	 npad	 5
$LL85@PropertyBu:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN86@PropertyBu
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN87@PropertyBu
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN86@PropertyBu
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL85@PropertyBu
$LN87@PropertyBu:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN88@PropertyBu
$LN86@PropertyBu:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN88@PropertyBu:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 1a 01 00
	00		 jne	 $LN84@PropertyBu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009d	8b 55 b4	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  000a0	8b ca		 mov	 ecx, edx
  000a2	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000a5	89 45 bc	 mov	 DWORD PTR tv445[ebp], eax
$LL89@PropertyBu:
  000a8	8a 01		 mov	 al, BYTE PTR [ecx]
  000aa	41		 inc	 ecx
  000ab	84 c0		 test	 al, al
  000ad	75 f9		 jne	 SHORT $LL89@PropertyBu
  000af	2b 4d bc	 sub	 ecx, DWORD PTR tv445[ebp]

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b2	51		 push	 ecx
  000b3	52		 push	 edx
  000b4	8b ce		 mov	 ecx, esi
  000b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 138  : 	if (!pProperty->GetString("BuildingFile", &c_pszBuildingName))

  000bb	8d 45 b0	 lea	 eax, DWORD PTR _c_pszBuildingName$[ebp]
  000be	8b cf		 mov	 ecx, edi
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  000c6	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000cb	84 c0		 test	 al, al
  000cd	0f 84 e4 00 00
	00		 je	 $LN84@PropertyBu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d3	8b 55 b0	 mov	 edx, DWORD PTR _c_pszBuildingName$[ebp]
  000d6	8b ca		 mov	 ecx, edx
  000d8	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000db	89 45 bc	 mov	 DWORD PTR tv448[ebp], eax
  000de	66 90		 npad	 2
$LL90@PropertyBu:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	41		 inc	 ecx
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL90@PropertyBu
  000e7	2b 4d bc	 sub	 ecx, DWORD PTR tv448[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 141  : 	pData->strFileName = c_pszBuildingName;

  000ea	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ed	51		 push	 ecx
  000ee	52		 push	 edx
  000ef	8b ce		 mov	 ecx, esi
  000f1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000f6	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  000f9	56		 push	 esi
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  00100	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00103	6a 06		 push	 6
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKCOENH@?4mdatr@
  0010a	8b c8		 mov	 ecx, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  0010c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00113	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  00118	8b 75 ac	 mov	 esi, DWORD PTR _pData$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0011b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  0011e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00121	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
  00125	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]

; 4596 :         _My_data._Mysize = 0;

  0012a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00131	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00138	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  0013b	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0013e	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0013f	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp+16], xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  00144	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00149	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  0014c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0014f	72 28		 jb	 SHORT $LN68@PropertyBu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00151	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00154	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00155	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00157	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0015d	72 10		 jb	 SHORT $LN78@PropertyBu

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0015f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00162	83 c2 23	 add	 edx, 35			; 00000023H
  00165	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00167	83 c0 fc	 add	 eax, -4			; fffffffcH
  0016a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0016d	77 65		 ja	 SHORT $LN94@PropertyBu
$LN78@PropertyBu:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0016f	52		 push	 edx
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00176	83 c4 08	 add	 esp, 8
$LN68@PropertyBu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  00179	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0017c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00183	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 143  : 
; 144  : 	const char * c_pszShadowFlag;
; 145  : 	if (!pProperty->GetString("ShadowFlag", &c_pszShadowFlag))

  00188	8d 45 a8	 lea	 eax, DWORD PTR _c_pszShadowFlag$[ebp]
  0018b	8b cf		 mov	 ecx, edi
  0018d	50		 push	 eax
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  00193	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00198	84 c0		 test	 al, al
  0019a	75 09		 jne	 SHORT $LN6@PropertyBu

; 146  : 	{
; 147  : 		pData->isShadowFlag = FALSE;

  0019c	33 c0		 xor	 eax, eax

; 152  : 	}
; 153  : 
; 154  : 	return true;

  0019e	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001a1	b0 01		 mov	 al, 1
  001a3	eb 14		 jmp	 SHORT $LN1@PropertyBu
$LN6@PropertyBu:

; 148  : 	}
; 149  : 	else
; 150  : 	{
; 151  : 		pData->isShadowFlag = atoi(c_pszShadowFlag);

  001a5	ff 75 a8	 push	 DWORD PTR _c_pszShadowFlag$[ebp]
  001a8	e8 00 00 00 00	 call	 __atoi64

; 152  : 	}
; 153  : 
; 154  : 	return true;

  001ad	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001b0	83 c4 04	 add	 esp, 4
  001b3	b0 01		 mov	 al, 1
  001b5	eb 02		 jmp	 SHORT $LN1@PropertyBu
$LN84@PropertyBu:

; 139  : 		return false;

  001b7	32 c0		 xor	 al, al
$LN1@PropertyBu:

; 155  : }

  001b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c3	59		 pop	 ecx
  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c9	33 cd		 xor	 ecx, ebp
  001cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
$LN94@PropertyBu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001d4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@PropertyBu:
  001d9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ENDP ; prt::PropertyBuildingStringToData
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z PROC ; prt::PropertyBuildingDataToString, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 110  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 111  : 
; 112  : 	pProperty->PutString("PropertyType", "Building");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08COFDOLHN@Building@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyBu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyBu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 113  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2306 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyBu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyBu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 114  : 	pProperty->PutString("BuildingFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 115  : 	pProperty->PutString("ShadowFlag", IntegerNumberToString(pData->isShadowFlag));

  00052	ff 76 48	 push	 DWORD PTR [esi+72]
  00055	e8 00 00 00 00	 call	 ?IntegerNumberToString@prt@@YAPBDH@Z ; prt::IntegerNumberToString
  0005a	83 c4 04	 add	 esp, 4
  0005d	8b cf		 mov	 ecx, edi
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  00065	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 116  : 	return true;

  0006a	5f		 pop	 edi
  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 117  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ENDP ; prt::PropertyBuildingDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z
_TEXT	SEGMENT
_c_pszTreeVariance$ = -20				; size = 4
_c_pszTreeSize$ = -16					; size = 4
_c_pszTreeName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z PROC ; prt::PropertyTreeStringToData, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 75   : 	const char * c_pszPropertyType;
; 76   : 	const char * c_pszPropertyName;
; 77   : 
; 78   : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	0f 84 d2 00 00
	00		 je	 $LN15@PropertyTr

; 79   : 		return false;
; 80   : 
; 81   : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00023	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00033	84 c0		 test	 al, al
  00035	0f 84 ba 00 00
	00		 je	 $LN15@PropertyTr

; 82   : 		return false;
; 83   : 
; 84   : 	if (strcmp(c_pszPropertyType, "Tree"))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04GDOOJPNH@Tree@
$LL16@PropertyTr:
  00043	8a 10		 mov	 dl, BYTE PTR [eax]
  00045	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00047	75 1a		 jne	 SHORT $LN17@PropertyTr
  00049	84 d2		 test	 dl, dl
  0004b	74 12		 je	 SHORT $LN18@PropertyTr
  0004d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00050	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00053	75 0e		 jne	 SHORT $LN17@PropertyTr
  00055	83 c0 02	 add	 eax, 2
  00058	83 c1 02	 add	 ecx, 2
  0005b	84 d2		 test	 dl, dl
  0005d	75 e4		 jne	 SHORT $LL16@PropertyTr
$LN18@PropertyTr:
  0005f	33 c0		 xor	 eax, eax
  00061	eb 05		 jmp	 SHORT $LN19@PropertyTr
$LN17@PropertyTr:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
$LN19@PropertyTr:
  00068	85 c0		 test	 eax, eax
  0006a	0f 85 85 00 00
	00		 jne	 $LN15@PropertyTr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00070	8b 55 f8	 mov	 edx, DWORD PTR _c_pszPropertyName$[ebp]
  00073	8b ca		 mov	 ecx, edx
  00075	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL20@PropertyTr:
  00078	8a 01		 mov	 al, BYTE PTR [ecx]
  0007a	41		 inc	 ecx
  0007b	84 c0		 test	 al, al
  0007d	75 f9		 jne	 SHORT $LL20@PropertyTr
  0007f	2b cf		 sub	 ecx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00081	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00084	51		 push	 ecx
  00085	52		 push	 edx
  00086	8b cf		 mov	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 94   : 	if (!pProperty->GetString("TreeFile", &c_pszTreeName))

  0008d	8d 45 f4	 lea	 eax, DWORD PTR _c_pszTreeName$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  00098	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0009d	84 c0		 test	 al, al
  0009f	74 54		 je	 SHORT $LN15@PropertyTr

; 95   : 		return false;
; 96   : 	if (!pProperty->GetString("TreeSize", &c_pszTreeSize))

  000a1	8d 45 f0	 lea	 eax, DWORD PTR _c_pszTreeSize$[ebp]
  000a4	8b ce		 mov	 ecx, esi
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  000ac	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000b1	84 c0		 test	 al, al
  000b3	74 40		 je	 SHORT $LN15@PropertyTr

; 97   : 		return false;
; 98   : 	if (!pProperty->GetString("TreeVariance", &c_pszTreeVariance))

  000b5	8d 45 ec	 lea	 eax, DWORD PTR _c_pszTreeVariance$[ebp]
  000b8	8b ce		 mov	 ecx, esi
  000ba	50		 push	 eax
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  000c0	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000c5	84 c0		 test	 al, al
  000c7	74 2c		 je	 SHORT $LN15@PropertyTr

; 100  : 
; 101  : 	pData->strFileName = c_pszTreeName;

  000c9	ff 75 f4	 push	 DWORD PTR _c_pszTreeName$[ebp]
  000cc	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000cf	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 102  : 	pData->fSize = atof(c_pszTreeSize);

  000d4	ff 75 f0	 push	 DWORD PTR _c_pszTreeSize$[ebp]
  000d7	e8 00 00 00 00	 call	 _atof

; 103  : 	pData->fVariance = atof(c_pszTreeVariance);

  000dc	ff 75 ec	 push	 DWORD PTR _c_pszTreeVariance$[ebp]
  000df	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  000e2	e8 00 00 00 00	 call	 _atof
  000e7	83 c4 08	 add	 esp, 8

; 104  : 
; 105  : 	return true;

  000ea	b0 01		 mov	 al, 1
  000ec	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  000ef	5f		 pop	 edi

; 106  : }

  000f0	5e		 pop	 esi
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN15@PropertyTr:
  000f5	5f		 pop	 edi

; 99   : 		return false;

  000f6	32 c0		 xor	 al, al

; 106  : }

  000f8	5e		 pop	 esi
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ENDP ; prt::PropertyTreeStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z PROC ; prt::PropertyTreeDataToString, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 62   : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 63   : 
; 64   : 	pProperty->PutString("PropertyType", "Tree");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_04GDOOJPNH@Tree@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN6@PropertyTr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN6@PropertyTr:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 65   : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0003a	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 2306 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN13@PropertyTr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@PropertyTr:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp

; 67   : 	pProperty->PutString("TreeFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 68   : 	pProperty->PutString("TreeSize", FloatNumberToString(pData->fSize));

  00052	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00057	51		 push	 ecx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00062	83 c4 04	 add	 esp, 4
  00065	8b cf		 mov	 ecx, edi
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  0006d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 69   : 	pProperty->PutString("TreeVariance", FloatNumberToString(pData->fVariance));

  00072	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00077	51		 push	 ecx
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00082	83 c4 04	 add	 esp, 4
  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  0008d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 70   : 	return true;

  00092	5f		 pop	 edi
  00093	b0 01		 mov	 al, 1
  00095	5e		 pop	 esi

; 71   : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ENDP ; prt::PropertyTreeDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyExtension@prt@@YAPBDK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?GetPropertyExtension@prt@@YAPBDK@Z PROC		; prt::GetPropertyExtension, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	if (dwType >= PROPERTY_TYPE_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00006	83 f8 06	 cmp	 eax, 6
  00009	72 07		 jb	 SHORT $LN2@GetPropert

; 41   : 		return c_szPropertyExtension[0];

  0000b	b8 00 00 00 00	 mov	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN2@GetPropert:

; 42   : 
; 43   : 	return c_szPropertyExtension[dwType];

  00012	c1 e0 04	 shl	 eax, 4
  00015	05 00 00 00 00	 add	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetPropertyExtension@prt@@YAPBDK@Z ENDP		; prt::GetPropertyExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyType@prt@@YAKPBD@Z
_TEXT	SEGMENT
_c_szTypeName$ = 8					; size = 4
?GetPropertyType@prt@@YAKPBD@Z PROC			; prt::GetPropertyType, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _c_szTypeName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 f6		 xor	 esi, esi
  0000b	bf 00 00 00 00	 mov	 edi, OFFSET ?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA
$LL4@GetPropert:

; 30   : 	{
; 31   : 		if (!strcmp(c_szPropertyTypeName[i], c_szTypeName))

  00010	8b c3		 mov	 eax, ebx
  00012	8b cf		 mov	 ecx, edi
$LL12@GetPropert:
  00014	8a 11		 mov	 dl, BYTE PTR [ecx]
  00016	3a 10		 cmp	 dl, BYTE PTR [eax]
  00018	75 1a		 jne	 SHORT $LN13@GetPropert
  0001a	84 d2		 test	 dl, dl
  0001c	74 12		 je	 SHORT $LN14@GetPropert
  0001e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00021	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00024	75 0e		 jne	 SHORT $LN13@GetPropert
  00026	83 c1 02	 add	 ecx, 2
  00029	83 c0 02	 add	 eax, 2
  0002c	84 d2		 test	 dl, dl
  0002e	75 e4		 jne	 SHORT $LL12@GetPropert
$LN14@GetPropert:
  00030	33 c0		 xor	 eax, eax
  00032	eb 05		 jmp	 SHORT $LN15@GetPropert
$LN13@GetPropert:
  00034	1b c0		 sbb	 eax, eax
  00036	83 c8 01	 or	 eax, 1
$LN15@GetPropert:
  00039	85 c0		 test	 eax, eax
  0003b	74 10		 je	 SHORT $LN8@GetPropert

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  0003d	46		 inc	 esi
  0003e	83 c7 20	 add	 edi, 32			; 00000020H
  00041	83 fe 06	 cmp	 esi, 6
  00044	72 ca		 jb	 SHORT $LL4@GetPropert

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	33 c0		 xor	 eax, eax
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN8@GetPropert:
  0004d	5f		 pop	 edi

; 32   : 			return i;

  0004e	8b c6		 mov	 eax, esi

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetPropertyType@prt@@YAKPBD@Z ENDP			; prt::GetPropertyType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1736 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1737 :         // orphan all iterators, discard old array, acquire new array
; 1738 :         auto& _My_data    = _Mypair._Myval2;
; 1739 :         pointer& _Myfirst = _My_data._Myfirst;
; 1740 :         pointer& _Mylast  = _My_data._Mylast;
; 1741 :         pointer& _Myend   = _My_data._Myend;
; 1742 : 
; 1743 :         _My_data._Orphan_all();
; 1744 : 
; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 51		 je	 SHORT $LN10@Change_arr

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	ff 77 04	 push	 DWORD PTR [edi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	8b 37		 mov	 esi, DWORD PTR [edi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00024	2b ce		 sub	 ecx, esi
  00026	f7 e9		 imul	 ecx
  00028	c1 fa 02	 sar	 edx, 2
  0002b	8b c2		 mov	 eax, edx
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00035	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN20@Change_arr

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00040	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 2f		 ja	 SHORT $LN17@Change_arr

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00050	8b f2		 mov	 esi, edx
$LN20@Change_arr:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
$LN10@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         _Myfirst = _Newvec;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00063	89 0f		 mov	 DWORD PTR [edi], ecx
  00065	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00068	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0006e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00071	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00074	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007a	5f		 pop	 edi

; 1753 :     }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1681 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN4@vector

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN22@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN19@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN22@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1768 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN4@vector:
  0006e	5e		 pop	 esi

; 717  :     }

  0006f	c3		 ret	 0
$LN19@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 836  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 332  : {

  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00007	8b f2		 mov	 esi, edx

; 2319 :         return _BUF_SIZE <= _Myres;

  00009	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN63@NoExtensio

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 32		 mov	 esi, DWORD PTR [edx]
$LN63@NoExtensio:

; 4271 :         return static_cast<size_type>(

  00011	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 683  :     if (_Hay_size != 0) { // room for match, look for it

  00014	85 c0		 test	 eax, eax
  00016	74 58		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00018	83 c9 ff	 or	 ecx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 684  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001b	48		 dec	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0001c	3b c1		 cmp	 eax, ecx
  0001e	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 684  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00021	03 ce		 add	 ecx, esi

; 454  :         return _Left == _Right;

  00023	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 685  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00026	74 0a		 je	 SHORT $LN55@NoExtensio
$LL16@NoExtensio:

; 687  :             }
; 688  : 
; 689  :             if (_Match_try == _Haystack) {

  00028	3b ce		 cmp	 ecx, esi
  0002a	74 44		 je	 SHORT $LN2@NoExtensio

; 684  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0002c	49		 dec	 ecx

; 454  :         return _Left == _Right;

  0002d	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 685  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00030	75 f6		 jne	 SHORT $LL16@NoExtensio
$LN55@NoExtensio:

; 686  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00032	2b ce		 sub	 ecx, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 335  : 	if (string::npos != npos)

  00034	83 f9 ff	 cmp	 ecx, -1
  00037	74 37		 je	 SHORT $LN2@NoExtensio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00039	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4596 :         _My_data._Mysize = 0;

  00042	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00049	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00050	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00053	39 4a 10	 cmp	 DWORD PTR [edx+16], ecx
  00056	0f 42 4a 10	 cmovb	 ecx, DWORD PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0005a	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0005e	72 02		 jb	 SHORT $LN48@NoExtensio

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00060	8b 12		 mov	 edx, DWORD PTR [edx]
$LN48@NoExtensio:

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00062	51		 push	 ecx
  00063	52		 push	 edx
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 336  : 		return std::string(str, 0, npos);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi

; 339  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN2@NoExtensio:

; 337  : 
; 338  : 	return str;

  00070	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00079	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	5e		 pop	 esi

; 339  : }

  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv533 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv534 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv537 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3152 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3153 :         // append [_Ptr, _Ptr + _Count)
; 3154 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3155 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3156 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2319 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3157 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3158 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3159 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3172 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4490 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv537[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv537[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4494 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv537[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 85   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv534[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv533[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv534[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3163 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4544 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3091 :     _CONSTEXPR20_CONTAINER basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 3091 :     _CONSTEXPR20_CONTAINER basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator
  00017	2b c7		 sub	 eax, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3092 :         return assign(_Ptr);

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 3093 :     }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2849 :         noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2850 :         if (this != _STD addressof(_Right)) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 61		 je	 SHORT $LN43@operator

; 2319 :         return _BUF_SIZE <= _Myres;

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00014	72 27		 jb	 SHORT $LN15@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 12		 jb	 SHORT $LN25@operator

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00021	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00024	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00027	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00029	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002f	77 46		 ja	 SHORT $LN22@operator

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00031	8b c2		 mov	 eax, edx
$LN25@operator:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN15@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004b	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004e	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00051	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00054	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00059	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  0005e	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00065	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006c	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN43@operator:

; 2851 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});
; 2852 :         }
; 2853 : 
; 2854 :         return *this;

  0006f	5f		 pop	 edi
  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi

; 2855 :     }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00077	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@operator:
  0007c	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$1$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2672 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00011	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00017	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2680 : 
; 2681 :         const auto _Left_capacity  = _Left_data._Myres;
; 2682 :         const auto _Right_capacity = _Right_data._Myres;
; 2683 :         // overflow is OK due to max_size() checks:
; 2684 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2685 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2686 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0004b	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  0004e	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00053	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  00058	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0005f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2296 :         value_type* _Result = _Bx._Buf;

  00069	8b f3		 mov	 esi, ebx

; 2319 :         return _BUF_SIZE <= _Myres;

  0006b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN29@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN29@basic_stri:

; 2319 :         return _BUF_SIZE <= _Myres;

  00073	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN34@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN34@basic_stri:

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	57		 push	 edi
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2692 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00092	8b c3		 mov	 eax, ebx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2693 :             return;
; 2694 :         }
; 2695 : 
; 2696 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2697 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000ad	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000b2	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000b7	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000be	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2698 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2699 :             // At this point, we have tested:
; 2700 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2701 :             // therefore: (by De Morgan's Laws)
; 2702 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2703 :             // therefore: (by the distributive property)
; 2704 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2705 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2706 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2707 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2708 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2709 :             _Take_contents(_Right);
; 2710 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	57		 push	 edi

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  000d7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN57@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 36		 mov	 esi, DWORD PTR [esi]
$LN57@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2712 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2713 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000f3	8b c3		 mov	 eax, ebx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2714 :             return;
; 2715 :         }
; 2716 : 
; 2717 :         // can't use either buffer, reallocate
; 2718 :         const auto _Max = max_size();
; 2719 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN64@basic_stri

; 4490 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$1$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN64@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2726 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN72@basic_stri
$LN94@basic_stri:

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN72@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN73@basic_stri

; 85   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 85   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN71@basic_stri
$LN73@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN71@basic_stri:

; 2734 :         _My_data._Mysize = _New_size;

  00172	8b 7d 0c	 mov	 edi, DWORD PTR __New_size$1$[ebp]
  00175	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2297 :         if (_Large_string_engaged()) {

  00178	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 13		 mov	 DWORD PTR [ebx], edx

; 2735 :         _My_data._Myres  = _New_capacity;

  0017d	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 2319 :         return _BUF_SIZE <= _Myres;

  00180	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN78@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 36		 mov	 esi, DWORD PTR [esi]
$LN78@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	56		 push	 esi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  00193	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN85@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	57		 push	 edi
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 2739 :         _Proxy._Release();
; 2740 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c3		 mov	 eax, ebx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2720 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2451 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00018	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0001f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00023	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00026	89 4d 08	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN15@basic_stri

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN15@basic_stri:

; 2928 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2929 : #endif // __cpp_lib_constexpr_string
; 2930 : 
; 2931 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2932 :         // requires it
; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00030	73 1a		 jae	 SHORT $LN12@basic_stri

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00032	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00035	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  0003a	8b c6		 mov	 eax, esi
  0003c	5f		 pop	 edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  00040	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00043	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN12@basic_stri:

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0004e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00053	83 cb 0f	 or	 ebx, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00056	3b d8		 cmp	 ebx, eax
  00058	0f 47 d8	 cmova	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 0d		 jb	 SHORT $LN26@basic_stri

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b c8		 mov	 ecx, eax
  00070	eb 13		 jmp	 SHORT $LN25@basic_stri
$LN26@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00072	85 c0		 test	 eax, eax
  00074	74 0d		 je	 SHORT $LN27@basic_stri

; 85   :         return ::operator new(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0007f	8b c8		 mov	 ecx, eax
  00081	eb 02		 jmp	 SHORT $LN25@basic_stri
$LN27@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00083	33 c9		 xor	 ecx, ecx
$LN25@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00085	8b 45 08	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00088	40		 inc	 eax
  00089	89 0e		 mov	 DWORD PTR [esi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008b	50		 push	 eax
  0008c	57		 push	 edi
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _memcpy
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  00099	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0009c	8b c6		 mov	 eax, esi
  0009e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
