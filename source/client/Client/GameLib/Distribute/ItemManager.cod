; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\Distribute\ItemManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$CSingleton@VCItemManager@@@@UAE@XZ		; CSingleton<CItemManager>::~CSingleton<CItemManager>
PUBLIC	??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z	; CSingleton<CItemManager>::`scalar deleting destructor'
PUBLIC	??0CItemManager@@QAE@XZ				; CItemManager::CItemManager
PUBLIC	??1CItemManager@@UAE@XZ				; CItemManager::~CItemManager
PUBLIC	?Destroy@CItemManager@@QAEXXZ			; CItemManager::Destroy
PUBLIC	?SelectItemData@CItemManager@@QAEHK@Z		; CItemManager::SelectItemData
PUBLIC	?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ ; CItemManager::GetSelectedItemDataPointer
PUBLIC	?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
PUBLIC	?LoadItemDesc@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemDesc
PUBLIC	?LoadItemList@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemList
PUBLIC	?LoadItemTable@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemTable
PUBLIC	?LoadShiningTable@CItemManager@@QAE_NPBD@Z	; CItemManager::LoadShiningTable
PUBLIC	?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z ; CItemManager::GetItemsNameMap
PUBLIC	?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
PUBLIC	?LoadItemScale@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemScale
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
PUBLIC	?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
PUBLIC	??_GCItemManager@@UAEPAXI@Z			; CItemManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
PUBLIC	?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
PUBLIC	?GetHashCode@@YAKPBD@Z				; GetHashCode
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
PUBLIC	??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
PUBLIC	??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A	; CSingleton<CLZO>::ms_singleton
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCItemManager@@@@6B@		; CSingleton<CItemManager>::`vftable'
PUBLIC	??_7CItemManager@@6B@				; CItemManager::`vftable'
PUBLIC	??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@ ; `string'
PUBLIC	??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@ ; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7@				; `string'
PUBLIC	??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@	; `string'
PUBLIC	??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@ ; `string'
PUBLIC	??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@ ; `string'
PUBLIC	??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@	; `string'
PUBLIC	??_C@_0FK@BGOPJJIB@CItemManager?3?3LoadShiningTable?$CI@ ; `string'
PUBLIC	??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CItemManager@@6B@				; CItemManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemManager@@@8			; CItemManager `RTTI Type Descriptor'
PUBLIC	??_R3CItemManager@@8				; CItemManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemManager@@8				; CItemManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemManager@@8			; CItemManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8	; CSingleton<CItemManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCItemManager@@@@@8	; CSingleton<CItemManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCItemManager@@@@8		; CSingleton<CItemManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCItemManager@@@@8		; CSingleton<CItemManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCItemManager@@@@6B@		; CSingleton<CItemManager>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncpy_s:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine
EXTRN	?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CMemoryTextFileLoader::SplitLineByTab
EXTRN	??0CLZObject@@QAE@XZ:PROC			; CLZObject::CLZObject
EXTRN	??1CLZObject@@QAE@XZ:PROC			; CLZObject::~CLZObject
EXTRN	?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z:PROC ; CLZO::Decompress
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Read@CMappedFile@@QAEHPAXH@Z:PROC		; CMappedFile::Read
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CItemData::SetSummary
EXTRN	?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CItemData::SetDescription
EXTRN	?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ:PROC ; CItemData::GetTable
EXTRN	?GetName@CItemData@@QBEPBDXZ:PROC		; CItemData::GetName
EXTRN	?SetDefaultItemData@CItemData@@QAEXPBD0@Z:PROC	; CItemData::SetDefaultItemData
EXTRN	?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z:PROC ; CItemData::SetItemTableData
EXTRN	?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z:PROC ; CItemData::SetItemScale
EXTRN	?SetItemShiningTableData@CItemData@@QAEXEPBD@Z:PROC ; CItemData::SetItemShiningTableData
EXTRN	?New@CItemData@@SAPAV1@XZ:PROC			; CItemData::New
EXTRN	?Delete@CItemData@@SAXPAV1@@Z:PROC		; CItemData::Delete
EXTRN	??_E?$CSingleton@VCItemManager@@@@UAEPAXI@Z:PROC ; CSingleton<CItemManager>::`vector deleting destructor'
EXTRN	??_ECItemManager@@UAEPAXI@Z:PROC		; CItemManager::`vector deleting destructor'
EXTRN	?Vietnam_ConvertWeaponVnum@@YAKK@Z:PROC		; Vietnam_ConvertWeaponVnum
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?USE_VIETNAM_CONVERT_WEAPON_VNUM@@3HA:DWORD	; USE_VIETNAM_CONVERT_WEAPON_VNUM
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A DD 01H DUP (?) ; CSingleton<CLZO>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A DD 01H DUP (?) ; CSingleton<CItemManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCItemManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCItemManager@@@@6B@ DD 00H		; CSingleton<CItemManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCItemManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCItemManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8 ; CSingleton<CItemManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCItemManager@@@@8 DD 00H		; CSingleton<CItemManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCItemManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCItemManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CItemManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCItemManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCItemManager@@@@@8 ; CSingleton<CItemManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CItemManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemManager@@8 DD FLAT:??_R0?AVCItemManager@@@8 ; CItemManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemManager@@8
rdata$r	SEGMENT
??_R2CItemManager@@8 DD FLAT:??_R1A@?0A@EA@CItemManager@@8 ; CItemManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CItemManager@@8
rdata$r	SEGMENT
??_R3CItemManager@@8 DD 00H				; CItemManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemManager@@@8
data$rs	SEGMENT
??_R0?AVCItemManager@@@8 DD FLAT:??_7type_info@@6B@	; CItemManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CItemManager@@6B@
rdata$r	SEGMENT
??_R4CItemManager@@6B@ DD 00H				; CItemManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemManager@@@8
	DD	FLAT:??_R3CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@
CONST	SEGMENT
??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@ DB 'LoadItemS'
	DB	'cale: invalid line %d (%s).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@BGOPJJIB@CItemManager?3?3LoadShiningTable?$CI@
CONST	SEGMENT
??_C@_0FK@BGOPJJIB@CItemManager?3?3LoadShiningTable?$CI@ DB 'CItemManager'
	DB	'::LoadShiningTable(%s) - LoadShiningTable in %d', 0aH, ' - Ro'
	DB	'wSize: %d MaxRowSize: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
CONST	SEGMENT
??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@ DB 'icon/item/%05d.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::'
	DB	'LoadItemTable: invalid item proto type %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::'
	DB	'LoadItemTable: invalid item_proto[%s] STRIDE[%d] != sizeof(SI'
	DB	'temTable)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::L'
	DB	'oadItemTable: invalid item_proto[%s] VERSION[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@
CONST	SEGMENT
??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@ DB 'CItemManager'
	DB	'::LoadItemDesc(c_szFileName=%s) - Load Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@
CONST	SEGMENT
??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@ DB 'd:/ymi'
	DB	'r work/item/weapon/%.5d.gr2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@
CONST	SEGMENT
??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@ DB 'icon/item/%.5d.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@ DB ' CIte'
	DB	'mManager::LoadItemList(%s) - StrangeLine in %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@
CONST	SEGMENT
??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@ DB ' CItemManager:'
	DB	':GetItemDataPointer - FIND ERROR [%d]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@
CONST	SEGMENT
??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@ DB ' CItemManage'
	DB	'r::SelectItemData - FIND ERROR [%d]', 0aH, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?s_adwItemProtoKey@@3PAKA DD 02a4a1H			; s_adwItemProtoKey
	DD	045415aaH
	DD	0185a8be7H
	DD	01aad6abH
_DATA	ENDS
;	COMDAT ??_7CItemManager@@6B@
CONST	SEGMENT
??_7CItemManager@@6B@ DD FLAT:??_R4CItemManager@@6B@	; CItemManager::`vftable'
	DD	FLAT:??_ECItemManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCItemManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCItemManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCItemManager@@@@6B@ ; CSingleton<CItemManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCItemManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@KPBD@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@KPBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@KPBD@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@KPBD@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@KPBD@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@KPBD@1@@Z$0
__ehfuncinfo$??$?0U?$pair@KPBD@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@KPBD@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@KPBD@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@KPBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@KPBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$1
__ehfuncinfo$??$emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@KPBD@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@KPBD@std@@$0A@@?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@KPBD@std@@$0A@@?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@KPBD@std@@$0A@@?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z$1
__ehfuncinfo$??$insert@U?$pair@KPBD@std@@$0A@@?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@U?$pair@KPBD@std@@$0A@@?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@KPBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadItemScale@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?LoadItemScale@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadItemScale@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z$1
__ehfuncinfo$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadShiningTable@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?LoadShiningTable@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadShiningTable@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadItemTable@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$6
__ehfuncinfo$?LoadItemTable@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadItemTable@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadItemList@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$2
__ehfuncinfo$?LoadItemList@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LoadItemList@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadItemDesc@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadItemDesc@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CItemManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItemManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItemManager@@QAE@XZ$0
__ehfuncinfo$??0CItemManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CItemManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CItemData * *,CItemData * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CItemData * *,CItemData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1733 :     }
; 1734 : 
; 1735 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1736 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1603 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         const auto _Scary = _Get_scary();
; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1612 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1616 :             }
; 1617 :         }
; 1618 : 
; 1619 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1620 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 751  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 752  :         }
; 753  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1603 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         const auto _Scary = _Get_scary();
; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1612 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1616 :             }
; 1617 :         }
; 1618 : 
; 1619 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1620 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 949  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	2b d7		 sub	 edx, edi

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cf		 sub	 ecx, edi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 71 01 00
	00		 je	 $LN93@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b cf		 sub	 ecx, edi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00072	bf f0 ff ff ff	 mov	 edi, -16		; fffffff0H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b d8		 mov	 ebx, eax
  00082	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00087	8b cb		 mov	 ecx, ebx
  00089	3b c3		 cmp	 eax, ebx
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00094	0f 87 26 01 00
	00		 ja	 $LN94@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0009a	8d 3c 49	 lea	 edi, DWORD PTR [ecx+ecx*2]
  0009d	c1 e7 03	 shl	 edi, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a0	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  000a6	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b d8		 mov	 ebx, eax
  000b3	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000b5	85 ff		 test	 edi, edi
  000b7	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bf	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000c2	8b d8		 mov	 ebx, eax
  000c4	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000c6	33 db		 xor	 ebx, ebx
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c8	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000cb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ce	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000d4	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  000da	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  000e1	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000eb	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ee	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000f1	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000f6	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000fb	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00102	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00109	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0010c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0010f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00112	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00114	3b c2		 cmp	 eax, edx
  00116	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00118	8b c3		 mov	 eax, ebx

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  0011a	eb 18		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0011c	56		 push	 esi
  0011d	53		 push	 ebx
  0011e	50		 push	 eax
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00125	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00128	83 c4 10	 add	 esp, 16			; 00000010H
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0012e	83 c0 18	 add	 eax, 24			; 00000018H

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00131	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00134	56		 push	 esi
  00135	50		 push	 eax
  00136	52		 push	 edx
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  0013d	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0013f	83 c4 10	 add	 esp, 16			; 00000010H

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00142	85 c9		 test	 ecx, ecx
  00144	74 4f		 je	 SHORT $LN74@Emplace_re

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00146	56		 push	 esi
  00147	ff 76 04	 push	 DWORD PTR [esi+4]
  0014a	51		 push	 ecx
  0014b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00153	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00158	2b 0e		 sub	 ecx, DWORD PTR [esi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0015d	f7 e9		 imul	 ecx
  0015f	c1 fa 02	 sar	 edx, 2
  00162	8b c2		 mov	 eax, edx
  00164	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00167	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00169	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0016c	8b 06		 mov	 eax, DWORD PTR [esi]

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016e	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00171	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00177	72 12		 jb	 SHORT $LN84@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00179	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0017c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0017f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	83 c0 fc	 add	 eax, -4			; fffffffcH
  00184	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00187	77 2d		 ja	 SHORT $LN81@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00189	8b c2		 mov	 eax, edx
$LN84@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0018b	51		 push	 ecx
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00192	83 c4 08	 add	 esp, 8
$LN74@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  00195	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00198	40		 inc	 eax
  00199	89 1e		 mov	 DWORD PTR [esi], ebx
  0019b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001a1	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  001a4	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001a7	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001aa	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001ab	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx

; 807  :     }

  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 08 00	 ret	 8
$LN81@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  001bb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN94@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  001c0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN91@Emplace_re:
  001c5	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0005a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00061	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00068	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN75@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN75@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 753  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 756  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 757  :         this->_Orphan_all();
; 758  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b 07		 mov	 eax, DWORD PTR [edi]
  00009	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00010	75 27		 jne	 SHORT $LN5@Erase_head
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL4@Erase_head:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00016	ff 76 08	 push	 DWORD PTR [esi+8]
  00019	8b cf		 mov	 ecx, edi
  0001b	53		 push	 ebx
  0001c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 18		 push	 24			; 00000018H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00030	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00034	74 e0		 je	 SHORT $LL4@Erase_head
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	5b		 pop	 ebx
$LN5@Erase_head:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00039	6a 18		 push	 24			; 00000018H
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00041	83 c4 08	 add	 esp, 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 760  :     }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 751  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 752  :         }
; 753  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 1092 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 758  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1099 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetHashCode@@YAKPBD@Z
_TEXT	SEGMENT
_pString$ = 8						; size = 4
?GetHashCode@@YAKPBD@Z PROC				; GetHashCode, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 251  : 	   unsigned long i,len;
; 252  : 	   unsigned long ch;
; 253  : 	   unsigned long result;
; 254  : 
; 255  : 	   len     = strlen( pString );

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pString$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000e	66 90		 npad	 2
$LL12@GetHashCod:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@GetHashCod

; 256  : 	   result = 5381;

  00017	bf 05 15 00 00	 mov	 edi, 5381		; 00001505H
  0001c	be 00 00 00 00	 mov	 esi, 0
  00021	2b ca		 sub	 ecx, edx

; 257  : 	   for( i=0; i<len; i++ )

  00023	74 12		 je	 SHORT $LN13@GetHashCod
$LL8@GetHashCod:

; 258  : 	   {
; 259  : 	   	   ch = (unsigned long)pString[i];

  00025	0f be 14 1e	 movsx	 edx, BYTE PTR [esi+ebx]

; 260  : 	   	   result = ((result<< 5) + result) + ch; // hash * 33 + ch

  00029	8b c7		 mov	 eax, edi
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	46		 inc	 esi
  0002f	03 f8		 add	 edi, eax
  00031	03 fa		 add	 edi, edx
  00033	3b f1		 cmp	 esi, ecx
  00035	72 ee		 jb	 SHORT $LL8@GetHashCod
$LN13@GetHashCod:

; 261  : 	   }
; 262  : 
; 263  : 	   return result;
; 264  : }

  00037	8b c7		 mov	 eax, edi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?GetHashCode@@YAKPBD@Z ENDP				; GetHashCode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_c_rstSrc$ = 8						; size = 4
_rstTemp$ = 12						; size = 4
?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z PROC ; __SnapString, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _c_rstSrc$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _rstTemp$[ebp]
  00017	57		 push	 edi

; 191  : 	UINT uSrcLen=c_rstSrc.length();

  00018	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 192  : 	if (uSrcLen<2)

  0001b	83 fa 02	 cmp	 edx, 2
  0001e	0f 82 b9 00 00
	00		 jb	 $LN68@SnapString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00024	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]

; 2305 :         const value_type* _Result = _Bx._Buf;

  00027	8b c1		 mov	 eax, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00029	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0002c	72 02		 jb	 SHORT $LN67@SnapString

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN67@SnapString:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 195  : 	if (c_rstSrc[0]!='"')

  00030	80 38 22	 cmp	 BYTE PTR [eax], 34	; 00000022H
  00033	0f 85 a4 00 00
	00		 jne	 $LN68@SnapString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00039	53		 push	 ebx
  0003a	8b d9		 mov	 ebx, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  0003c	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0003f	72 02		 jb	 SHORT $LN17@SnapString

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00041	8b 19		 mov	 ebx, DWORD PTR [ecx]
$LN17@SnapString:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 204  : 	rstTemp=c_rstSrc.substr(uLeftCut, uRightCut-uLeftCut);

  00043	80 7c 13 ff 22	 cmp	 BYTE PTR [ebx+edx-1], 34 ; 00000022H
  00048	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0004b	0f 45 c2	 cmovne	 eax, edx
  0004e	48		 dec	 eax
  0004f	50		 push	 eax
  00050	6a 01		 push	 1
  00052	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0005b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2850 :         if (this != _STD addressof(_Right)) {

  0005d	5b		 pop	 ebx
  0005e	3b f7		 cmp	 esi, edi
  00060	74 61		 je	 SHORT $LN63@SnapString

; 2319 :         return _BUF_SIZE <= _Myres;

  00062	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00065	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00068	72 27		 jb	 SHORT $LN35@SnapString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0006c	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00073	72 12		 jb	 SHORT $LN45@SnapString

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00075	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00078	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0007b	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00080	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00083	77 6a		 ja	 SHORT $LN42@SnapString

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00085	8b c2		 mov	 eax, edx
$LN45@SnapString:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00087	51		 push	 ecx
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008e	83 c4 08	 add	 esp, 8
$LN35@SnapString:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00091	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00098	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009f	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a2	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000a5	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000a8	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000ad	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000b2	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000b9	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c0	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN63@SnapString:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 204  : 	rstTemp=c_rstSrc.substr(uLeftCut, uRightCut-uLeftCut);

  000c3	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cb	5f		 pop	 edi

; 205  : 	return rstTemp;

  000cc	8b c6		 mov	 eax, esi

; 206  : }

  000ce	5e		 pop	 esi
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
$LN68@SnapString:

; 196  : 		return c_rstSrc;

  000dd	8b c1		 mov	 eax, ecx

; 206  : }

  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	5f		 pop	 edi
  000e3	33 cd		 xor	 ecx, ebp
  000e5	5e		 pop	 esi
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
$LN42@SnapString:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ef	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN69@SnapString:
  000f4	cc		 int	 3
?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ENDP ; __SnapString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1246 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 04		 jb	 SHORT $LN4@insert
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1016 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN79@insert
$LN4@insert:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN94@insert

; 1020 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 85   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	8b cf		 mov	 ecx, edi
  00084	50		 push	 eax
  00085	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00088	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008b	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008e	89 30		 mov	 DWORD PTR [eax], esi

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 816  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN79@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1249 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN94@insert:

; 1624 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN92@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 64   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 457  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 458  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 64   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemManager@@UAEPAXI@Z PROC			; CItemManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemManager@@UAE@XZ	; CItemManager::~CItemManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCItemManager@@UAEPAXI@Z ENDP			; CItemManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemScale@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -464						; size = 4
$T3 = -460						; size = 4
$T4 = -456						; size = 4
$T5 = -452						; size = 4
$T6 = -448						; size = 4
$T7 = -444						; size = 4
$T8 = -440						; size = 4
_kTextFileLoader$ = -436				; size = 16
_pItemData$1$ = -420					; size = 4
_strJob$1$ = -416					; size = 4
_strSex$1$ = -412					; size = 4
_strScaleX$1$ = -408					; size = 4
_strScaleY$1$ = -404					; size = 4
_strScaleZ$1$ = -400					; size = 4
_strPositionX$1$ = -396					; size = 4
_strPositionY$1$ = -392					; size = 4
_strPositionZ$1$ = -388					; size = 4
_this$GSCopy$1$ = -384					; size = 4
_c_szFileName$GSCopy$1$ = -380				; size = 4
_pvData$ = -376						; size = 4
_i$1$ = -372						; size = 4
_j$1$ = -368						; size = 4
_kTokenVector$ = -364					; size = 12
$T9 = -349						; size = 1
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Right_size$1$ = -348					; size = 4
__Result$1$ = -348					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Result$1$ = -344					; size = 4
__Right_size$1$ = -344					; size = 4
_kFile$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemScale@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemScale, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemScale@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 80 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 489  : 	const VOID* pvData;
; 490  : 	CMappedFile kFile;

  00036	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0003c	89 b5 84 fe ff
	ff		 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], esi
  00042	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 491  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  0004d	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00053	50		 push	 eax
  00054	56		 push	 esi
  00055	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00068	84 c0		 test	 al, al
  0006a	75 0b		 jne	 SHORT $LN8@LoadItemSc
  0006c	88 85 a3 fe ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00072	e9 3d 08 00 00	 jmp	 $LN23@LoadItemSc
$LN8@LoadItemSc:

; 492  : 		return false;
; 493  : 
; 494  : 	CMemoryTextFileLoader kTextFileLoader;

  00077	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  0007d	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 495  : 	kTextFileLoader.Bind(kFile.Size(), pvData);

  00082	ff b5 88 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  00088	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0008e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00092	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00097	50		 push	 eax
  00098	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  0009e	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a3	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0
  000ad	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0
  000b7	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 498  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  000c1	33 ff		 xor	 edi, edi
  000c3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c7	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000cd	89 bd 8c fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edi
  000d3	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 f8 06 00
	00		 je	 $LN3@LoadItemSc
$LL4@LoadItemSc:

; 499  : 	{
; 500  : 		if (!kTextFileLoader.SplitLineByTab(i, &kTokenVector))

  000e0	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _kTokenVector$[ebp]
  000e6	50		 push	 eax
  000e7	57		 push	 edi
  000e8	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000ee	e8 00 00 00 00	 call	 ?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CMemoryTextFileLoader::SplitLineByTab
  000f3	84 c0		 test	 al, al
  000f5	0f 84 c3 06 00
	00		 je	 $LN2@LoadItemSc
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fb	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00101	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00106	8b b5 94 fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  0010c	2b ce		 sub	 ecx, esi
  0010e	f7 e9		 imul	 ecx
  00110	c1 fa 02	 sar	 edx, 2
  00113	8b c2		 mov	 eax, edx
  00115	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00118	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 503  : 		if (kTokenVector.size() < ITEMSCALE_NUM)

  0011a	83 f8 09	 cmp	 eax, 9
  0011d	73 19		 jae	 SHORT $LN10@LoadItemSc

; 504  : 		{
; 505  : 			TraceError("LoadItemScale: invalid line %d (%s).", i, c_szFileName);

  0011f	ff b5 84 fe ff
	ff		 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  00125	57		 push	 edi
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@
  0012b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 			continue;

  00133	e9 86 06 00 00	 jmp	 $LN2@LoadItemSc
$LN10@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00138	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 518  : 		for (int j = 0; j < 5; ++j)

  0013b	33 ff		 xor	 edi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0013d	89 85 60 fe ff
	ff		 mov	 DWORD PTR _strJob$1$[ebp], eax
  00143	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  00146	89 85 64 fe ff
	ff		 mov	 DWORD PTR _strSex$1$[ebp], eax
  0014c	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  0014f	89 85 68 fe ff
	ff		 mov	 DWORD PTR _strScaleX$1$[ebp], eax
  00155	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  00158	89 85 6c fe ff
	ff		 mov	 DWORD PTR _strScaleY$1$[ebp], eax
  0015e	8d 46 78	 lea	 eax, DWORD PTR [esi+120]
  00161	89 85 70 fe ff
	ff		 mov	 DWORD PTR _strScaleZ$1$[ebp], eax
  00167	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  0016d	89 85 74 fe ff
	ff		 mov	 DWORD PTR _strPositionX$1$[ebp], eax
  00173	8d 86 a8 00 00
	00		 lea	 eax, DWORD PTR [esi+168]
  00179	89 85 78 fe ff
	ff		 mov	 DWORD PTR _strPositionY$1$[ebp], eax
  0017f	8d 86 c0 00 00
	00		 lea	 eax, DWORD PTR [esi+192]
  00185	89 85 7c fe ff
	ff		 mov	 DWORD PTR _strPositionZ$1$[ebp], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 518  : 		for (int j = 0; j < 5; ++j)

  0018b	89 bd 90 fe ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edi
$LL7@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00191	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00195	72 02		 jb	 SHORT $LN53@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00197	8b 36		 mov	 esi, DWORD PTR [esi]
$LN53@LoadItemSc:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 520  : 			CItemData * pItemData = MakeItemData(atoi(kTokenVector[ITEMSCALE_VNUM].c_str()) + j);

  00199	56		 push	 esi
  0019a	e8 00 00 00 00	 call	 __atoi64
  0019f	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001a5	83 c4 04	 add	 esp, 4
  001a8	03 c7		 add	 eax, edi
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  001b0	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR _strPositionZ$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  001b6	83 ec 18	 sub	 esp, 24			; 00000018H
  001b9	8b fc		 mov	 edi, esp
  001bb	89 85 5c fe ff
	ff		 mov	 DWORD PTR _pItemData$1$[ebp], eax
  001c1	89 a5 48 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  001c7	8b ca		 mov	 ecx, edx
  001c9	89 95 a4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001cf	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  001d5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  001dc	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  001e3	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  001e7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ea	89 85 a8 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  001f0	72 08		 jb	 SHORT $LN71@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001f2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001f4	89 8d a4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN71@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  001fa	83 f8 10	 cmp	 eax, 16			; 00000010H
  001fd	73 0d		 jae	 SHORT $LN68@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ff	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00202	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00207	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  0020a	eb 5c		 jmp	 SHORT $LN67@LoadItemSc
$LN68@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0020c	8b f0		 mov	 esi, eax
  0020e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00213	83 ce 0f	 or	 esi, 15			; 0000000fH
  00216	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0021c	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0021f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00222	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00227	72 0d		 jb	 SHORT $LN82@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0022f	83 c4 04	 add	 esp, 4
  00232	8b c8		 mov	 ecx, eax
  00234	eb 13		 jmp	 SHORT $LN81@LoadItemSc
$LN82@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00236	85 c0		 test	 eax, eax
  00238	74 0d		 je	 SHORT $LN83@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00240	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00243	8b c8		 mov	 ecx, eax
  00245	eb 02		 jmp	 SHORT $LN81@LoadItemSc
$LN83@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00247	33 c9		 xor	 ecx, ecx
$LN81@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00249	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0024f	40		 inc	 eax
  00250	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00252	50		 push	 eax
  00253	ff b5 a4 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 _memcpy
  0025f	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN67@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00268	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR _strPositionY$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0026e	83 ec 18	 sub	 esp, 24			; 00000018H
  00271	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00274	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00276	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00279	8b fc		 mov	 edi, esp
  0027b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0027f	89 a5 44 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00285	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0028b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00291	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00298	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  0029f	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  002a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002a6	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  002ac	72 08		 jb	 SHORT $LN103@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  002ae	8b 0a		 mov	 ecx, DWORD PTR [edx]
  002b0	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN103@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  002b6	83 f8 10	 cmp	 eax, 16			; 00000010H
  002b9	73 0d		 jae	 SHORT $LN100@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002bb	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  002be	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002c3	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  002c6	eb 5c		 jmp	 SHORT $LN99@LoadItemSc
$LN100@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  002c8	8b f0		 mov	 esi, eax
  002ca	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  002cf	83 ce 0f	 or	 esi, 15			; 0000000fH
  002d2	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  002d8	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  002db	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002de	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002e3	72 0d		 jb	 SHORT $LN114@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002eb	83 c4 04	 add	 esp, 4
  002ee	8b c8		 mov	 ecx, eax
  002f0	eb 13		 jmp	 SHORT $LN113@LoadItemSc
$LN114@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  002f2	85 c0		 test	 eax, eax
  002f4	74 0d		 je	 SHORT $LN115@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002fc	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  002ff	8b c8		 mov	 ecx, eax
  00301	eb 02		 jmp	 SHORT $LN113@LoadItemSc
$LN115@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00303	33 c9		 xor	 ecx, ecx
$LN113@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00305	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0030b	40		 inc	 eax
  0030c	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0030e	50		 push	 eax
  0030f	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00315	51		 push	 ecx
  00316	e8 00 00 00 00	 call	 _memcpy
  0031b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00321	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN99@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00324	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _strPositionX$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0032a	83 ec 18	 sub	 esp, 24			; 00000018H
  0032d	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00330	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00332	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00335	8b fc		 mov	 edi, esp
  00337	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0033b	89 a5 40 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00341	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00347	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  0034d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00354	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  0035b	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0035f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00362	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  00368	72 08		 jb	 SHORT $LN135@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0036a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0036c	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN135@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00372	83 f8 10	 cmp	 eax, 16			; 00000010H
  00375	73 0d		 jae	 SHORT $LN132@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00377	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  0037a	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0037f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  00382	eb 5c		 jmp	 SHORT $LN131@LoadItemSc
$LN132@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00384	8b f0		 mov	 esi, eax
  00386	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0038b	83 ce 0f	 or	 esi, 15			; 0000000fH
  0038e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00394	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00397	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0039a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0039f	72 0d		 jb	 SHORT $LN146@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003a7	83 c4 04	 add	 esp, 4
  003aa	8b c8		 mov	 ecx, eax
  003ac	eb 13		 jmp	 SHORT $LN145@LoadItemSc
$LN146@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  003ae	85 c0		 test	 eax, eax
  003b0	74 0d		 je	 SHORT $LN147@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003b8	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  003bb	8b c8		 mov	 ecx, eax
  003bd	eb 02		 jmp	 SHORT $LN145@LoadItemSc
$LN147@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  003bf	33 c9		 xor	 ecx, ecx
$LN145@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  003c1	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  003c7	40		 inc	 eax
  003c8	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003ca	50		 push	 eax
  003cb	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  003d1	51		 push	 ecx
  003d2	e8 00 00 00 00	 call	 _memcpy
  003d7	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  003dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN131@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  003e0	8b 95 70 fe ff
	ff		 mov	 edx, DWORD PTR _strScaleZ$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  003e6	83 ec 18	 sub	 esp, 24			; 00000018H
  003e9	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  003ec	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  003ee	89 77 14	 mov	 DWORD PTR [edi+20], esi
  003f1	8b fc		 mov	 edi, esp
  003f3	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003f7	89 a5 3c fe ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  003fd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00403	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00409	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00410	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  00417	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0041b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0041e	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  00424	72 08		 jb	 SHORT $LN167@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00426	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00428	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN167@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  0042e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00431	73 0d		 jae	 SHORT $LN164@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00433	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00436	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0043b	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  0043e	eb 5c		 jmp	 SHORT $LN163@LoadItemSc
$LN164@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00440	8b f0		 mov	 esi, eax
  00442	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00447	83 ce 0f	 or	 esi, 15			; 0000000fH
  0044a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00450	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00453	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00456	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0045b	72 0d		 jb	 SHORT $LN178@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0045d	50		 push	 eax
  0045e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00463	83 c4 04	 add	 esp, 4
  00466	8b c8		 mov	 ecx, eax
  00468	eb 13		 jmp	 SHORT $LN177@LoadItemSc
$LN178@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0046a	85 c0		 test	 eax, eax
  0046c	74 0d		 je	 SHORT $LN179@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  0046e	50		 push	 eax
  0046f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00474	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00477	8b c8		 mov	 ecx, eax
  00479	eb 02		 jmp	 SHORT $LN177@LoadItemSc
$LN179@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0047b	33 c9		 xor	 ecx, ecx
$LN177@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0047d	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00483	40		 inc	 eax
  00484	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00486	50		 push	 eax
  00487	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  0048d	51		 push	 ecx
  0048e	e8 00 00 00 00	 call	 _memcpy
  00493	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00499	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN163@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0049c	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _strScaleY$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  004a2	83 ec 18	 sub	 esp, 24			; 00000018H
  004a5	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  004a8	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  004aa	89 77 14	 mov	 DWORD PTR [edi+20], esi
  004ad	8b fc		 mov	 edi, esp
  004af	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  004b3	89 a5 38 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  004b9	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  004bf	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  004c5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  004cc	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  004d3	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  004d7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004da	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  004e0	72 08		 jb	 SHORT $LN199@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  004e2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  004e4	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN199@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  004ea	83 f8 10	 cmp	 eax, 16			; 00000010H
  004ed	73 0d		 jae	 SHORT $LN196@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004ef	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  004f2	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004f7	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  004fa	eb 5c		 jmp	 SHORT $LN195@LoadItemSc
$LN196@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  004fc	8b f0		 mov	 esi, eax
  004fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00503	83 ce 0f	 or	 esi, 15			; 0000000fH
  00506	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0050c	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0050f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00512	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00517	72 0d		 jb	 SHORT $LN210@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00519	50		 push	 eax
  0051a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0051f	83 c4 04	 add	 esp, 4
  00522	8b c8		 mov	 ecx, eax
  00524	eb 13		 jmp	 SHORT $LN209@LoadItemSc
$LN210@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00526	85 c0		 test	 eax, eax
  00528	74 0d		 je	 SHORT $LN211@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  0052a	50		 push	 eax
  0052b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00530	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00533	8b c8		 mov	 ecx, eax
  00535	eb 02		 jmp	 SHORT $LN209@LoadItemSc
$LN211@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00537	33 c9		 xor	 ecx, ecx
$LN209@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00539	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0053f	40		 inc	 eax
  00540	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00542	50		 push	 eax
  00543	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00549	51		 push	 ecx
  0054a	e8 00 00 00 00	 call	 _memcpy
  0054f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00555	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN195@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00558	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR _strScaleX$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0055e	83 ec 18	 sub	 esp, 24			; 00000018H
  00561	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00564	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00566	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00569	8b fc		 mov	 edi, esp
  0056b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0056f	89 a5 34 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00575	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0057b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00581	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00588	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  0058f	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00593	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00596	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  0059c	72 08		 jb	 SHORT $LN231@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0059e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005a0	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN231@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  005a6	83 f8 10	 cmp	 eax, 16			; 00000010H
  005a9	73 0d		 jae	 SHORT $LN228@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005ab	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  005ae	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005b3	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  005b6	eb 5c		 jmp	 SHORT $LN227@LoadItemSc
$LN228@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  005b8	8b f0		 mov	 esi, eax
  005ba	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  005bf	83 ce 0f	 or	 esi, 15			; 0000000fH
  005c2	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  005c8	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  005cb	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005d3	72 0d		 jb	 SHORT $LN242@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005d5	50		 push	 eax
  005d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005db	83 c4 04	 add	 esp, 4
  005de	8b c8		 mov	 ecx, eax
  005e0	eb 13		 jmp	 SHORT $LN241@LoadItemSc
$LN242@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  005e2	85 c0		 test	 eax, eax
  005e4	74 0d		 je	 SHORT $LN243@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  005e6	50		 push	 eax
  005e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005ec	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  005ef	8b c8		 mov	 ecx, eax
  005f1	eb 02		 jmp	 SHORT $LN241@LoadItemSc
$LN243@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  005f3	33 c9		 xor	 ecx, ecx
$LN241@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  005f5	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  005fb	40		 inc	 eax
  005fc	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005fe	50		 push	 eax
  005ff	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 _memcpy
  0060b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00611	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN227@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00614	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _strSex$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0061a	83 ec 18	 sub	 esp, 24			; 00000018H
  0061d	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00620	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00622	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00625	8b fc		 mov	 edi, esp
  00627	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0062b	89 a5 30 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00631	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00637	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  0063d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00644	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  0064b	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0064f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00652	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  00658	72 08		 jb	 SHORT $LN263@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0065a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0065c	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN263@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00662	83 f8 10	 cmp	 eax, 16			; 00000010H
  00665	73 0d		 jae	 SHORT $LN260@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00667	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  0066a	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0066f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  00672	eb 5c		 jmp	 SHORT $LN259@LoadItemSc
$LN260@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00674	8b f0		 mov	 esi, eax
  00676	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0067b	83 ce 0f	 or	 esi, 15			; 0000000fH
  0067e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00684	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00687	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0068a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0068f	72 0d		 jb	 SHORT $LN274@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00691	50		 push	 eax
  00692	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00697	83 c4 04	 add	 esp, 4
  0069a	8b c8		 mov	 ecx, eax
  0069c	eb 13		 jmp	 SHORT $LN273@LoadItemSc
$LN274@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0069e	85 c0		 test	 eax, eax
  006a0	74 0d		 je	 SHORT $LN275@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  006a2	50		 push	 eax
  006a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  006a8	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  006ab	8b c8		 mov	 ecx, eax
  006ad	eb 02		 jmp	 SHORT $LN273@LoadItemSc
$LN275@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  006af	33 c9		 xor	 ecx, ecx
$LN273@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  006b1	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  006b7	40		 inc	 eax
  006b8	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  006ba	50		 push	 eax
  006bb	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  006c1	51		 push	 ecx
  006c2	e8 00 00 00 00	 call	 _memcpy
  006c7	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  006cd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN259@LoadItemSc:

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  006d0	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _strJob$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  006d6	83 ec 18	 sub	 esp, 24			; 00000018H
  006d9	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  006dc	8b ca		 mov	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  006de	89 77 14	 mov	 DWORD PTR [edi+20], esi
  006e1	8b fc		 mov	 edi, esp
  006e3	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  006e7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  006ed	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  006f3	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  006fa	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2306 :         if (_Large_string_engaged()) {

  00701	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00705	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00708	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2306 :         if (_Large_string_engaged()) {

  0070e	72 08		 jb	 SHORT $LN295@LoadItemSc

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00710	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00712	89 8d a8 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN295@LoadItemSc:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00718	83 f8 10	 cmp	 eax, 16			; 00000010H
  0071b	73 0d		 jae	 SHORT $LN292@LoadItemSc

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0071d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00720	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00725	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2937 :             return;

  00728	eb 5c		 jmp	 SHORT $LN291@LoadItemSc
$LN292@LoadItemSc:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0072a	8b f0		 mov	 esi, eax
  0072c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00731	83 ce 0f	 or	 esi, 15			; 0000000fH
  00734	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0073a	0f 47 f0	 cmova	 esi, eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0073d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00740	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00745	72 0d		 jb	 SHORT $LN306@LoadItemSc

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00747	50		 push	 eax
  00748	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0074d	83 c4 04	 add	 esp, 4
  00750	8b c8		 mov	 ecx, eax
  00752	eb 13		 jmp	 SHORT $LN305@LoadItemSc
$LN306@LoadItemSc:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00754	85 c0		 test	 eax, eax
  00756	74 0d		 je	 SHORT $LN307@LoadItemSc

; 85   :         return ::operator new(_Bytes);

  00758	50		 push	 eax
  00759	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0075e	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00761	8b c8		 mov	 ecx, eax
  00763	eb 02		 jmp	 SHORT $LN305@LoadItemSc
$LN307@LoadItemSc:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00765	33 c9		 xor	 ecx, ecx
$LN305@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00767	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0076d	40		 inc	 eax
  0076e	89 0f		 mov	 DWORD PTR [edi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00770	50		 push	 eax
  00771	ff b5 a8 fe ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00777	51		 push	 ecx
  00778	e8 00 00 00 00	 call	 _memcpy
  0077d	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00783	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN291@LoadItemSc:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 521  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00786	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _pItemData$1$[ebp]
  0078c	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0078f	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00792	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00796	e8 00 00 00 00	 call	 ?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ; CItemData::SetItemScale
  0079b	8b bd 90 fe ff
	ff		 mov	 edi, DWORD PTR _j$1$[ebp]
  007a1	47		 inc	 edi
  007a2	89 bd 90 fe ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edi
  007a8	83 ff 05	 cmp	 edi, 5
  007ab	7d 0b		 jge	 SHORT $LN397@LoadItemSc

; 518  : 		for (int j = 0; j < 5; ++j)

  007ad	8b b5 94 fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  007b3	e9 d9 f9 ff ff	 jmp	 $LL7@LoadItemSc
$LN397@LoadItemSc:
  007b8	8b bd 8c fe ff
	ff		 mov	 edi, DWORD PTR _i$1$[ebp]
$LN2@LoadItemSc:

; 498  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  007be	47		 inc	 edi
  007bf	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  007c5	89 bd 8c fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edi
  007cb	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  007d0	3b f8		 cmp	 edi, eax
  007d2	0f 82 08 f9 ff
	ff		 jb	 $LL4@LoadItemSc
$LN3@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  007d8	8b b5 94 fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 525  : 	return true;

  007de	c6 85 a3 fe ff
	ff 01		 mov	 BYTE PTR $T9[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  007e5	85 f6		 test	 esi, esi
  007e7	0f 84 bc 00 00
	00		 je	 $LN316@LoadItemSc

; 1764 :             _Destroy(_Myfirst, _Mylast);

  007ed	8b bd 98 fe ff
	ff		 mov	 edi, DWORD PTR _kTokenVector$[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  007f3	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  007f5	74 51		 je	 SHORT $LN322@LoadItemSc
$LL323@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  007f7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  007fa	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  007fd	72 2b		 jb	 SHORT $LN342@LoadItemSc
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007ff	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00801	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00802	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00808	72 16		 jb	 SHORT $LN352@LoadItemSc

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0080a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0080d	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00810	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00812	83 c0 fc	 add	 eax, -4			; fffffffcH
  00815	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00818	0f 87 c4 00 00
	00		 ja	 $LN373@LoadItemSc

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0081e	8b c2		 mov	 eax, edx
$LN352@LoadItemSc:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00820	51		 push	 ecx
  00821	50		 push	 eax
  00822	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00827	83 c4 08	 add	 esp, 8
$LN342@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0082a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00831	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00838	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0083b	83 c6 18	 add	 esi, 24			; 00000018H
  0083e	3b f7		 cmp	 esi, edi
  00840	75 b5		 jne	 SHORT $LL323@LoadItemSc
  00842	8b b5 94 fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
$LN322@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00848	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+8]
  0084e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00853	2b ce		 sub	 ecx, esi
  00855	f7 e9		 imul	 ecx
  00857	c1 fa 02	 sar	 edx, 2
  0085a	8b c2		 mov	 eax, edx
  0085c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0085f	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00861	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00864	8b c6		 mov	 eax, esi
  00866	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00869	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0086f	72 10		 jb	 SHORT $LN376@LoadItemSc

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00871	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00874	83 c1 23	 add	 ecx, 35			; 00000023H
  00877	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00879	83 c0 fc	 add	 eax, -4			; fffffffcH
  0087c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0087f	77 61		 ja	 SHORT $LN373@LoadItemSc
$LN376@LoadItemSc:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00881	51		 push	 ecx
  00882	56		 push	 esi
  00883	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00888	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0088b	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0

; 1768 :             _Mylast  = nullptr;

  00895	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  0089f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
$LN316@LoadItemSc:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 525  : 	return true;

  008a9	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  008af	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN23@LoadItemSc:
  008b4	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  008ba	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  008bf	8a 85 a3 fe ff
	ff		 mov	 al, BYTE PTR $T9[ebp]

; 526  : }

  008c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  008c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  008cf	59		 pop	 ecx
  008d0	5f		 pop	 edi
  008d1	5e		 pop	 esi
  008d2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008d5	33 cd		 xor	 ecx, ebp
  008d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008dc	8b e5		 mov	 esp, ebp
  008de	5d		 pop	 ebp
  008df	c2 04 00	 ret	 4
$LN373@LoadItemSc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008e2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN399@LoadItemSc:
  008e7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$3:
  00021	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$4:
  0002c	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$5:
  00037	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$6:
  00042	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$7:
  0004d	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$8:
  00058	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$9:
  00063	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
__ehhandler$?LoadItemScale@CItemManager@@QAE_NPBD@Z:
  00073	90		 npad	 1
  00074	90		 npad	 1
  00075	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00079	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0007c	8b 8a 30 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-464]
  00082	33 c8		 xor	 ecx, eax
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0008c	33 c8		 xor	 ecx, eax
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemScale@CItemManager@@QAE_NPBD@Z
  00098	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemScale@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemScale
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z
_TEXT	SEGMENT
__Loc$1 = -20						; size = 12
$T2 = -16						; size = 8
$T3 = -8						; size = 8
_dwIndex$ = 8						; size = 4
?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z PROC	; CItemManager::MakeItemData, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	8d 45 08	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 90   : 	TItemMap::iterator f = m_ItemMap.find(dwIndex);

  0000c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000f	8d 45 ec	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 45 f4	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _dwIndex$[ebp]
  00020	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00024	75 14		 jne	 SHORT $LN40@MakeItemDa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00026	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00029	72 0f		 jb	 SHORT $LN40@MakeItemDa

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002b	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 92   : 	if (m_ItemMap.end() == f)

  0002d	74 0b		 je	 SHORT $LN40@MakeItemDa

; 99   : 	}
; 100  : 
; 101  : 	return f->second;

  0002f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00032	5f		 pop	 edi

; 102  : }

  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN40@MakeItemDa:
  0003a	56		 push	 esi

; 93   : 	{
; 94   : 		CItemData * pItemData = CItemData::New();

  0003b	e8 00 00 00 00	 call	 ?New@CItemData@@SAPAV1@XZ ; CItemData::New
  00040	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00042	89 5d f8	 mov	 DWORD PTR $T3[ebp], ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 96   : 		m_ItemMap.insert(TItemMap::value_type(dwIndex, pItemData));

  00045	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00048	89 75 fc	 mov	 DWORD PTR $T3[ebp+4], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 96   : 		m_ItemMap.insert(TItemMap::value_type(dwIndex, pItemData));

  0004b	50		 push	 eax
  0004c	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0004f	8b cf		 mov	 ecx, edi
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>

; 97   : 
; 98   : 		return pItemData;

  00057	8b c6		 mov	 eax, esi
  00059	5e		 pop	 esi
  0005a	5f		 pop	 edi

; 102  : }

  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ENDP	; CItemManager::MakeItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z
_TEXT	SEGMENT
$T5 = -36						; size = 8
__Myhead$1$ = -28					; size = 4
_<begin>$L0$6 = -24					; size = 4
__Loc$1$ = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inMap$ = 8						; size = 4
?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z PROC ; CItemManager::GetItemsNameMap, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1350 :         auto _Head = _Scary->_Myhead;

  0002a	8b 5d 08	 mov	 ebx, DWORD PTR _inMap$[ebp]

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0002d	8b cb		 mov	 ecx, ebx
  0002f	8b 33		 mov	 esi, DWORD PTR [ebx]
  00031	ff 76 04	 push	 DWORD PTR [esi+4]
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >

; 1352 :         _Head->_Parent  = _Head;

  0003a	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1353 :         _Head->_Left    = _Head;

  0003d	89 36		 mov	 DWORD PTR [esi], esi

; 1354 :         _Head->_Right   = _Head;

  0003f	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1355 :         _Scary->_Mysize = 0;

  00042	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1162 :         return _Unchecked_iterator(_Get_scary()->_Myhead->_Left, nullptr);

  00049	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004c	8b 36		 mov	 esi, DWORD PTR [esi]
  0004e	89 75 e8	 mov	 DWORD PTR _<begin>$L0$6[ebp], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 47   : 	for (auto& it : m_ItemMap)

  00051	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00055	0f 85 00 01 00
	00		 jne	 $LN3@GetItemsNa
  0005b	0f 1f 44 00 00	 npad	 5
$LL17@GetItemsNa:

; 49   : 		inMap.insert(std::make_pair(it.first, it.second->GetName()));

  00060	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00063	e8 00 00 00 00	 call	 ?GetName@CItemData@@QBEPBDXZ ; CItemData::GetName
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00068	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0006b	33 f6		 xor	 esi, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 49   : 		inMap.insert(std::make_pair(it.first, it.second->GetName()));

  0006d	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00070	8b 45 08	 mov	 eax, DWORD PTR _inMap$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b d1		 mov	 edx, ecx
  00077	89 4d e4	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
  0007a	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  0007d	89 5d ec	 mov	 DWORD PTR __Loc$1$[ebp], ebx

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00080	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00084	75 1f		 jne	 SHORT $LN38@GetItemsNa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00086	8b c3		 mov	 eax, ebx
$LL37@GetItemsNa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00088	89 45 ec	 mov	 DWORD PTR __Loc$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0008b	39 78 10	 cmp	 DWORD PTR [eax+16], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0008e	73 05		 jae	 SHORT $LN39@GetItemsNa

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  00090	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1612 :             } else {

  00093	eb 04		 jmp	 SHORT $LN40@GetItemsNa
$LN39@GetItemsNa:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00095	8b d0		 mov	 edx, eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00097	8b 00		 mov	 eax, DWORD PTR [eax]
$LN40@GetItemsNa:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00099	1b f6		 sbb	 esi, esi
  0009b	46		 inc	 esi
  0009c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000a0	74 e6		 je	 SHORT $LL37@GetItemsNa
  000a2	8b 45 08	 mov	 eax, DWORD PTR _inMap$[ebp]
$LN38@GetItemsNa:

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000a5	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000a9	75 09		 jne	 SHORT $LN46@GetItemsNa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  000ab	3b 7a 10	 cmp	 edi, DWORD PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000ae	0f 83 92 00 00
	00		 jae	 $LN175@GetItemsNa
$LN46@GetItemsNa:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  000b4	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  000bb	0f 84 ae 00 00
	00		 je	 $LN189@GetItemsNa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000c1	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax

; 85   :         return ::operator new(_Bytes);

  000c4	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000cd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  000d4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000d9	8b d8		 mov	 ebx, eax

; 85   :         return ::operator new(_Bytes);

  000db	83 c4 04	 add	 esp, 4

; 1020 :         _Ptr = _Al.allocate(1);

  000de	89 5d e0	 mov	 DWORD PTR $T5[ebp+4], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000e1	8b 55 f0	 mov	 edx, DWORD PTR $T7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 249  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  000e4	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  000e7	89 7b 10	 mov	 DWORD PTR [ebx+16], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 811  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  000ea	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000f1	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4596 :         _My_data._Mysize = 0;

  000f7	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00101	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
$LL197@GetItemsNa:

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00108	8a 02		 mov	 al, BYTE PTR [edx]
  0010a	42		 inc	 edx
  0010b	84 c0		 test	 al, al
  0010d	75 f9		 jne	 SHORT $LL197@GetItemsNa
  0010f	2b d7		 sub	 edx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00111	52		 push	 edx
  00112	ff 75 f0	 push	 DWORD PTR $T7[ebp]
  00115	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0011a	8b 45 e4	 mov	 eax, DWORD PTR __Myhead$1$[ebp]

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _inMap$[ebp]
  00120	53		 push	 ebx

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00121	89 03		 mov	 DWORD PTR [ebx], eax

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00123	56		 push	 esi
  00124	ff 75 ec	 push	 DWORD PTR __Loc$1$[ebp]

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00127	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0012a	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 816  :         this->_Ptr->_Color = _Red;

  0012d	66 c7 43 0c 00
	00		 mov	 WORD PTR [ebx+12], 0

; 817  :         this->_Ptr->_Isnil = false;
; 818  :     }

  00133	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0013a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00141	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
$LN175@GetItemsNa:

; 145  :         _Mybase::operator++();

  00146	8d 4d e8	 lea	 ecx, DWORD PTR _<begin>$L0$6[ebp]
  00149	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >,std::_Iterator_base0>::operator++

; 114  :         return !_Ptr->_Isnil;

  0014e	8b 75 e8	 mov	 esi, DWORD PTR _<begin>$L0$6[ebp]
  00151	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 47   : 	for (auto& it : m_ItemMap)

  00155	0f 84 05 ff ff
	ff		 je	 $LL17@GetItemsNa
$LN3@GetItemsNa:

; 51   : }

  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 04 00	 ret	 4
$LN189@GetItemsNa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1624 :             _Throw_tree_length_error();

  0016f	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN199@GetItemsNa:
  00174	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetItemsNameMap@CItemManager@@QAEXAAV?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@@Z ENDP ; CItemManager::GetItemsNameMap
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadShiningTable@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_textFileLoader$ = -452					; size = 16
_pData$ = -436						; size = 4
_i$2 = -432						; size = 1
_this$GSCopy$1$ = -428					; size = 4
_i$3 = -424						; size = 1
_end_vnum$1$ = -420					; size = 4
_pItemData$1$ = -420					; size = 4
_szShiningTable$GSCopy$1$ = -416			; size = 4
__Ptr$1$ = -412						; size = 4
__Possible_matches_end$1$ = -412			; size = 4
_pItemData$1$ = -412					; size = 4
__Result$1$ = -408					; size = 4
_vnum$1$ = -408						; size = 4
_TokenVector$ = -404					; size = 12
_i$1$ = -392						; size = 4
_File$ = -388						; size = 324
_s_start_vnum$4 = -64					; size = 24
_s_end_vnum$5 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szShiningTable$ = 8					; size = 4
?LoadShiningTable@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadShiningTable, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadShiningTable@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 01 00
	00		 sub	 esp, 440		; 000001b8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d 54 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 5d 08	 mov	 ebx, DWORD PTR _szShiningTable$[ebp]

; 391  : 	CMappedFile File;

  00037	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0003d	89 9d 60 fe ff
	ff		 mov	 DWORD PTR _szShiningTable$GSCopy$1$[ebp], ebx
  00043	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 392  : 	LPCVOID pData;
; 393  : 
; 394  : 
; 395  : 	if (!CEterPackManager::Instance().Get(File, szShiningTable, &pData))

  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  0004e	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _pData$[ebp]
  00054	50		 push	 eax
  00055	53		 push	 ebx
  00056	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _File$[ebp]
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00069	84 c0		 test	 al, al
  0006b	75 07		 jne	 SHORT $LN13@LoadShinin
  0006d	32 db		 xor	 bl, bl
  0006f	e9 71 05 00 00	 jmp	 $LN30@LoadShinin
$LN13@LoadShinin:

; 396  : 		return false;
; 397  : 
; 398  : 
; 399  : 	CMemoryTextFileLoader textFileLoader;

  00074	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0007a	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 400  : 	textFileLoader.Bind(File.Size(), pData);

  0007f	ff b5 4c fe ff
	ff		 push	 DWORD PTR _pData$[ebp]
  00085	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0008b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008f	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00094	50		 push	 eax
  00095	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0009b	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a0	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp], 0
  000aa	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+4], 0
  000b4	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 404  : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  000be	33 f6		 xor	 esi, esi
  000c0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c4	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000ca	89 b5 78 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  000d0	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000d5	85 c0		 test	 eax, eax
  000d7	0f 84 31 04 00
	00		 je	 $LN384@LoadShinin
  000dd	0f 1f 00	 npad	 3
$LL4@LoadShinin:

; 405  : 	{
; 406  : 		if (!textFileLoader.SplitLine(i, &TokenVector, "\t"))

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  000e5	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _TokenVector$[ebp]
  000eb	50		 push	 eax
  000ec	56		 push	 esi
  000ed	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000f3	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  000f8	84 c0		 test	 al, al
  000fa	0f 84 f4 03 00
	00		 je	 $LN2@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00100	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp+4]
  00106	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0010b	8b bd 6c fe ff
	ff		 mov	 edi, DWORD PTR _TokenVector$[ebp]
  00111	2b cf		 sub	 ecx, edi
  00113	f7 e9		 imul	 ecx
  00115	c1 fa 02	 sar	 edx, 2
  00118	8b c2		 mov	 eax, edx
  0011a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0011d	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 410  : 		if (TokenVector.size() > (1 + CItemData::ITEM_SHINING_MAX_COUNT))

  0011f	83 f8 05	 cmp	 eax, 5
  00122	76 18		 jbe	 SHORT $LN15@LoadShinin

; 411  : 		{
; 412  : 			TraceError("CItemManager::LoadShiningTable(%s) - LoadShiningTable in %d\n - RowSize: %d MaxRowSize: %d", szShiningTable, i, TokenVector.size(), CItemData::ITEM_SHINING_MAX_COUNT);

  00124	6a 04		 push	 4
  00126	50		 push	 eax
  00127	56		 push	 esi
  00128	53		 push	 ebx
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@BGOPJJIB@CItemManager?3?3LoadShiningTable?$CI@
  0012e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00133	8b bd 6c fe ff
	ff		 mov	 edi, DWORD PTR _TokenVector$[ebp]
  00139	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0013c	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2319 :         return _BUF_SIZE <= _Myres;

  00140	8b c7		 mov	 eax, edi
  00142	89 bd 68 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi

; 2306 :         if (_Large_string_engaged()) {

  00148	72 08		 jb	 SHORT $LN374@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0014a	8b 07		 mov	 eax, DWORD PTR [edi]
  0014c	89 85 68 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN374@LoadShinin:

; 4146 :         return static_cast<size_type>(_Traits_find<_Traits>(

  00152	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 612  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  00155	83 fb 01	 cmp	 ebx, 1
  00158	72 54		 jb	 SHORT $LN382@LoadShinin

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  0015a	53		 push	 ebx

; 628  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  0015b	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  0015e	6a 7e		 push	 126			; 0000007eH
  00160	50		 push	 eax

; 628  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00161	89 8d 64 fe ff
	ff		 mov	 DWORD PTR __Possible_matches_end$1$[ebp], ecx

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00167	e8 00 00 00 00	 call	 _memchr
  0016c	8b f0		 mov	 esi, eax
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  :         if (!_Match_try) { // didn't find first character; report failure

  00171	85 f6		 test	 esi, esi
  00173	74 33		 je	 SHORT $LN389@LoadShinin
$LL55@LoadShinin:

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00175	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00178	3c 7e		 cmp	 al, 126			; 0000007eH
  0017a	75 04		 jne	 SHORT $LN385@LoadShinin
  0017c	33 c0		 xor	 eax, eax
  0017e	eb 05		 jmp	 SHORT $LN386@LoadShinin
$LN385@LoadShinin:
  00180	1b c0		 sbb	 eax, eax
  00182	83 c8 01	 or	 eax, 1
$LN386@LoadShinin:

; 635  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  00185	85 c0		 test	 eax, eax
  00187	0f 84 9a 00 00
	00		 je	 $LN358@LoadShinin

; 629  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  0018d	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  00193	46		 inc	 esi

; 630  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00194	2b c6		 sub	 eax, esi

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00196	50		 push	 eax
  00197	6a 7e		 push	 126			; 0000007eH
  00199	56		 push	 esi
  0019a	e8 00 00 00 00	 call	 _memchr
  0019f	8b f0		 mov	 esi, eax
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  :         if (!_Match_try) { // didn't find first character; report failure

  001a4	85 f6		 test	 esi, esi
  001a6	75 cd		 jne	 SHORT $LL55@LoadShinin
$LN389@LoadShinin:

; 2319 :         return _BUF_SIZE <= _Myres;

  001a8	8b b5 78 fe ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LN382@LoadShinin:
  001ae	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  001b2	72 02		 jb	 SHORT $LN69@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001b4	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN69@LoadShinin:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 421  : 			DWORD dwItemVNum = atoi(c_rstrID.c_str());

  001b6	57		 push	 edi
  001b7	e8 00 00 00 00	 call	 __atoi64

; 422  : 
; 423  : 			CItemData * pItemData = MakeItemData(dwItemVNum);

  001bc	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001c2	83 c4 04	 add	 esp, 4
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
  001cb	89 85 5c fe ff
	ff		 mov	 DWORD PTR _pItemData$1$[ebp], eax

; 424  : 			if (pItemData)

  001d1	85 c0		 test	 eax, eax
  001d3	0f 84 15 03 00
	00		 je	 $LN390@LoadShinin

; 425  : 			{
; 426  : 				for (BYTE i = 0; i < CItemData::ITEM_SHINING_MAX_COUNT; i++)

  001d9	32 db		 xor	 bl, bl
  001db	33 ff		 xor	 edi, edi
  001dd	88 9d 50 fe ff
	ff		 mov	 BYTE PTR _i$2[ebp], bl
  001e3	33 f6		 xor	 esi, esi
$LL7@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e5	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp+4]
  001eb	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001f0	2b 8d 6c fe ff
	ff		 sub	 ecx, DWORD PTR _TokenVector$[ebp]
  001f6	f7 e9		 imul	 ecx
  001f8	c1 fa 02	 sar	 edx, 2
  001fb	8b c2		 mov	 eax, edx
  001fd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 428  : 					if (i < (TokenVector.size() - 1))

  00200	48		 dec	 eax
  00201	03 c2		 add	 eax, edx
  00203	3b f8		 cmp	 edi, eax
  00205	0f 83 b1 02 00
	00		 jae	 $LN19@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0020b	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp]
  00211	83 c0 18	 add	 eax, 24			; 00000018H
  00214	03 c6		 add	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00216	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0021a	0f 82 a1 02 00
	00		 jb	 $LN5@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00220	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 432  : 					}

  00222	e9 9a 02 00 00	 jmp	 $LN5@LoadShinin
$LN358@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 636  :             return static_cast<size_t>(_Match_try - _Haystack);

  00227	2b b5 68 fe ff
	ff		 sub	 esi, DWORD PTR __Result$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 419  : 		if (std::string::npos == pos)

  0022d	83 fe ff	 cmp	 esi, -1
  00230	0f 84 72 ff ff
	ff		 je	 $LN389@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  00236	3b de		 cmp	 ebx, esi

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00238	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _s_start_vnum$4[ebp], 0

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  0023f	8b c6		 mov	 eax, esi

; 4596 :         _My_data._Mysize = 0;

  00241	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _s_start_vnum$4[ebp+16], 0

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  00248	0f 42 c3	 cmovb	 eax, ebx

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0024b	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _s_start_vnum$4[ebp+20], 15 ; 0000000fH

; 2306 :         if (_Large_string_engaged()) {

  00252	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00256	8b cf		 mov	 ecx, edi

; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00258	c6 45 c0 00	 mov	 BYTE PTR _s_start_vnum$4[ebp], 0

; 2306 :         if (_Large_string_engaged()) {

  0025c	72 02		 jb	 SHORT $LN375@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0025e	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN375@LoadShinin:

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00260	50		 push	 eax
  00261	51		 push	 ecx
  00262	8d 4d c0	 lea	 ecx, DWORD PTR _s_start_vnum$4[ebp]
  00265	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2324 :         if (_Mysize < _Off) {

  0026a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 443  : 			std::string s_end_vnum(c_rstrID.substr(pos + 1));

  0026d	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0026e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _s_end_vnum$5[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 442  : 			std::string s_start_vnum(c_rstrID.substr(0, pos));

  00275	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00279	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _s_end_vnum$5[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00280	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _s_end_vnum$5[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00287	c6 45 d8 00	 mov	 BYTE PTR _s_end_vnum$5[ebp], 0

; 2324 :         if (_Mysize < _Off) {

  0028b	3b c6		 cmp	 eax, esi
  0028d	0f 82 87 03 00
	00		 jb	 $LN360@LoadShinin

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  00293	2b c6		 sub	 eax, esi
  00295	83 cb ff	 or	 ebx, -1
  00298	83 f8 ff	 cmp	 eax, -1
  0029b	0f 42 d8	 cmovb	 ebx, eax

; 2306 :         if (_Large_string_engaged()) {

  0029e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  002a2	72 02		 jb	 SHORT $LN145@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  002a4	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN145@LoadShinin:

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  002a6	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  002a9	89 85 64 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  002af	83 fb 0f	 cmp	 ebx, 15			; 0000000fH

; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  002b2	77 18		 ja	 SHORT $LN150@LoadShinin

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002b4	53		 push	 ebx
  002b5	50		 push	 eax
  002b6	8d 45 d8	 lea	 eax, DWORD PTR _s_end_vnum$5[ebp]

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  002b9	89 5d e8	 mov	 DWORD PTR _s_end_vnum$5[ebp+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 _memmove

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002c2	c6 44 1d d8 00	 mov	 BYTE PTR _s_end_vnum$5[ebp+ebx], 0

; 3251 :             return *this;

  002c7	e9 7f 00 00 00	 jmp	 $LN393@LoadShinin
$LN150@LoadShinin:

; 4508 :         if (_New_size > max_size()) {

  002cc	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  002d2	0f 87 3d 03 00
	00		 ja	 $LN361@LoadShinin

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  002d8	8b f3		 mov	 esi, ebx
  002da	83 ce 0f	 or	 esi, 15			; 0000000fH
  002dd	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  002e3	76 17		 jbe	 SHORT $LN167@LoadShinin

; 4490 :             return _Max;

  002e5	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  002ea	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002f5	83 c4 04	 add	 esp, 4
  002f8	8b f8		 mov	 edi, eax
  002fa	eb 35		 jmp	 SHORT $LN174@LoadShinin
$LN167@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  002fc	83 fe 16	 cmp	 esi, 22			; 00000016H
  002ff	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00304	0f 42 f0	 cmovb	 esi, eax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00307	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0030a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0030f	72 0d		 jb	 SHORT $LN175@LoadShinin

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00317	83 c4 04	 add	 esp, 4
  0031a	8b f8		 mov	 edi, eax
  0031c	eb 13		 jmp	 SHORT $LN174@LoadShinin
$LN175@LoadShinin:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0031e	85 c0		 test	 eax, eax
  00320	74 0d		 je	 SHORT $LN176@LoadShinin

; 85   :         return ::operator new(_Bytes);

  00322	50		 push	 eax
  00323	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00328	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0032b	8b f8		 mov	 edi, eax
  0032d	eb 02		 jmp	 SHORT $LN174@LoadShinin
$LN176@LoadShinin:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0032f	33 ff		 xor	 edi, edi
$LN174@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00331	53		 push	 ebx
  00332	ff b5 64 fe ff
	ff		 push	 DWORD PTR __Ptr$1$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  00338	89 5d e8	 mov	 DWORD PTR _s_end_vnum$5[ebp+16], ebx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0033b	57		 push	 edi

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  0033c	89 75 ec	 mov	 DWORD PTR _s_end_vnum$5[ebp+20], esi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0033f	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00344	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00348	89 7d d8	 mov	 DWORD PTR _s_end_vnum$5[ebp], edi
$LN393@LoadShinin:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 443  : 			std::string s_end_vnum(c_rstrID.substr(pos + 1));

  0034b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0034e	83 7d d4 10	 cmp	 DWORD PTR _s_start_vnum$4[ebp+20], 16 ; 00000010H
  00352	8d 45 c0	 lea	 eax, DWORD PTR _s_start_vnum$4[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 443  : 			std::string s_end_vnum(c_rstrID.substr(pos + 1));

  00355	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00359	0f 43 45 c0	 cmovae	 eax, DWORD PTR _s_start_vnum$4[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 445  : 			int start_vnum = atoi(s_start_vnum.c_str());

  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 __atoi64
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00363	83 7d ec 10	 cmp	 DWORD PTR _s_end_vnum$5[ebp+20], 16 ; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 445  : 			int start_vnum = atoi(s_start_vnum.c_str());

  00367	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00369	8d 45 d8	 lea	 eax, DWORD PTR _s_end_vnum$5[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 445  : 			int start_vnum = atoi(s_start_vnum.c_str());

  0036c	89 9d 68 fe ff
	ff		 mov	 DWORD PTR _vnum$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00372	0f 43 45 d8	 cmovae	 eax, DWORD PTR _s_end_vnum$5[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 446  : 			int end_vnum = atoi(s_end_vnum.c_str());

  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 __atoi64
  0037c	83 c4 08	 add	 esp, 8
  0037f	89 85 5c fe ff
	ff		 mov	 DWORD PTR _end_vnum$1$[ebp], eax

; 447  : 			DWORD vnum = start_vnum;
; 448  : 
; 449  : 			while (vnum <= end_vnum)

  00385	3b d8		 cmp	 ebx, eax
  00387	0f 87 ab 00 00
	00		 ja	 $LN9@LoadShinin
  0038d	0f 1f 00	 npad	 3
$LL8@LoadShinin:

; 450  : 			{
; 451  : 				CItemData * pItemData = MakeItemData(vnum);

  00390	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00396	53		 push	 ebx
  00397	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
  0039c	89 85 64 fe ff
	ff		 mov	 DWORD PTR _pItemData$1$[ebp], eax

; 452  : 				if (pItemData)

  003a2	85 c0		 test	 eax, eax
  003a4	0f 84 7b 00 00
	00		 je	 $LN11@LoadShinin

; 453  : 				{
; 454  : 					for (BYTE i = 0; i < CItemData::ITEM_SHINING_MAX_COUNT; i++)

  003aa	32 db		 xor	 bl, bl
  003ac	33 ff		 xor	 edi, edi
  003ae	88 9d 58 fe ff
	ff		 mov	 BYTE PTR _i$3[ebp], bl
  003b4	33 f6		 xor	 esi, esi
  003b6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL12@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003c0	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp+4]
  003c6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  003cb	2b 8d 6c fe ff
	ff		 sub	 ecx, DWORD PTR _TokenVector$[ebp]
  003d1	f7 e9		 imul	 ecx
  003d3	c1 fa 02	 sar	 edx, 2
  003d6	8b c2		 mov	 eax, edx
  003d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003db	48		 dec	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 456  : 						if (i < (TokenVector.size() - 1))

  003dc	03 c2		 add	 eax, edx
  003de	3b f8		 cmp	 edi, eax
  003e0	73 15		 jae	 SHORT $LN22@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  003e2	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp]
  003e8	83 c0 18	 add	 eax, 24			; 00000018H
  003eb	03 c6		 add	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  003ed	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  003f1	72 09		 jb	 SHORT $LN10@LoadShinin

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  003f3	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 460  : 						}

  003f5	eb 05		 jmp	 SHORT $LN10@LoadShinin
$LN22@LoadShinin:

; 461  : 						else
; 462  : 						{
; 463  : 							pItemData->SetItemShiningTableData(i, "");

  003f7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN10@LoadShinin:

; 453  : 				{
; 454  : 					for (BYTE i = 0; i < CItemData::ITEM_SHINING_MAX_COUNT; i++)

  003fc	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _pItemData$1$[ebp]
  00402	50		 push	 eax
  00403	ff b5 58 fe ff
	ff		 push	 DWORD PTR _i$3[ebp]
  00409	e8 00 00 00 00	 call	 ?SetItemShiningTableData@CItemData@@QAEXEPBD@Z ; CItemData::SetItemShiningTableData
  0040e	fe c3		 inc	 bl
  00410	47		 inc	 edi
  00411	83 c6 18	 add	 esi, 24			; 00000018H
  00414	88 9d 58 fe ff
	ff		 mov	 BYTE PTR _i$3[ebp], bl
  0041a	80 fb 04	 cmp	 bl, 4
  0041d	72 a1		 jb	 SHORT $LL12@LoadShinin
  0041f	8b 9d 68 fe ff
	ff		 mov	 ebx, DWORD PTR _vnum$1$[ebp]
$LN11@LoadShinin:

; 464  : 						}
; 465  : 					}
; 466  : 				}
; 467  : 
; 468  : 				++vnum;

  00425	43		 inc	 ebx
  00426	89 9d 68 fe ff
	ff		 mov	 DWORD PTR _vnum$1$[ebp], ebx
  0042c	3b 9d 5c fe ff
	ff		 cmp	 ebx, DWORD PTR _end_vnum$1$[ebp]
  00432	0f 86 58 ff ff
	ff		 jbe	 $LL8@LoadShinin
$LN9@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00438	8b 55 ec	 mov	 edx, DWORD PTR _s_end_vnum$5[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 470  : 		}

  0043b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0043f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00442	72 2c		 jb	 SHORT $LN242@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00444	8b 4d d8	 mov	 ecx, DWORD PTR _s_end_vnum$5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00447	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00448	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0044a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00450	72 14		 jb	 SHORT $LN252@LoadShinin

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00452	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00455	83 c2 23	 add	 edx, 35			; 00000023H
  00458	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0045a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0045d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00460	0f 87 aa 01 00
	00		 ja	 $LN344@LoadShinin
$LN252@LoadShinin:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00466	52		 push	 edx
  00467	51		 push	 ecx
  00468	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0046d	83 c4 08	 add	 esp, 8
$LN242@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00470	8b 55 d4	 mov	 edx, DWORD PTR _s_start_vnum$4[ebp+20]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00473	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _s_end_vnum$5[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0047a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _s_end_vnum$5[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00481	c6 45 d8 00	 mov	 BYTE PTR _s_end_vnum$5[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 470  : 		}

  00485	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00489	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0048c	72 5a		 jb	 SHORT $LN387@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0048e	8b 4d c0	 mov	 ecx, DWORD PTR _s_start_vnum$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00491	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00492	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00494	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0049a	72 14		 jb	 SHORT $LN279@LoadShinin

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0049c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0049f	83 c2 23	 add	 edx, 35			; 00000023H
  004a2	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004a4	83 c0 fc	 add	 eax, -4			; fffffffcH
  004a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004aa	0f 87 60 01 00
	00		 ja	 $LN344@LoadShinin
$LN279@LoadShinin:

; 264  :         ::operator delete(_Ptr, _Bytes);

  004b0	52		 push	 edx
  004b1	51		 push	 ecx
  004b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004b7	83 c4 08	 add	 esp, 8
  004ba	eb 2c		 jmp	 SHORT $LN387@LoadShinin
$LN19@LoadShinin:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 435  : 						pItemData->SetItemShiningTableData(i, "");

  004bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN5@LoadShinin:

; 425  : 			{
; 426  : 				for (BYTE i = 0; i < CItemData::ITEM_SHINING_MAX_COUNT; i++)

  004c1	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _pItemData$1$[ebp]
  004c7	50		 push	 eax
  004c8	ff b5 50 fe ff
	ff		 push	 DWORD PTR _i$2[ebp]
  004ce	e8 00 00 00 00	 call	 ?SetItemShiningTableData@CItemData@@QAEXEPBD@Z ; CItemData::SetItemShiningTableData
  004d3	fe c3		 inc	 bl
  004d5	47		 inc	 edi
  004d6	83 c6 18	 add	 esi, 24			; 00000018H
  004d9	88 9d 50 fe ff
	ff		 mov	 BYTE PTR _i$2[ebp], bl
  004df	80 fb 04	 cmp	 bl, 4
  004e2	0f 82 fd fc ff
	ff		 jb	 $LL7@LoadShinin
$LN387@LoadShinin:

; 404  : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  004e8	8b b5 78 fe ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LN390@LoadShinin:
  004ee	8b 9d 60 fe ff
	ff		 mov	 ebx, DWORD PTR _szShiningTable$GSCopy$1$[ebp]
$LN2@LoadShinin:
  004f4	46		 inc	 esi
  004f5	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  004fb	89 b5 78 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  00501	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00506	3b f0		 cmp	 esi, eax
  00508	0f 82 d2 fb ff
	ff		 jb	 $LL4@LoadShinin
$LN384@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  0050e	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _TokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 473  : 	return true;

  00514	b3 01		 mov	 bl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00516	85 f6		 test	 esi, esi
  00518	0f 84 bc 00 00
	00		 je	 $LN287@LoadShinin

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0051e	8b bd 70 fe ff
	ff		 mov	 edi, DWORD PTR _TokenVector$[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00524	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00526	74 51		 je	 SHORT $LN293@LoadShinin
$LL294@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00528	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0052b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0052e	72 2b		 jb	 SHORT $LN313@LoadShinin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00530	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00532	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00533	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00539	72 16		 jb	 SHORT $LN323@LoadShinin

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0053b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0053e	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00541	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00543	83 c0 fc	 add	 eax, -4			; fffffffcH
  00546	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00549	0f 87 c1 00 00
	00		 ja	 $LN344@LoadShinin

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0054f	8b c2		 mov	 eax, edx
$LN323@LoadShinin:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00551	51		 push	 ecx
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00558	83 c4 08	 add	 esp, 8
$LN313@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0055b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00562	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00569	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0056c	83 c6 18	 add	 esi, 24			; 00000018H
  0056f	3b f7		 cmp	 esi, edi
  00571	75 b5		 jne	 SHORT $LL294@LoadShinin
  00573	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _TokenVector$[ebp]
$LN293@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00579	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp+8]
  0057f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00584	2b ce		 sub	 ecx, esi
  00586	f7 e9		 imul	 ecx
  00588	c1 fa 02	 sar	 edx, 2
  0058b	8b c2		 mov	 eax, edx
  0058d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00590	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00592	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00595	8b c6		 mov	 eax, esi
  00597	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0059a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005a0	72 10		 jb	 SHORT $LN347@LoadShinin

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005a2	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  005a5	83 c1 23	 add	 ecx, 35			; 00000023H
  005a8	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005aa	83 c0 fc	 add	 eax, -4			; fffffffcH
  005ad	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005b0	77 5e		 ja	 SHORT $LN344@LoadShinin
$LN347@LoadShinin:

; 264  :         ::operator delete(_Ptr, _Bytes);

  005b2	51		 push	 ecx
  005b3	56		 push	 esi
  005b4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005b9	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  005bc	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp], 0

; 1768 :             _Mylast  = nullptr;

  005c6	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  005d0	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+8], 0
$LN287@LoadShinin:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 473  : 	return true;

  005da	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  005e0	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN30@LoadShinin:
  005e5	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  005eb	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  005f0	8a c3		 mov	 al, bl

; 474  : }

  005f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005fc	59		 pop	 ecx
  005fd	5f		 pop	 edi
  005fe	5e		 pop	 esi
  005ff	5b		 pop	 ebx
  00600	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00603	33 cd		 xor	 ecx, ebp
  00605	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0060a	8b e5		 mov	 esp, ebp
  0060c	5d		 pop	 ebp
  0060d	c2 04 00	 ret	 4
$LN344@LoadShinin:
  00610	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN361@LoadShinin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  00615	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN360@LoadShinin:

; 2325 :             _Xran();

  0061a	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN392@LoadShinin:
  0061f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _TokenVector$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$3:
  00021	8d 4d c0	 lea	 ecx, DWORD PTR _s_start_vnum$4[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadShiningTable@CItemManager@@QAE_NPBD@Z$4:
  00029	8d 4d d8	 lea	 ecx, DWORD PTR _s_end_vnum$5[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?LoadShiningTable@CItemManager@@QAE_NPBD@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 38 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-456]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadShiningTable@CItemManager@@QAE_NPBD@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadShiningTable@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadShiningTable
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemTable@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -744						; size = 12
$T3 = -732						; size = 8
__Loc$4 = -724						; size = 12
__Loc$5 = -712						; size = 12
__Loc$6 = -700						; size = 12
__Loc$7 = -688						; size = 12
_pvData$ = -676						; size = 4
_zObj$ = -672						; size = 20
$T8 = -652						; size = 8
$T9 = -644						; size = 8
$T10 = -636						; size = 8
_pbData$1$ = -628					; size = 4
$T11 = -624						; size = 4
_dwFourCC$ = -620					; size = 4
_this$1$ = -616						; size = 4
_dwElements$ = -612					; size = 4
tv3253 = -608						; size = 4
tv3252 = -604						; size = 4
_i$1$ = -600						; size = 4
_this$GSCopy$1$ = -596					; size = 4
_dwDataSize$ = -592					; size = 4
_dwVersion$ = -588					; size = 4
tv3251 = -584						; size = 4
_dwStride$ = -580					; size = 4
_itemNameMap$ = -576					; size = 8
_pItemData$12 = -568					; size = 4
$T13 = -568						; size = 4
_dwVnum$14 = -568					; size = 4
_file$ = -564						; size = 324
_t$15 = -240						; size = 156
_szName$ = -84						; size = 65
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemTable@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemTable, COMDAT
; _this$ = ecx

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemTable@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 02 00
	00		 sub	 esp, 732		; 000002dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d ac fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 268  : 	CMappedFile file;

  00039	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 269  : 	LPCVOID pvData;
; 270  : 
; 271  : 	if (!CEterPackManager::Instance().Get(file, c_szFileName, &pvData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  0004a	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00065	84 c0		 test	 al, al
  00067	74 7b		 je	 SHORT $LN26@LoadItemTa

; 272  : 		return false;
; 273  : 
; 274  : 	DWORD dwFourCC, dwElements, dwDataSize;
; 275  : 	DWORD dwVersion=0;
; 276  : 	DWORD dwStride=0;
; 277  : 
; 278  : 	file.Read(&dwFourCC, sizeof(DWORD));

  00069	6a 04		 push	 4
  0006b	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _dwFourCC$[ebp]
  00071	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwVersion$[ebp], 0
  0007b	50		 push	 eax
  0007c	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00082	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwStride$[ebp], 0
  0008c	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 279  : 
; 280  : 	if (dwFourCC == MAKEFOURCC('M', 'I', 'P', 'X'))

  00091	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR _dwFourCC$[ebp]
  00097	3d 4d 49 50 58	 cmp	 eax, 1481656653		; 5850494dH
  0009c	0f 85 9e 00 00
	00		 jne	 $LN6@LoadItemTa

; 281  : 	{
; 282  : 		file.Read(&dwVersion, sizeof(DWORD));

  000a2	6a 04		 push	 4
  000a4	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _dwVersion$[ebp]
  000aa	50		 push	 eax
  000ab	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000b1	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 283  : 		file.Read(&dwStride, sizeof(DWORD));

  000b6	6a 04		 push	 4
  000b8	8d 85 bc fd ff
	ff		 lea	 eax, DWORD PTR _dwStride$[ebp]
  000be	50		 push	 eax
  000bf	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c5	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 284  : 
; 285  : 		if (dwVersion != 1)

  000ca	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _dwVersion$[ebp]
  000d0	83 f8 01	 cmp	 eax, 1
  000d3	74 3c		 je	 SHORT $LN8@LoadItemTa

; 286  : 		{
; 287  : 			TraceError("CPythonItem::LoadItemTable: invalid item_proto[%s] VERSION[%d]", c_szFileName, dwVersion);

  000d5	50		 push	 eax
  000d6	56		 push	 esi
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@
  000dc	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@LoadItemTa:
  000e4	32 db		 xor	 bl, bl
$LN27@LoadItemTa:

; 385  : 	return true;

  000e6	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ec	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  000f1	8a c3		 mov	 al, bl

; 386  : }

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN8@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h

; 678  : 				switch (structSize)

  00111	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR _dwStride$[ebp]
  00117	8b c1		 mov	 eax, ecx
  00119	2d 98 00 00 00	 sub	 eax, 152		; 00000098H
  0011e	74 37		 je	 SHORT $LN10@LoadItemTa
  00120	83 e8 04	 sub	 eax, 4
  00123	74 32		 je	 SHORT $LN10@LoadItemTa
  00125	83 e8 02	 sub	 eax, 2
  00128	74 2d		 je	 SHORT $LN10@LoadItemTa
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 297  : 			TraceError("CPythonItem::LoadItemTable: invalid item_proto[%s] STRIDE[%d] != sizeof(SItemTable)",

  0012a	68 9c 00 00 00	 push	 156			; 0000009cH
  0012f	51		 push	 ecx
  00130	56		 push	 esi
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@
  00136	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0013b	83 c4 10	 add	 esp, 16			; 00000010H
  0013e	eb a4		 jmp	 SHORT $LN26@LoadItemTa
$LN6@LoadItemTa:

; 298  : 				c_szFileName, dwStride, sizeof(CItemData::TItemTable));
; 299  : 			return false;
; 300  : 		}
; 301  : 	}
; 302  : 	else if (dwFourCC != MAKEFOURCC('M', 'I', 'P', 'T'))

  00140	3d 4d 49 50 54	 cmp	 eax, 1414547789		; 5450494dH
  00145	74 10		 je	 SHORT $LN10@LoadItemTa

; 303  : 	{
; 304  : 		TraceError("CPythonItem::LoadItemTable: invalid item proto type %s", c_szFileName);

  00147	56		 push	 esi
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@
  0014d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00152	83 c4 08	 add	 esp, 8
  00155	eb 8d		 jmp	 SHORT $LN26@LoadItemTa
$LN10@LoadItemTa:

; 305  : 		return false;
; 306  : 	}
; 307  : 
; 308  : 	file.Read(&dwElements, sizeof(DWORD));

  00157	6a 04		 push	 4
  00159	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _dwElements$[ebp]
  0015f	50		 push	 eax
  00160	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00166	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 309  : 	file.Read(&dwDataSize, sizeof(DWORD));

  0016b	6a 04		 push	 4
  0016d	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _dwDataSize$[ebp]
  00173	50		 push	 eax
  00174	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0017a	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 310  : 
; 311  : 	BYTE * pbData = new BYTE[dwDataSize];

  0017f	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _dwDataSize$[ebp]
  00185	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0018a	83 c4 04	 add	 esp, 4

; 312  : 	file.Read(pbData, dwDataSize);

  0018d	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00193	8b f0		 mov	 esi, eax
  00195	89 b5 8c fd ff
	ff		 mov	 DWORD PTR _pbData$1$[ebp], esi
  0019b	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _dwDataSize$[ebp]
  001a1	56		 push	 esi
  001a2	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 313  : 
; 314  : 	/////
; 315  : 
; 316  : 	CLZObject zObj;

  001a7	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001ad	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject

; 317  : 
; 318  : 	if (!CLZO::Instance().Decompress(zObj, pbData, s_adwItemProtoKey))

  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  001b8	8d 85 60 fd ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  001be	68 00 00 00 00	 push	 OFFSET ?s_adwItemProtoKey@@3PAKA
  001c3	56		 push	 esi
  001c4	50		 push	 eax
  001c5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001c9	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  001ce	84 c0		 test	 al, al
  001d0	75 1b		 jne	 SHORT $LN11@LoadItemTa

; 319  : 	{
; 320  : 		delete [] pbData;

  001d2	56		 push	 esi
  001d3	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001d8	83 c4 04	 add	 esp, 4

; 385  : 	return true;

  001db	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001e1	32 db		 xor	 bl, bl
  001e3	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  001e8	e9 f9 fe ff ff	 jmp	 $LN27@LoadItemTa
$LN11@LoadItemTa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  001ed	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 441  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001ef	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _itemNameMap$[ebp], 0
  001f9	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _itemNameMap$[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00203	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00208	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 350  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0020b	89 00		 mov	 DWORD PTR [eax], eax

; 351  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0020d	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 352  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00210	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 353  :         _Pnode->_Color = _Black;

  00213	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1925 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00219	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _itemNameMap$[ebp], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 329  : 	for (DWORD i = 0; i < dwElements; ++i)

  0021f	83 bd 9c fd ff
	ff 00		 cmp	 DWORD PTR _dwElements$[ebp], 0
  00226	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0022a	c7 85 a8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00234	0f 86 40 06 00
	00		 jbe	 $LN3@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 441  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0023a	33 f6		 xor	 esi, esi
  0023c	83 c3 04	 add	 ebx, 4
  0023f	33 ff		 xor	 edi, edi
  00241	89 9d 98 fd ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ebx
  00247	89 b5 a0 fd ff
	ff		 mov	 DWORD PTR tv3253[ebp], esi
  0024d	89 bd a4 fd ff
	ff		 mov	 DWORD PTR tv3252[ebp], edi
  00253	89 b5 b8 fd ff
	ff		 mov	 DWORD PTR tv3251[ebp], esi
  00259	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 332  : 		CItemData::TItemTable t = {0};

  00260	68 9c 00 00 00	 push	 156			; 0000009cH
  00265	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp]
  0026b	6a 00		 push	 0
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 _memset
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h

; 735  : 				switch (structSize)

  00273	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _dwStride$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 332  : 		CItemData::TItemTable t = {0};

  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h

; 735  : 				switch (structSize)

  0027c	2d 98 00 00 00	 sub	 eax, 152		; 00000098H
  00281	0f 84 8d 01 00
	00		 je	 $LN107@LoadItemTa
  00287	83 e8 04	 sub	 eax, 4
  0028a	74 17		 je	 SHORT $LN108@LoadItemTa
  0028c	83 e8 02	 sub	 eax, 2
  0028f	0f 85 e7 02 00
	00		 jne	 $LN69@LoadItemTa

; 746  : 							ITABLE_COPY_INT(dwVnumRange);
; 747  : 						}
; 748  : 						break;
; 749  : 					case sizeof(TItemTable_r158):
; 750  : 						{
; 751  : 							ITABLE_PROCESS(158);

  00295	8b b5 b8 fd ff
	ff		 mov	 esi, DWORD PTR tv3251[ebp]
  0029b	03 b5 60 fd ff
	ff		 add	 esi, DWORD PTR _zObj$[ebp]

; 752  : 							ITABLE_COPY_INT(dwVnumRange);

  002a1	eb 08		 jmp	 SHORT $LN418@LoadItemTa
$LN108@LoadItemTa:

; 741  : 						}
; 742  : 						break;
; 743  : 					case sizeof(TItemTable_r156):
; 744  : 						{
; 745  : 							ITABLE_PROCESS(156);

  002a3	8b b5 60 fd ff
	ff		 mov	 esi, DWORD PTR _zObj$[ebp]
  002a9	03 f7		 add	 esi, edi
$LN418@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 340  : 		DWORD dwVnum = table->dwVnum;

  002ab	8b 06		 mov	 eax, DWORD PTR [esi]
  002ad	89 85 10 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp], eax
  002b3	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  002b6	6a ff		 push	 -1
  002b8	50		 push	 eax
  002b9	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  002bf	6a 19		 push	 25			; 00000019H
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _strncpy_s
  002c7	6a ff		 push	 -1
  002c9	8d 46 21	 lea	 eax, DWORD PTR [esi+33]
  002cc	50		 push	 eax
  002cd	8d 85 31 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+33]
  002d3	6a 19		 push	 25			; 00000019H
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 _strncpy_s
  002db	8a 46 3a	 mov	 al, BYTE PTR [esi+58]
  002de	83 c4 20	 add	 esp, 32			; 00000020H
  002e1	88 85 4a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+58], al
  002e7	8a 46 3b	 mov	 al, BYTE PTR [esi+59]
  002ea	88 85 4b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+59], al
  002f0	8a 46 3c	 mov	 al, BYTE PTR [esi+60]
  002f3	88 85 4c ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+60], al
  002f9	8a 46 3d	 mov	 al, BYTE PTR [esi+61]
  002fc	88 85 4d ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+61], al
  00302	8b 46 3e	 mov	 eax, DWORD PTR [esi+62]
  00305	89 85 4e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+62], eax
  0030b	8b 46 42	 mov	 eax, DWORD PTR [esi+66]
  0030e	89 85 52 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+66], eax
  00314	8b 46 46	 mov	 eax, DWORD PTR [esi+70]
  00317	89 85 56 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+70], eax
  0031d	8b 46 4a	 mov	 eax, DWORD PTR [esi+74]
  00320	89 85 5a ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+74], eax
  00326	8b 46 4e	 mov	 eax, DWORD PTR [esi+78]
  00329	89 85 5e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+78], eax
  0032f	8b 46 52	 mov	 eax, DWORD PTR [esi+82]
  00332	89 85 62 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+82], eax
  00338	8a 46 56	 mov	 al, BYTE PTR [esi+86]
  0033b	88 85 66 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+86], al
  00341	8b 46 57	 mov	 eax, DWORD PTR [esi+87]
  00344	89 85 67 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+87], eax
  0034a	8a 46 5b	 mov	 al, BYTE PTR [esi+91]
  0034d	88 85 6b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+91], al
  00353	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00356	89 85 6c ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+92], eax
  0035c	8a 46 60	 mov	 al, BYTE PTR [esi+96]
  0035f	88 85 70 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+96], al
  00365	8b 46 61	 mov	 eax, DWORD PTR [esi+97]
  00368	89 85 71 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+97], eax
  0036e	8a 46 65	 mov	 al, BYTE PTR [esi+101]
  00371	88 85 75 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+101], al
  00377	8b 46 66	 mov	 eax, DWORD PTR [esi+102]
  0037a	89 85 76 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+102], eax
  00380	8a 46 6a	 mov	 al, BYTE PTR [esi+106]
  00383	88 85 7a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+106], al
  00389	8b 46 6b	 mov	 eax, DWORD PTR [esi+107]
  0038c	89 85 7b ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+107], eax
  00392	8b 46 6f	 mov	 eax, DWORD PTR [esi+111]
  00395	89 85 7f ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+111], eax
  0039b	8b 46 73	 mov	 eax, DWORD PTR [esi+115]
  0039e	89 45 83	 mov	 DWORD PTR _t$15[ebp+115], eax
  003a1	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  003a4	89 45 87	 mov	 DWORD PTR _t$15[ebp+119], eax
  003a7	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  003aa	89 45 8b	 mov	 DWORD PTR _t$15[ebp+123], eax
  003ad	8b 46 7f	 mov	 eax, DWORD PTR [esi+127]
  003b0	89 45 8f	 mov	 DWORD PTR _t$15[ebp+127], eax
  003b3	8b 86 83 00 00
	00		 mov	 eax, DWORD PTR [esi+131]
  003b9	89 45 93	 mov	 DWORD PTR _t$15[ebp+131], eax
  003bc	8b 86 87 00 00
	00		 mov	 eax, DWORD PTR [esi+135]
  003c2	89 45 97	 mov	 DWORD PTR _t$15[ebp+135], eax
  003c5	8b 86 8b 00 00
	00		 mov	 eax, DWORD PTR [esi+139]
  003cb	89 45 9b	 mov	 DWORD PTR _t$15[ebp+139], eax
  003ce	8b 86 8f 00 00
	00		 mov	 eax, DWORD PTR [esi+143]
  003d4	89 45 9f	 mov	 DWORD PTR _t$15[ebp+143], eax
  003d7	8b 86 93 00 00
	00		 mov	 eax, DWORD PTR [esi+147]
  003dd	89 45 a3	 mov	 DWORD PTR _t$15[ebp+147], eax
  003e0	66 8b 86 97 00
	00 00		 mov	 ax, WORD PTR [esi+151]
  003e7	66 89 45 a7	 mov	 WORD PTR _t$15[ebp+151], ax
  003eb	8a 86 99 00 00
	00		 mov	 al, BYTE PTR [esi+153]
  003f1	88 45 a9	 mov	 BYTE PTR _t$15[ebp+153], al
  003f4	8a 86 9a 00 00
	00		 mov	 al, BYTE PTR [esi+154]
  003fa	88 45 aa	 mov	 BYTE PTR _t$15[ebp+154], al
  003fd	8a 86 9b 00 00
	00		 mov	 al, BYTE PTR [esi+155]
  00403	88 45 ab	 mov	 BYTE PTR _t$15[ebp+155], al
  00406	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00409	89 85 14 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+4], eax
  0040f	e9 68 01 00 00	 jmp	 $LN69@LoadItemTa
$LN107@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemData.h

; 739  : 							ITABLE_PROCESS(152);

  00414	03 b5 60 fd ff
	ff		 add	 esi, DWORD PTR _zObj$[ebp]
  0041a	6a ff		 push	 -1
  0041c	8b 06		 mov	 eax, DWORD PTR [esi]
  0041e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp], eax
  00424	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00427	50		 push	 eax
  00428	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  0042e	6a 19		 push	 25			; 00000019H
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 _strncpy_s
  00436	6a ff		 push	 -1
  00438	8d 46 1d	 lea	 eax, DWORD PTR [esi+29]
  0043b	50		 push	 eax
  0043c	8d 85 31 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+33]
  00442	6a 19		 push	 25			; 00000019H
  00444	50		 push	 eax
  00445	e8 00 00 00 00	 call	 _strncpy_s
  0044a	8a 46 36	 mov	 al, BYTE PTR [esi+54]
  0044d	83 c4 20	 add	 esp, 32			; 00000020H
  00450	88 85 4a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+58], al
  00456	8a 46 37	 mov	 al, BYTE PTR [esi+55]
  00459	88 85 4b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+59], al
  0045f	8a 46 38	 mov	 al, BYTE PTR [esi+56]
  00462	88 85 4c ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+60], al
  00468	8a 46 39	 mov	 al, BYTE PTR [esi+57]
  0046b	88 85 4d ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+61], al
  00471	8b 46 3a	 mov	 eax, DWORD PTR [esi+58]
  00474	89 85 4e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+62], eax
  0047a	8b 46 3e	 mov	 eax, DWORD PTR [esi+62]
  0047d	89 85 52 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+66], eax
  00483	8b 46 42	 mov	 eax, DWORD PTR [esi+66]
  00486	89 85 56 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+70], eax
  0048c	8b 46 46	 mov	 eax, DWORD PTR [esi+70]
  0048f	89 85 5a ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+74], eax
  00495	8b 46 4a	 mov	 eax, DWORD PTR [esi+74]
  00498	89 85 5e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+78], eax
  0049e	8b 46 4e	 mov	 eax, DWORD PTR [esi+78]
  004a1	89 85 62 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+82], eax
  004a7	8a 46 52	 mov	 al, BYTE PTR [esi+82]
  004aa	88 85 66 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+86], al
  004b0	8b 46 53	 mov	 eax, DWORD PTR [esi+83]
  004b3	89 85 67 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+87], eax
  004b9	8a 46 57	 mov	 al, BYTE PTR [esi+87]
  004bc	88 85 6b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+91], al
  004c2	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  004c5	89 85 6c ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+92], eax
  004cb	8a 46 5c	 mov	 al, BYTE PTR [esi+92]
  004ce	88 85 70 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+96], al
  004d4	8b 46 5d	 mov	 eax, DWORD PTR [esi+93]
  004d7	89 85 71 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+97], eax
  004dd	8a 46 61	 mov	 al, BYTE PTR [esi+97]
  004e0	88 85 75 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+101], al
  004e6	8b 46 62	 mov	 eax, DWORD PTR [esi+98]
  004e9	89 85 76 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+102], eax
  004ef	8a 46 66	 mov	 al, BYTE PTR [esi+102]
  004f2	88 85 7a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+106], al
  004f8	8b 46 67	 mov	 eax, DWORD PTR [esi+103]
  004fb	89 85 7b ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+107], eax
  00501	8b 46 6b	 mov	 eax, DWORD PTR [esi+107]
  00504	89 85 7f ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+111], eax
  0050a	8b 46 6f	 mov	 eax, DWORD PTR [esi+111]
  0050d	89 45 83	 mov	 DWORD PTR _t$15[ebp+115], eax
  00510	8b 46 73	 mov	 eax, DWORD PTR [esi+115]
  00513	89 45 87	 mov	 DWORD PTR _t$15[ebp+119], eax
  00516	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  00519	89 45 8b	 mov	 DWORD PTR _t$15[ebp+123], eax
  0051c	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  0051f	89 45 8f	 mov	 DWORD PTR _t$15[ebp+127], eax
  00522	8b 46 7f	 mov	 eax, DWORD PTR [esi+127]
  00525	89 45 93	 mov	 DWORD PTR _t$15[ebp+131], eax
  00528	8b 86 83 00 00
	00		 mov	 eax, DWORD PTR [esi+131]
  0052e	89 45 97	 mov	 DWORD PTR _t$15[ebp+135], eax
  00531	8b 86 87 00 00
	00		 mov	 eax, DWORD PTR [esi+135]
  00537	89 45 9b	 mov	 DWORD PTR _t$15[ebp+139], eax
  0053a	8b 86 8b 00 00
	00		 mov	 eax, DWORD PTR [esi+139]
  00540	89 45 9f	 mov	 DWORD PTR _t$15[ebp+143], eax
  00543	8b 86 8f 00 00
	00		 mov	 eax, DWORD PTR [esi+143]
  00549	89 45 a3	 mov	 DWORD PTR _t$15[ebp+147], eax
  0054c	66 8b 86 93 00
	00 00		 mov	 ax, WORD PTR [esi+147]
  00553	66 89 45 a7	 mov	 WORD PTR _t$15[ebp+151], ax
  00557	8a 86 95 00 00
	00		 mov	 al, BYTE PTR [esi+149]
  0055d	88 45 a9	 mov	 BYTE PTR _t$15[ebp+153], al
  00560	8a 86 96 00 00
	00		 mov	 al, BYTE PTR [esi+150]
  00566	88 45 aa	 mov	 BYTE PTR _t$15[ebp+154], al
  00569	8a 86 97 00 00
	00		 mov	 al, BYTE PTR [esi+151]
  0056f	88 45 ab	 mov	 BYTE PTR _t$15[ebp+155], al

; 740  : 							ITABLE_ZERO_INT(dwVnumRange);

  00572	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _t$15[ebp+4], 0
$LN69@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 340  : 		DWORD dwVnum = table->dwVnum;

  0057c	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR _t$15[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00582	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR _dwVnum$14[ebp]
  00588	50		 push	 eax
  00589	8d 85 44 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$6[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 340  : 		DWORD dwVnum = table->dwVnum;

  0058f	89 bd c8 fd ff
	ff		 mov	 DWORD PTR _dwVnum$14[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00595	50		 push	 eax
  00596	8b cb		 mov	 ecx, ebx
  00598	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0059d	8b 9d 4c fd ff
	ff		 mov	 ebx, DWORD PTR __Loc$6[ebp+8]
  005a3	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  005a7	75 1e		 jne	 SHORT $LN411@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  005a9	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  005ac	72 19		 jb	 SHORT $LN411@LoadItemTa
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 343  : 		if (m_ItemMap.end() == f)

  005ae	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  005b4	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  005b7	74 0e		 je	 SHORT $LN411@LoadItemTa

; 370  : 		}
; 371  : 		else
; 372  : 		{
; 373  : 			pItemData = f->second;

  005b9	8b 5b 14	 mov	 ebx, DWORD PTR [ebx+20]
  005bc	89 9d c8 fd ff
	ff		 mov	 DWORD PTR _pItemData$12[ebp], ebx
  005c2	e9 0c 01 00 00	 jmp	 $LN13@LoadItemTa
$LN411@LoadItemTa:

; 344  : 		{
; 345  : 			_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", dwVnum);

  005c7	57		 push	 edi
  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  005cd	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  005d0	6a 41		 push	 65			; 00000041H
  005d2	50		 push	 eax
  005d3	e8 00 00 00 00	 call	 __snprintf

; 346  : 
; 347  : 			if (CResourceManager::Instance().IsFileExist(szName) == false)

  005d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  005de	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  005e1	83 c4 10	 add	 esp, 16			; 00000010H
  005e4	50		 push	 eax
  005e5	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  005ea	84 c0		 test	 al, al
  005ec	0f 85 9c 00 00
	00		 jne	 $LN17@LoadItemTa

; 349  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  005f2	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  005fe	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00601	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 349  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  00607	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00609	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 349  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  0060f	89 b5 c8 fd ff
	ff		 mov	 DWORD PTR $T13[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00615	50		 push	 eax
  00616	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$5[ebp]
  0061c	50		 push	 eax
  0061d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00622	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR __Loc$5[ebp+8]
  00628	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0062c	75 12		 jne	 SHORT $LN15@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0062e	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00631	72 0d		 jb	 SHORT $LN15@LoadItemTa
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 351  : 				if (itVnum != itemNameMap.end())

  00633	3b 8d c0 fd ff
	ff		 cmp	 ecx, DWORD PTR _itemNameMap$[ebp]
  00639	74 05		 je	 SHORT $LN15@LoadItemTa

; 352  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", itVnum->second);

  0063b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0063e	eb 0f		 jmp	 SHORT $LN16@LoadItemTa
$LN15@LoadItemTa:

; 353  : 				else
; 354  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", dwVnum-dwVnum % 10);

  00640	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00645	f7 e7		 mul	 edi
  00647	c1 ea 03	 shr	 edx, 3
  0064a	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0064d	03 c0		 add	 eax, eax
$LN16@LoadItemTa:

; 355  : 
; 356  : 				if (CResourceManager::Instance().IsFileExist(szName) == false)

  0064f	50		 push	 eax
  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  00655	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00658	6a 41		 push	 65			; 00000041H
  0065a	50		 push	 eax
  0065b	e8 00 00 00 00	 call	 __snprintf
  00660	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00666	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00669	83 c4 10	 add	 esp, 16			; 00000010H
  0066c	50		 push	 eax
  0066d	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00672	84 c0		 test	 al, al
  00674	75 18		 jne	 SHORT $LN17@LoadItemTa

; 357  : 				{
; 358  : 					#ifdef _DEBUG
; 359  : 					TraceError("%16s(#%-5d) cannot find icon file. setting to default.", table->szName, dwVnum);
; 360  : 					#endif
; 361  : 					const DWORD EmptyBowl = 27995;
; 362  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", EmptyBowl);

  00676	68 5b 6d 00 00	 push	 27995			; 00006d5bH
  0067b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  00680	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00683	6a 41		 push	 65			; 00000041H
  00685	50		 push	 eax
  00686	e8 00 00 00 00	 call	 __snprintf
  0068b	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@LoadItemTa:

; 363  : 				}
; 364  : 			}
; 365  : 
; 366  : 			pItemData = CItemData::New();

  0068e	e8 00 00 00 00	 call	 ?New@CItemData@@SAPAV1@XZ ; CItemData::New
  00693	8b d8		 mov	 ebx, eax

; 367  : 
; 368  : 			pItemData->SetDefaultItemData(szName);

  00695	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00698	6a 00		 push	 0
  0069a	50		 push	 eax
  0069b	8b cb		 mov	 ecx, ebx
  0069d	89 9d c8 fd ff
	ff		 mov	 DWORD PTR _pItemData$12[ebp], ebx
  006a3	e8 00 00 00 00	 call	 ?SetDefaultItemData@CItemData@@QAEXPBD0@Z ; CItemData::SetDefaultItemData

; 369  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006a8	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  006ae	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  006b4	50		 push	 eax
  006b5	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  006bb	89 bd 7c fd ff
	ff		 mov	 DWORD PTR $T9[ebp], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 369  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006c1	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  006c2	89 9d 80 fd ff
	ff		 mov	 DWORD PTR $T9[ebp+4], ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 369  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006c8	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
  006cd	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR _t$15[ebp]
$LN13@LoadItemTa:

; 375  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006d3	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  006d9	50		 push	 eax
  006da	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  006df	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006e2	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 375  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006e8	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006ea	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 375  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006f0	89 b5 90 fd ff
	ff		 mov	 DWORD PTR $T11[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006f6	50		 push	 eax
  006f7	8d 85 2c fd ff
	ff		 lea	 eax, DWORD PTR __Loc$4[ebp]
  006fd	50		 push	 eax
  006fe	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00703	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR __Loc$4[ebp+8]
  00709	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0070d	75 11		 jne	 SHORT $LN405@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0070f	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00712	72 0c		 jb	 SHORT $LN405@LoadItemTa
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 375  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  00714	3b 8d c0 fd ff
	ff		 cmp	 ecx, DWORD PTR _itemNameMap$[ebp]
  0071a	0f 85 ca 00 00
	00		 jne	 $LN288@LoadItemTa
$LN405@LoadItemTa:

; 376  : 			itemNameMap.insert(std::map<DWORD,DWORD>::value_type(GetHashCode(table->szName),table->dwVnum));

  00720	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  00726	50		 push	 eax
  00727	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  0072c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0072f	89 bd 88 fd ff
	ff		 mov	 DWORD PTR $T10[ebp+4], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 376  : 			itemNameMap.insert(std::map<DWORD,DWORD>::value_type(GetHashCode(table->szName),table->dwVnum));

  00735	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  00737	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  0073d	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00743	89 b5 84 fd ff
	ff		 mov	 DWORD PTR $T10[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  00749	50		 push	 eax
  0074a	8d 85 18 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
  00756	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0075a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0075d	66 0f d6 85 50
	fd ff ff	 movq	 QWORD PTR __Loc$7[ebp], xmm0

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00765	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00769	75 05		 jne	 SHORT $LN218@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0076b	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0076e	73 7a		 jae	 SHORT $LN288@LoadItemTa
$LN218@LoadItemTa:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  00770	81 bd c4 fd ff
	ff aa aa aa 0a	 cmp	 DWORD PTR _itemNameMap$[ebp+4], 178956970 ; 0aaaaaaaH
  0077a	0f 84 20 01 00
	00		 je	 $LN321@LoadItemTa

; 1020 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00780	8b b5 c0 fd ff
	ff		 mov	 esi, DWORD PTR _itemNameMap$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00786	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _itemNameMap$[ebp]
  0078c	89 85 74 fd ff
	ff		 mov	 DWORD PTR $T8[ebp], eax

; 85   :         return ::operator new(_Bytes);

  00792	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00794	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00798	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  007a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007a7	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  007ad	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 792  :     }

  007b0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  007b4	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007be	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007c1	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  007c7	50		 push	 eax
  007c8	ff b5 54 fd ff
	ff		 push	 DWORD PTR __Loc$7[ebp+4]

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007ce	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007d1	ff b5 50 fd ff
	ff		 push	 DWORD PTR __Loc$7[ebp]

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  007d7	89 30		 mov	 DWORD PTR [eax], esi

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  007d9	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  007dc	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 816  :         this->_Ptr->_Color = _Red;

  007df	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007e5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
$LN288@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 377  : 		pItemData->SetItemTableData(table);

  007ea	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp]
  007f0	8b cb		 mov	 ecx, ebx
  007f2	50		 push	 eax
  007f3	e8 00 00 00 00	 call	 ?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ; CItemData::SetItemTableData

; 378  : 		if (0 != table->dwVnumRange)

  007f8	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _t$15[ebp+4], 0
  007ff	74 26		 je	 SHORT $LN2@LoadItemTa

; 379  : 		{
; 380  : 			m_vec_ItemRange.push_back(pItemData);

  00801	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00807	83 c1 0c	 add	 ecx, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0080a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0080d	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00810	74 08		 je	 SHORT $LN301@LoadItemTa

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00812	89 18		 mov	 DWORD PTR [eax], ebx

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00814	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00818	eb 0d		 jmp	 SHORT $LN2@LoadItemTa
$LN301@LoadItemTa:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0081a	8d 95 c8 fd ff
	ff		 lea	 edx, DWORD PTR _pItemData$12[ebp]
  00820	52		 push	 edx
  00821	50		 push	 eax
  00822	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
$LN2@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 329  : 	for (DWORD i = 0; i < dwElements; ++i)

  00827	8b 9d a8 fd ff
	ff		 mov	 ebx, DWORD PTR _i$1$[ebp]
  0082d	8b bd a4 fd ff
	ff		 mov	 edi, DWORD PTR tv3252[ebp]
  00833	43		 inc	 ebx
  00834	8b b5 a0 fd ff
	ff		 mov	 esi, DWORD PTR tv3253[ebp]
  0083a	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH
  00840	81 85 b8 fd ff
	ff 9e 00 00 00	 add	 DWORD PTR tv3251[ebp], 158 ; 0000009eH
  0084a	81 c6 98 00 00
	00		 add	 esi, 152		; 00000098H
  00850	3b 9d 9c fd ff
	ff		 cmp	 ebx, DWORD PTR _dwElements$[ebp]
  00856	89 9d a8 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
  0085c	8b 9d 98 fd ff
	ff		 mov	 ebx, DWORD PTR _this$1$[ebp]
  00862	89 bd a4 fd ff
	ff		 mov	 DWORD PTR tv3252[ebp], edi
  00868	89 b5 a0 fd ff
	ff		 mov	 DWORD PTR tv3253[ebp], esi
  0086e	0f 82 ec f9 ff
	ff		 jb	 $LL4@LoadItemTa
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  00874	8b b5 8c fd ff
	ff		 mov	 esi, DWORD PTR _pbData$1$[ebp]
$LN3@LoadItemTa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 384  : 	delete [] pbData;

  0087a	56		 push	 esi
  0087b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00880	83 c4 04	 add	 esp, 4
  00883	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]

; 385  : 	return true;

  00889	b3 01		 mov	 bl, 1
  0088b	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
  00890	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00896	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  0089b	e9 46 f8 ff ff	 jmp	 $LN27@LoadItemTa
$LN321@LoadItemTa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1624 :             _Throw_tree_length_error();

  008a0	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN417@LoadItemTa:
  008a5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$6:
  00021	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?LoadItemTable@CItemManager@@QAE_NPBD@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 14 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-748]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemTable@CItemManager@@QAE_NPBD@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemTable@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemTable
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemList@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_textFileLoader$ = -904					; size = 16
_pData$ = -888						; size = 4
_dwItemVNum$1$ = -884					; size = 4
_this$GSCopy$1$ = -880					; size = 4
_c_szFileName$GSCopy$1$ = -876				; size = 4
_TokenVector$ = -872					; size = 12
_File$ = -860						; size = 324
_szMildModelPath$2 = -536				; size = 260
_szMildIconPath$3 = -276				; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemList@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemList, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemList@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 03 00
	00		 sub	 esp, 892		; 0000037cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	89 bd 90 fc ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00036	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 109  : 	CMappedFile File;

  00039	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0003f	89 b5 94 fc ff
	ff		 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], esi
  00045	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 110  : 	LPCVOID pData;
; 111  : 
; 112  : 	if (!CEterPackManager::Instance().Get(File, c_szFileName, &pData))

  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00050	8d 85 88 fc ff
	ff		 lea	 eax, DWORD PTR _pData$[ebp]
  00056	50		 push	 eax
  00057	56		 push	 esi
  00058	8d 85 a4 fc ff
	ff		 lea	 eax, DWORD PTR _File$[ebp]
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0006b	84 c0		 test	 al, al
  0006d	75 07		 jne	 SHORT $LN5@LoadItemLi
  0006f	32 db		 xor	 bl, bl
  00071	e9 e7 02 00 00	 jmp	 $LN22@LoadItemLi
$LN5@LoadItemLi:

; 113  : 		return false;
; 114  : 
; 115  : 	CMemoryTextFileLoader textFileLoader;

  00076	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0007c	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 116  : 	textFileLoader.Bind(File.Size(), pData);

  00081	ff b5 88 fc ff
	ff		 push	 DWORD PTR _pData$[ebp]
  00087	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00091	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00096	50		 push	 eax
  00097	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0009d	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a2	c7 85 98 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp], 0
  000ac	c7 85 9c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+4], 0
  000b6	c7 85 a0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 119  :     for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  000c0	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	33 db		 xor	 ebx, ebx
  000cc	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 a7 01 00
	00		 je	 $LN3@LoadItemLi
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadItemLi:

; 120  : 	{
; 121  : 		if (!textFileLoader.SplitLine(i, &TokenVector, "\t"))

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  000e5	8d 85 98 fc ff
	ff		 lea	 eax, DWORD PTR _TokenVector$[ebp]
  000eb	50		 push	 eax
  000ec	53		 push	 ebx
  000ed	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000f3	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  000f8	84 c0		 test	 al, al
  000fa	0f 84 6c 01 00
	00		 je	 $LN2@LoadItemLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00100	8b 95 9c fc ff
	ff		 mov	 edx, DWORD PTR _TokenVector$[ebp+4]
  00106	8b 8d 98 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  0010c	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 124  : 		if (!(TokenVector.size() == 3 || TokenVector.size() == 4))

  0010e	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00111	83 f8 18	 cmp	 eax, 24			; 00000018H
  00114	72 1c		 jb	 SHORT $LN7@LoadItemLi
  00116	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00119	83 f8 18	 cmp	 eax, 24			; 00000018H
  0011c	72 14		 jb	 SHORT $LN7@LoadItemLi

; 125  : 		{
; 126  : 			TraceError(" CItemManager::LoadItemList(%s) - StrangeLine in %d\n", c_szFileName, i);

  0011e	53		 push	 ebx
  0011f	56		 push	 esi
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@
  00125	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 			continue;

  0012d	e9 3a 01 00 00	 jmp	 $LN2@LoadItemLi
$LN7@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00132	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00136	8d 71 30	 lea	 esi, DWORD PTR [ecx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00139	72 02		 jb	 SHORT $LN40@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0013b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN40@LoadItemLi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 134  : 		DWORD dwItemVNum=atoi(c_rstrID.c_str());

  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 __atoi64
  00143	83 c4 04	 add	 esp, 4
  00146	89 85 8c fc ff
	ff		 mov	 DWORD PTR _dwItemVNum$1$[ebp], eax

; 135  : 
; 136  : 		CItemData * pItemData = MakeItemData(dwItemVNum);

  0014c	8b cf		 mov	 ecx, edi
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData

; 137  : 
; 138  : 		extern BOOL USE_VIETNAM_CONVERT_WEAPON_VNUM;
; 139  : 		if (USE_VIETNAM_CONVERT_WEAPON_VNUM)

  00154	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?USE_VIETNAM_CONVERT_WEAPON_VNUM@@3HA, 0 ; USE_VIETNAM_CONVERT_WEAPON_VNUM
  0015b	8b f8		 mov	 edi, eax
  0015d	0f 84 bf 00 00
	00		 je	 $LN8@LoadItemLi

; 140  : 		{
; 141  : 			extern DWORD Vietnam_ConvertWeaponVnum(DWORD vnum);
; 142  : 			DWORD dwMildItemVnum = Vietnam_ConvertWeaponVnum(dwItemVNum);

  00163	ff b5 8c fc ff
	ff		 push	 DWORD PTR _dwItemVNum$1$[ebp]
  00169	e8 00 00 00 00	 call	 ?Vietnam_ConvertWeaponVnum@@YAKK@Z ; Vietnam_ConvertWeaponVnum
  0016e	8b c8		 mov	 ecx, eax
  00170	83 c4 04	 add	 esp, 4

; 143  : 			if (dwMildItemVnum == dwItemVNum)

  00173	3b 8d 8c fc ff
	ff		 cmp	 ecx, DWORD PTR _dwItemVNum$1$[ebp]
  00179	75 3f		 jne	 SHORT $LN10@LoadItemLi

; 144  : 			{
; 145  : 				if (4 == TokenVector.size())

  0017b	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  00181	8b 8d 98 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  00187	2b c1		 sub	 eax, ecx
  00189	83 e8 60	 sub	 eax, 96			; 00000060H
  0018c	83 f8 18	 cmp	 eax, 24			; 00000018H
  0018f	73 19		 jae	 SHORT $LN12@LoadItemLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00191	83 79 5c 10	 cmp	 DWORD PTR [ecx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00195	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00198	72 02		 jb	 SHORT $LN51@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0019a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN51@LoadItemLi:

; 2319 :         return _BUF_SIZE <= _Myres;

  0019c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  001a0	72 12		 jb	 SHORT $LN13@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001a2	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 154  : 			}

  001a4	50		 push	 eax
  001a5	e9 ae 00 00 00	 jmp	 $LN174@LoadItemLi
$LN12@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  001aa	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  001ae	72 02		 jb	 SHORT $LN65@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001b0	8b 36		 mov	 esi, DWORD PTR [esi]
$LN65@LoadItemLi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 152  : 					pItemData->SetDefaultItemData(c_rstrIcon.c_str());

  001b2	33 c0		 xor	 eax, eax
$LN13@LoadItemLi:

; 154  : 			}

  001b4	50		 push	 eax
  001b5	e9 9e 00 00 00	 jmp	 $LN174@LoadItemLi
$LN10@LoadItemLi:

; 155  : 			else
; 156  : 			{
; 157  : 				DWORD dwMildBaseVnum = dwMildItemVnum / 10 * 10;

  001ba	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  001bf	f7 e1		 mul	 ecx

; 158  : 				char szMildIconPath[MAX_PATH];
; 159  : 				sprintf(szMildIconPath, "icon/item/%.5d.tga", dwMildBaseVnum);

  001c1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  001c7	c1 ea 03	 shr	 edx, 3
  001ca	8d 34 92	 lea	 esi, DWORD PTR [edx+edx*4]
  001cd	03 f6		 add	 esi, esi
  001cf	56		 push	 esi
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _sprintf

; 160  : 				if (4 == TokenVector.size())

  001db	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e4	2b 85 98 fc ff
	ff		 sub	 eax, DWORD PTR _TokenVector$[ebp]
  001ea	83 e8 60	 sub	 eax, 96			; 00000060H
  001ed	83 f8 18	 cmp	 eax, 24			; 00000018H
  001f0	73 25		 jae	 SHORT $LN14@LoadItemLi

; 161  : 				{
; 162  : 					char szMildModelPath[MAX_PATH];
; 163  : 					sprintf(szMildModelPath, "d:/ymir work/item/weapon/%.5d.gr2", dwMildBaseVnum);

  001f2	56		 push	 esi
  001f3	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szMildModelPath$2[ebp]
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _sprintf
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  : 					pItemData->SetDefaultItemData(szMildIconPath, szMildModelPath);

  00207	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szMildModelPath$2[ebp]
  0020d	50		 push	 eax
  0020e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  00214	50		 push	 eax

; 165  : 				}

  00215	eb 42		 jmp	 SHORT $LN175@LoadItemLi
$LN14@LoadItemLi:

; 166  : 				else
; 167  : 				{
; 168  : 					pItemData->SetDefaultItemData(szMildIconPath);

  00217	6a 00		 push	 0
  00219	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  0021f	50		 push	 eax

; 169  : 				}
; 170  : 			}
; 171  : 		}

  00220	eb 37		 jmp	 SHORT $LN175@LoadItemLi
$LN8@LoadItemLi:

; 172  : 		else
; 173  : 		{
; 174  : 			if (4 == TokenVector.size())

  00222	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  00228	8b 8d 98 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  0022e	2b c1		 sub	 eax, ecx
  00230	83 e8 60	 sub	 eax, 96			; 00000060H
  00233	83 f8 18	 cmp	 eax, 24			; 00000018H
  00236	73 16		 jae	 SHORT $LN16@LoadItemLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00238	83 79 5c 10	 cmp	 DWORD PTR [ecx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0023c	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0023f	72 02		 jb	 SHORT $LN78@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00241	8b 00		 mov	 eax, DWORD PTR [eax]
$LN78@LoadItemLi:

; 2319 :         return _BUF_SIZE <= _Myres;

  00243	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00247	72 02		 jb	 SHORT $LN85@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00249	8b 36		 mov	 esi, DWORD PTR [esi]
$LN85@LoadItemLi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 177  : 				pItemData->SetDefaultItemData(c_rstrIcon.c_str(), c_rstrModelFileName.c_str());

  0024b	50		 push	 eax

; 178  : 			}

  0024c	eb 0a		 jmp	 SHORT $LN174@LoadItemLi
$LN16@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0024e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00252	72 02		 jb	 SHORT $LN92@LoadItemLi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00254	8b 36		 mov	 esi, DWORD PTR [esi]
$LN92@LoadItemLi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 181  : 				pItemData->SetDefaultItemData(c_rstrIcon.c_str());

  00256	6a 00		 push	 0
$LN174@LoadItemLi:

; 119  :     for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  00258	56		 push	 esi
$LN175@LoadItemLi:
  00259	8b cf		 mov	 ecx, edi
  0025b	e8 00 00 00 00	 call	 ?SetDefaultItemData@CItemData@@QAEXPBD0@Z ; CItemData::SetDefaultItemData
  00260	8b b5 94 fc ff
	ff		 mov	 esi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  00266	8b bd 90 fc ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@LoadItemLi:
  0026c	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00272	43		 inc	 ebx
  00273	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00278	3b d8		 cmp	 ebx, eax
  0027a	0f 82 60 fe ff
	ff		 jb	 $LL4@LoadItemLi
$LN3@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00280	8b b5 98 fc ff
	ff		 mov	 esi, DWORD PTR _TokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 186  : 	return true;

  00286	b3 01		 mov	 bl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00288	85 f6		 test	 esi, esi
  0028a	0f 84 c2 00 00
	00		 je	 $LN99@LoadItemLi

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00290	8b bd 9c fc ff
	ff		 mov	 edi, DWORD PTR _TokenVector$[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00296	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00298	74 57		 je	 SHORT $LN105@LoadItemLi
  0029a	66 0f 1f 44 00
	00		 npad	 6
$LL106@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  002a0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  002a3	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002a6	72 2b		 jb	 SHORT $LN125@LoadItemLi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a8	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002aa	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002ab	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002b1	72 16		 jb	 SHORT $LN135@LoadItemLi

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002b3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002b6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002b9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002bb	83 c0 fc	 add	 eax, -4			; fffffffcH
  002be	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002c1	0f 87 c1 00 00
	00		 ja	 $LN156@LoadItemLi

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  002c7	8b c2		 mov	 eax, edx
$LN135@LoadItemLi:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002c9	51		 push	 ecx
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d0	83 c4 08	 add	 esp, 8
$LN125@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  002d3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  002da	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  002e1	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  002e4	83 c6 18	 add	 esi, 24			; 00000018H
  002e7	3b f7		 cmp	 esi, edi
  002e9	75 b5		 jne	 SHORT $LL106@LoadItemLi
  002eb	8b b5 98 fc ff
	ff		 mov	 esi, DWORD PTR _TokenVector$[ebp]
$LN105@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002f1	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp+8]
  002f7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002fc	2b ce		 sub	 ecx, esi
  002fe	f7 e9		 imul	 ecx
  00300	c1 fa 02	 sar	 edx, 2
  00303	8b c2		 mov	 eax, edx
  00305	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00308	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0030a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0030d	8b c6		 mov	 eax, esi
  0030f	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00312	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00318	72 10		 jb	 SHORT $LN159@LoadItemLi

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0031a	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0031d	83 c1 23	 add	 ecx, 35			; 00000023H
  00320	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00322	83 c0 fc	 add	 eax, -4			; fffffffcH
  00325	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00328	77 5e		 ja	 SHORT $LN156@LoadItemLi
$LN159@LoadItemLi:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0032a	51		 push	 ecx
  0032b	56		 push	 esi
  0032c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00331	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00334	c7 85 98 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp], 0

; 1768 :             _Mylast  = nullptr;

  0033e	c7 85 9c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  00348	c7 85 a0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+8], 0
$LN99@LoadItemLi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 186  : 	return true;

  00352	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00358	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN22@LoadItemLi:
  0035d	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  00363	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00368	8a c3		 mov	 al, bl

; 187  : }

  0036a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0036d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00374	59		 pop	 ecx
  00375	5f		 pop	 edi
  00376	5e		 pop	 esi
  00377	5b		 pop	 ebx
  00378	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037b	33 cd		 xor	 ecx, ebp
  0037d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00382	8b e5		 mov	 esp, ebp
  00384	5d		 pop	 ebp
  00385	c2 04 00	 ret	 4
$LN156@LoadItemLi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00388	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN173@LoadItemLi:
  0038d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR _TokenVector$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?LoadItemList@CItemManager@@QAE_NPBD@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 74 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-908]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemList@CItemManager@@QAE_NPBD@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemList@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemList
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemDesc@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
__Loc$2 = -452						; size = 12
_kTextFileLoader$ = -440				; size = 16
_c_rstSumm$1$ = -424					; size = 4
_c_rstDesc$1$ = -420					; size = 4
_pvData$ = -416						; size = 4
_this$1$ = -412						; size = 4
_dwVnum$3 = -408					; size = 4
_kTokenVector$ = -404					; size = 12
$T4 = -389						; size = 1
_kFile$ = -388						; size = 324
$T5 = -64						; size = 24
_stTemp$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemDesc@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemDesc, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 01 00
	00		 sub	 esp, 440		; 000001b8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 210  : 	const VOID* pvData;
; 211  : 	CMappedFile kFile;

  00036	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 212  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00047	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  0004d	50		 push	 eax
  0004e	56		 push	 esi
  0004f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00062	84 c0		 test	 al, al
  00064	75 1a		 jne	 SHORT $LN7@LoadItemDe

; 213  : 	{
; 214  : 		Tracenf("CItemManager::LoadItemDesc(c_szFileName=%s) - Load Error", c_szFileName);

  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@
  0006c	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00071	83 c4 08	 add	 esp, 8
  00074	c6 85 7b fe ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  0007b	e9 39 03 00 00	 jmp	 $LN16@LoadItemDe
$LN7@LoadItemDe:

; 215  : 		return false;
; 216  : 	}
; 217  : 
; 218  : 	CMemoryTextFileLoader kTextFileLoader;

  00080	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00086	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 219  : 	kTextFileLoader.Bind(kFile.Size(), pvData);

  0008b	ff b5 60 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  00091	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00097	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009b	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000a0	50		 push	 eax
  000a1	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000a7	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000ac	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  000b3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000ba	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c1	c6 45 d8 00	 mov	 BYTE PTR _stTemp$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c5	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0
  000cf	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0
  000d9	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 224  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  000e3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000e9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ed	33 ff		 xor	 edi, edi
  000ef	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 da 01 00
	00		 je	 $LN3@LoadItemDe
  000fc	0f 1f 40 00	 npad	 4
$LL4@LoadItemDe:

; 225  : 	{
; 226  : 		if (!kTextFileLoader.SplitLineByTab(i, &kTokenVector))

  00100	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _kTokenVector$[ebp]
  00106	50		 push	 eax
  00107	57		 push	 edi
  00108	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  0010e	e8 00 00 00 00	 call	 ?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CMemoryTextFileLoader::SplitLineByTab
  00113	84 c0		 test	 al, al
  00115	0f 84 a7 01 00
	00		 je	 $LN2@LoadItemDe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011b	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00121	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00126	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  0012c	8b d1		 mov	 edx, ecx
  0012e	2b d6		 sub	 edx, esi
  00130	f7 ea		 imul	 edx
  00132	c1 fa 02	 sar	 edx, 2
  00135	8b c2		 mov	 eax, edx
  00137	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013a	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 229  : 		while (kTokenVector.size()<ITEMDESC_COL_NUM)

  0013c	83 f8 04	 cmp	 eax, 4
  0013f	0f 83 d9 00 00
	00		 jae	 $LN6@LoadItemDe
  00145	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL5@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00150	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00157	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  0015e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00165	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 230  : 			kTokenVector.push_back("");

  00169	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0016d	3b 8d 74 fe ff
	ff		 cmp	 ecx, DWORD PTR _kTokenVector$[ebp+8]
  00173	74 31		 je	 SHORT $LN114@LoadItemDe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00175	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T5[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00179	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0017f	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00184	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00188	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0018b	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T5[ebp+16]
  00190	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00195	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  0019b	83 c1 18	 add	 ecx, 24			; 00000018H
  0019e	89 8d 70 fe ff
	ff		 mov	 DWORD PTR _kTokenVector$[ebp+4], ecx

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001a4	eb 19		 jmp	 SHORT $LN113@LoadItemDe
$LN114@LoadItemDe:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001a6	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  001a9	50		 push	 eax
  001aa	51		 push	 ecx
  001ab	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  001b1	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001b6	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  001bc	8b 55 d4	 mov	 edx, DWORD PTR $T5[ebp+20]
$LN113@LoadItemDe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 230  : 			kTokenVector.push_back("");

  001bf	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  001c3	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001c6	72 32		 jb	 SHORT $LN157@LoadItemDe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c8	8b 4d c0	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001cb	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cc	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ce	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001d4	72 14		 jb	 SHORT $LN167@LoadItemDe

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001d9	83 c2 23	 add	 edx, 35			; 00000023H
  001dc	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001de	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e4	0f 87 fd 01 00
	00		 ja	 $LN263@LoadItemDe
$LN167@LoadItemDe:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001ea	52		 push	 edx
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f1	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  001f7	83 c4 08	 add	 esp, 8
$LN157@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001fa	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  00200	8b d1		 mov	 edx, ecx
  00202	2b d6		 sub	 edx, esi
  00204	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00209	f7 ea		 imul	 edx
  0020b	c1 fa 02	 sar	 edx, 2
  0020e	8b c2		 mov	 eax, edx
  00210	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00213	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 229  : 		while (kTokenVector.size()<ITEMDESC_COL_NUM)

  00215	83 f8 04	 cmp	 eax, 4
  00218	0f 82 32 ff ff
	ff		 jb	 $LL5@LoadItemDe
$LN6@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0021e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00222	72 02		 jb	 SHORT $LN177@LoadItemDe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00224	8b 36		 mov	 esi, DWORD PTR [esi]
$LN177@LoadItemDe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 234  : 		DWORD dwVnum=atoi(kTokenVector[ITEMDESC_COL_VNUM].c_str());

  00226	56		 push	 esi
  00227	e8 00 00 00 00	 call	 __atoi64
  0022c	89 85 68 fe ff
	ff		 mov	 DWORD PTR _dwVnum$3[ebp], eax
  00232	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00235	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
  0023b	8d 48 30	 lea	 ecx, DWORD PTR [eax+48]
  0023e	83 c0 48	 add	 eax, 72			; 00000048H
  00241	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _c_rstDesc$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00247	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _dwVnum$3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0024d	89 85 58 fe ff
	ff		 mov	 DWORD PTR _c_rstSumm$1$[ebp], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 237  : 		TItemMap::iterator f = m_ItemMap.find(dwVnum);

  00253	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00259	51		 push	 ecx
  0025a	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR __Loc$2[ebp]
  00260	51		 push	 ecx
  00261	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00264	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00269	8b b5 44 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  0026f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00273	75 4d		 jne	 SHORT $LN2@LoadItemDe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00275	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _dwVnum$3[ebp]
  0027b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0027e	72 42		 jb	 SHORT $LN2@LoadItemDe

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00280	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  00286	39 70 04	 cmp	 DWORD PTR [eax+4], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 238  : 		if (m_ItemMap.end() == f)

  00289	74 37		 je	 SHORT $LN2@LoadItemDe

; 239  : 			continue;
; 240  : 
; 241  : 		CItemData* pkItemDataFind = f->second;

  0028b	8b 76 14	 mov	 esi, DWORD PTR [esi+20]

; 242  : 
; 243  : 		pkItemDataFind->SetDescription(__SnapString(c_rstDesc, stTemp));

  0028e	8d 45 d8	 lea	 eax, DWORD PTR _stTemp$[ebp]
  00291	50		 push	 eax
  00292	ff b5 5c fe ff
	ff		 push	 DWORD PTR _c_rstDesc$1$[ebp]
  00298	e8 00 00 00 00	 call	 ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
  0029d	83 c4 08	 add	 esp, 8
  002a0	8b ce		 mov	 ecx, esi
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetDescription

; 244  : 		pkItemDataFind->SetSummary(__SnapString(c_rstSumm, stTemp));

  002a8	8d 45 d8	 lea	 eax, DWORD PTR _stTemp$[ebp]
  002ab	50		 push	 eax
  002ac	ff b5 58 fe ff
	ff		 push	 DWORD PTR _c_rstSumm$1$[ebp]
  002b2	e8 00 00 00 00	 call	 ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
  002b7	83 c4 08	 add	 esp, 8
  002ba	8b ce		 mov	 ecx, esi
  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 ?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetSummary
$LN2@LoadItemDe:

; 224  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  002c2	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  002c8	47		 inc	 edi
  002c9	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  002ce	3b f8		 cmp	 edi, eax
  002d0	0f 82 2a fe ff
	ff		 jb	 $LL4@LoadItemDe
$LN3@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  002d6	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 246  : 	return true;

  002dc	c6 85 7b fe ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  002e3	85 c0		 test	 eax, eax
  002e5	0f 84 81 00 00
	00		 je	 $LN221@LoadItemDe

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  002eb	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  002f1	51		 push	 ecx
  002f2	ff b5 70 fe ff
	ff		 push	 DWORD PTR _kTokenVector$[ebp+4]
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002fe	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+8]
  00304	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00309	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0030f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00312	2b ce		 sub	 ecx, esi
  00314	f7 e9		 imul	 ecx
  00316	c1 fa 02	 sar	 edx, 2
  00319	8b c2		 mov	 eax, edx
  0031b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0031e	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00320	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00323	8b c6		 mov	 eax, esi
  00325	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00328	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0032e	72 14		 jb	 SHORT $LN239@LoadItemDe

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00330	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00333	83 c1 23	 add	 ecx, 35			; 00000023H
  00336	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00338	83 c0 fc	 add	 eax, -4			; fffffffcH
  0033b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0033e	0f 87 a3 00 00
	00		 ja	 $LN263@LoadItemDe
$LN239@LoadItemDe:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00344	51		 push	 ecx
  00345	56		 push	 esi
  00346	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0034b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0034e	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0

; 1768 :             _Mylast  = nullptr;

  00358	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  00362	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
$LN221@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0036c	8b 55 ec	 mov	 edx, DWORD PTR _stTemp$[ebp+20]
  0036f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00372	72 28		 jb	 SHORT $LN256@LoadItemDe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00374	8b 4d d8	 mov	 ecx, DWORD PTR _stTemp$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00377	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00378	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0037a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00380	72 10		 jb	 SHORT $LN266@LoadItemDe

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00382	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00385	83 c2 23	 add	 edx, 35			; 00000023H
  00388	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0038a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0038d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00390	77 55		 ja	 SHORT $LN263@LoadItemDe
$LN266@LoadItemDe:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00392	52		 push	 edx
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00399	83 c4 08	 add	 esp, 8
$LN256@LoadItemDe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 246  : 	return true;

  0039c	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  003a2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  003a9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  003b0	c6 45 d8 00	 mov	 BYTE PTR _stTemp$[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 246  : 	return true;

  003b4	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN16@LoadItemDe:
  003b9	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  003bf	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  003c4	8a 85 7b fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]

; 247  : }

  003ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003d4	59		 pop	 ecx
  003d5	5f		 pop	 edi
  003d6	5e		 pop	 esi
  003d7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003da	33 cd		 xor	 ecx, ebp
  003dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	c2 04 00	 ret	 4
$LN263@LoadItemDe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003e7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN282@LoadItemDe:
  003ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 4d d8	 lea	 ecx, DWORD PTR _stTemp$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$3:
  0001e	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$4:
  00029	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?LoadItemDesc@CItemManager@@QAE_NPBD@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 3c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-452]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemDesc@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemDesc
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_dwItemID$ = 8						; size = 4
_ppItemData$ = 12					; size = 4
?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z PROC ; CItemManager::GetItemDataPointer, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi

; 60   : 	if (0 == dwItemID)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwItemID$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 ff		 test	 edi, edi
  0000f	75 09		 jne	 SHORT $LN5@GetItemDat

; 61   : 		return FALSE;

  00011	33 c0		 xor	 eax, eax
  00013	5f		 pop	 edi

; 86   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN5@GetItemDat:
  0001a	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001b	8d 45 08	 lea	 eax, DWORD PTR _dwItemID$[ebp]
  0001e	50		 push	 eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 63   : 	TItemMap::iterator f = m_ItemMap.find(dwItemID);

  0001f	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00022	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00025	8b ce		 mov	 ecx, esi
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00030	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00034	75 1e		 jne	 SHORT $LN53@GetItemDat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00036	3b 79 10	 cmp	 edi, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	72 19		 jb	 SHORT $LN53@GetItemDat

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003b	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 65   : 	if (m_ItemMap.end() == f)

  0003d	74 15		 je	 SHORT $LN53@GetItemDat

; 81   : 	}
; 82   : 
; 83   : 	*ppItemData = f->second;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _ppItemData$[ebp]
  00042	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00045	5e		 pop	 esi
  00046	5f		 pop	 edi
  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 84   : 
; 85   : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1

; 86   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
$LN53@GetItemDat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 68   : 		for (int i = 0; i < n; i++)

  00057	33 f6		 xor	 esi, esi
  00059	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005a	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  0005d	2b 58 0c	 sub	 ebx, DWORD PTR [eax+12]
  00060	c1 fb 02	 sar	 ebx, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 68   : 		for (int i = 0; i < n; i++)

  00063	85 db		 test	 ebx, ebx
  00065	7e 3f		 jle	 SHORT $LN54@GetItemDat
$LL4@GetItemDat:

; 69   : 		{
; 70   : 			CItemData * p = m_vec_ItemRange[i];

  00067	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006a	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 71   : 			const CItemData::TItemTable * pTable = p->GetTable();

  0006d	8b c8		 mov	 ecx, eax
  0006f	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  00072	e8 00 00 00 00	 call	 ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ; CItemData::GetTable

; 72   : 			if ((pTable->dwVnum < dwItemID) &&

  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	3b cf		 cmp	 ecx, edi
  0007b	73 09		 jae	 SHORT $LN2@GetItemDat
  0007d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00080	03 c1		 add	 eax, ecx
  00082	3b f8		 cmp	 edi, eax
  00084	72 0a		 jb	 SHORT $LN47@GetItemDat
$LN2@GetItemDat:

; 68   : 		for (int i = 0; i < n; i++)

  00086	46		 inc	 esi
  00087	3b f3		 cmp	 esi, ebx
  00089	7d 1b		 jge	 SHORT $LN54@GetItemDat
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0008e	eb d7		 jmp	 SHORT $LL4@GetItemDat
$LN47@GetItemDat:

; 73   : 				dwItemID < (pTable->dwVnum + pTable->dwVnumRange))
; 74   : 			{
; 75   : 				*ppItemData = p;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _ppItemData$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _p$1$[ebp]
  00096	5b		 pop	 ebx
  00097	5e		 pop	 esi
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 				return TRUE;

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	5f		 pop	 edi

; 86   : }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN54@GetItemDat:

; 77   : 			}
; 78   : 		}
; 79   : 		Tracef(" CItemManager::GetItemDataPointer - FIND ERROR [%d]\n", dwItemID);

  000a6	57		 push	 edi
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@
  000ac	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000b1	83 c4 08	 add	 esp, 8

; 80   : 		return FALSE;

  000b4	33 c0		 xor	 eax, eax
  000b6	5b		 pop	 ebx
  000b7	5e		 pop	 esi
  000b8	5f		 pop	 edi

; 86   : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ENDP ; CItemManager::GetItemDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ
_TEXT	SEGMENT
?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ PROC ; CItemManager::GetSelectedItemDataPointer, COMDAT
; _this$ = ecx

; 55   : 	return m_pSelectedItemData;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 56   : }

  00003	c3		 ret	 0
?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ ENDP ; CItemManager::GetSelectedItemDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?SelectItemData@CItemManager@@QAEHK@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_dwIndex$ = 8						; size = 4
?SelectItemData@CItemManager@@QAEHK@Z PROC		; CItemManager::SelectItemData, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000b	8d 45 08	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 17   : {

  00012	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00015	50		 push	 eax
  00016	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00019	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00021	8b 5d 08	 mov	 ebx, DWORD PTR _dwIndex$[ebp]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 1e		 jne	 SHORT $LN52@SelectItem
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0002a	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	72 19		 jb	 SHORT $LN52@SelectItem

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002f	39 46 04	 cmp	 DWORD PTR [esi+4], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 20   : 	if (m_ItemMap.end() == f)

  00032	74 14		 je	 SHORT $LN52@SelectItem

; 36   : 	}
; 37   : 
; 38   : 	m_pSelectedItemData = f->second;

  00034	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00037	5f		 pop	 edi
  00038	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 39   : 
; 40   : 	return TRUE;

  0003b	b8 01 00 00 00	 mov	 eax, 1

; 41   : }

  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN52@SelectItem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00048	8b c6		 mov	 eax, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 23   : 		for (int i = 0; i < n; i++)

  0004a	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004c	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  0004f	2b 78 0c	 sub	 edi, DWORD PTR [eax+12]
  00052	c1 ff 02	 sar	 edi, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 23   : 		for (int i = 0; i < n; i++)

  00055	85 ff		 test	 edi, edi
  00057	7e 47		 jle	 SHORT $LN53@SelectItem
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SelectItem:

; 24   : 		{
; 25   : 			CItemData * p = m_vec_ItemRange[i];

  00060	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00063	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 26   : 			const CItemData::TItemTable * pTable = p->GetTable();

  00066	8b c8		 mov	 ecx, eax
  00068	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  0006b	e8 00 00 00 00	 call	 ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ; CItemData::GetTable

; 27   : 			if ((pTable->dwVnum < dwIndex) &&

  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	3b cb		 cmp	 ecx, ebx
  00074	73 09		 jae	 SHORT $LN2@SelectItem
  00076	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00079	03 c1		 add	 eax, ecx
  0007b	3b d8		 cmp	 ebx, eax
  0007d	72 0a		 jb	 SHORT $LN46@SelectItem
$LN2@SelectItem:

; 23   : 		for (int i = 0; i < n; i++)

  0007f	46		 inc	 esi
  00080	3b f7		 cmp	 esi, edi
  00082	7d 1c		 jge	 SHORT $LN53@SelectItem
  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00087	eb d7		 jmp	 SHORT $LL4@SelectItem
$LN46@SelectItem:

; 28   : 				dwIndex < (pTable->dwVnum + pTable->dwVnumRange))
; 29   : 			{
; 30   : 				m_pSelectedItemData = p;

  00089	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  0008c	8b 45 08	 mov	 eax, DWORD PTR _p$1$[ebp]
  0008f	5f		 pop	 edi
  00090	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 31   : 				return TRUE;

  00093	b8 01 00 00 00	 mov	 eax, 1

; 41   : }

  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
$LN53@SelectItem:

; 32   : 			}
; 33   : 		}
; 34   : 		Tracef(" CItemManager::SelectItemData - FIND ERROR [%d]\n", dwIndex);

  000a0	53		 push	 ebx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@
  000a6	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000ab	83 c4 08	 add	 esp, 8

; 35   : 		return FALSE;

  000ae	33 c0		 xor	 eax, eax
  000b0	5f		 pop	 edi

; 41   : }

  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?SelectItemData@CItemManager@@QAEHK@Z ENDP		; CItemManager::SelectItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ?Destroy@CItemManager@@QAEXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?Destroy@CItemManager@@QAEXXZ PROC			; CItemManager::Destroy, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1143 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00006	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00009	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 478  : {

  0000c	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 480  : 	for (i=m_ItemMap.begin(); i!=m_ItemMap.end(); ++i)

  0000f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00012	3b c6		 cmp	 eax, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 480  : 	for (i=m_ItemMap.begin(); i!=m_ItemMap.end(); ++i)

  00014	74 1c		 je	 SHORT $LN3@Destroy
$LL23@Destroy:

; 481  : 		CItemData::Delete(i->second);

  00016	ff 70 14	 push	 DWORD PTR [eax+20]
  00019	e8 00 00 00 00	 call	 ?Delete@CItemData@@SAXPAV1@@Z ; CItemData::Delete
  0001e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 202  :         _Mybase::operator++();

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  00024	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >,std::_Iterator_base0>::operator++

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00029	8b 33		 mov	 esi, DWORD PTR [ebx]

; 236  :         return this->_Ptr == _Right._Ptr;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002e	3b c6		 cmp	 eax, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 480  : 	for (i=m_ItemMap.begin(); i!=m_ItemMap.end(); ++i)

  00030	75 e4		 jne	 SHORT $LL23@Destroy
$LN3@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00032	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00035	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00039	75 25		 jne	 SHORT $LN46@Destroy
  0003b	0f 1f 44 00 00	 npad	 5
$LL45@Destroy:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00040	ff 77 08	 push	 DWORD PTR [edi+8]
  00043	8b cb		 mov	 ecx, ebx
  00045	53		 push	 ebx
  00046	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0004b	8b c7		 mov	 eax, edi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0004d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004f	6a 18		 push	 24			; 00000018H
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0005a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0005e	74 e0		 je	 SHORT $LL45@Destroy
$LN46@Destroy:

; 1355 :         _Scary->_Mysize = 0;

  00060	5f		 pop	 edi
  00061	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00064	89 36		 mov	 DWORD PTR [esi], esi
  00066	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00069	5e		 pop	 esi
  0006a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00071	5b		 pop	 ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 484  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?Destroy@CItemManager@@QAEXXZ ENDP			; CItemManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ??1CItemManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CItemManager@@UAE@XZ PROC				; CItemManager::~CItemManager, COMDAT
; _this$ = ecx

; 534  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CItemManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemManager@@6B@

; 535  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CItemManager@@QAEXXZ ; CItemManager::Destroy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00033	85 c0		 test	 eax, eax
  00035	74 41		 je	 SHORT $LN6@CItemManag

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 12		 jb	 SHORT $LN22@CItemManag

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00047	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0004a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00052	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00055	77 4a		 ja	 SHORT $LN19@CItemManag

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b c2		 mov	 eax, edx
$LN22@CItemManag:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00059	51		 push	 ecx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00060	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00067	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0006a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1769 :             _Myend   = nullptr;

  00071	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN6@CItemManag:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 536  : }

  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1094 :         _Scary->_Erase_head(_Getal());

  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h

; 19   : 	{

  00081	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 536  : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN19@CItemManag:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CItemManag:
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
  000a9	cc		 int	 3
  000aa	cc		 int	 3
  000ab	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CItemManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CItemManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CItemManager@@UAE@XZ ENDP				; CItemManager::~CItemManager
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp
;	COMDAT ??0CItemManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItemManager@@QAE@XZ PROC				; CItemManager::CItemManager, COMDAT
; _this$ = ecx

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CItemManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, edi ; CSingleton<CItemManager>::ms_singleton
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 531  : {

  00032	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CItemManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  0003b	6a 18		 push	 24			; 00000018H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 531  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 441  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 350  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 351  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 352  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 353  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1925 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 532  : }

  0006c	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00075	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0007c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\ItemManager.cpp

; 530  : CItemManager::CItemManager() : m_pSelectedItemData(NULL)

  00083	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 532  : }

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItemManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCItemManager@@@@UAE@XZ ; CSingleton<CItemManager>::~CSingleton<CItemManager>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CItemManager@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CItemManager@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CItemManager@@QAE@XZ ENDP				; CItemManager::CItemManager
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z PROC	; CSingleton<CItemManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z ENDP	; CSingleton<CItemManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCItemManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCItemManager@@@@UAE@XZ PROC		; CSingleton<CItemManager>::~CSingleton<CItemManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCItemManager@@@@UAE@XZ ENDP		; CSingleton<CItemManager>::~CSingleton<CItemManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN4@vector

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN22@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN19@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN22@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1768 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN4@vector:
  0006e	5e		 pop	 esi

; 717  :     }

  0006f	c3		 ret	 0
$LN19@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 421  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 4365 :         const size_type _Off = 0, const size_type _Count = npos) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2324 :         if (_Mysize < _Off) {

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]

; 4365 :         const size_type _Off = 0, const size_type _Count = npos) const {

  00006	56		 push	 esi

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00007	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 4365 :         const size_type _Off = 0, const size_type _Count = npos) const {

  0000a	57		 push	 edi

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4596 :         _My_data._Mysize = 0;

  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00018	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0001f	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2324 :         if (_Mysize < _Off) {

  00022	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00025	3b c2		 cmp	 eax, edx
  00027	72 25		 jb	 SHORT $LN36@substr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00029	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  0002c	2b c2		 sub	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0002e	3b c7		 cmp	 eax, edi
  00030	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00033	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00037	72 02		 jb	 SHORT $LN28@substr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN28@substr:

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0003b	03 ca		 add	 ecx, edx
  0003d	57		 push	 edi
  0003e	51		 push	 ecx
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4366 :         // return [_Off, _Off + _Count) as new string
; 4367 :         return basic_string(*this, _Off, _Count, get_allocator());

  00046	5f		 pop	 edi
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 4368 :     }

  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN36@substr:

; 2325 :             _Xran();

  0004e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN34@substr:
  00053	cc		 int	 3
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2337 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
