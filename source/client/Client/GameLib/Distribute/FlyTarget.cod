; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\Distribute\FlyTarget.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
PUBLIC	?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z ; IFlyTargetableObject::AddFlyTargeter
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++
PUBLIC	??0CFlyTarget@@QAE@XZ				; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z	; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z		; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@ABV0@@Z			; CFlyTarget::CFlyTarget
PUBLIC	??1CFlyTarget@@UAE@XZ				; CFlyTarget::~CFlyTarget
PUBLIC	?Clear@CFlyTarget@@QAEXXZ			; CFlyTarget::Clear
PUBLIC	?IsObject@CFlyTarget@@QAE_NXZ			; CFlyTarget::IsObject
PUBLIC	?IsPosition@CFlyTarget@@QAE_NXZ			; CFlyTarget::IsPosition
PUBLIC	?IsValidTarget@CFlyTarget@@QAE_NXZ		; CFlyTarget::IsValidTarget
PUBLIC	?NotifyTargetClear@CFlyTarget@@QAEXXZ		; CFlyTarget::NotifyTargetClear
PUBLIC	?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
PUBLIC	?GetType@CFlyTarget@@QAE?AW4EType@1@XZ		; CFlyTarget::GetType
PUBLIC	?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ; CFlyTarget::GetFlyTarget
PUBLIC	??4CFlyTarget@@QAEAAV0@ABV0@@Z			; CFlyTarget::operator=
PUBLIC	?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z	; CFlyTarget::GetFlyTargetData
PUBLIC	?__Initialize@CFlyTarget@@AAEXXZ		; CFlyTarget::__Initialize
PUBLIC	??_GCFlyTarget@@UAEPAXI@Z			; CFlyTarget::`scalar deleting destructor'
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CFlyTarget@@6B@				; CFlyTarget::`vftable'
PUBLIC	??_R4CFlyTarget@@6B@				; CFlyTarget::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTarget@@@8				; CFlyTarget `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTarget@@8				; CFlyTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTarget@@8				; CFlyTarget::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTarget@@8			; CFlyTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_ECFlyTarget@@UAEPAXI@Z:PROC			; CFlyTarget::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CFlyTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTarget@@8 DD FLAT:??_R0?AVCFlyTarget@@@8 ; CFlyTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTarget@@8
rdata$r	SEGMENT
??_R2CFlyTarget@@8 DD FLAT:??_R1A@?0A@EA@CFlyTarget@@8	; CFlyTarget::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlyTarget@@8
rdata$r	SEGMENT
??_R3CFlyTarget@@8 DD 00H				; CFlyTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTarget@@@8
data$rs	SEGMENT
??_R0?AVCFlyTarget@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTarget@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyTarget@@6B@
rdata$r	SEGMENT
??_R4CFlyTarget@@6B@ DD 00H				; CFlyTarget::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTarget@@@8
	DD	FLAT:??_R3CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_7CFlyTarget@@6B@
CONST	SEGMENT
??_7CFlyTarget@@6B@ DD FLAT:??_R4CFlyTarget@@6B@	; CFlyTarget::`vftable'
	DD	FLAT:??_ECFlyTarget@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z$1
__ehfuncinfo$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z$2
__ehfuncinfo$??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z$2
__ehfuncinfo$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 751  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 752  :         }
; 753  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyTarget@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyTarget@@UAEPAXI@Z PROC				; CFlyTarget::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 18		 push	 24			; 00000018H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlyTarget@@UAEPAXI@Z ENDP				; CFlyTarget::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?__Initialize@CFlyTarget@@AAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?__Initialize@CFlyTarget@@AAEXXZ PROC			; CFlyTarget::__Initialize, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp

; 40   : 	m_v3FlyTargetPosition=D3DXVECTOR3(0.0f,0.0f,0.0f);

  00010	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  00013	0f 14 c0	 unpcklps xmm0, xmm0
  00016	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0001b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 41   : 	m_pFlyTarget=NULL;

  0001e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 42   : 	m_eType=TYPE_NONE;

  00025	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 43   : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?__Initialize@CFlyTarget@@AAEXXZ ENDP			; CFlyTarget::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pFlyTarget$ = 8					; size = 4
?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z PROC		; CFlyTarget::GetFlyTargetData, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	pFlyTarget->m_eType = m_eType;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pFlyTarget$[ebp]
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 112  : 	pFlyTarget->m_v3FlyTargetPosition = m_v3FlyTargetPosition;

  0000c	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00011	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
  00016	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00019	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 113  : 	pFlyTarget->m_pFlyTarget = m_pFlyTarget;

  0001c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0001f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 114  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z ENDP		; CFlyTarget::GetFlyTargetData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??4CFlyTarget@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_pTargeter$ = -4					; size = 4
_rhs$ = 8						; size = 4
??4CFlyTarget@@QAEAAV0@ABV0@@Z PROC			; CFlyTarget::operator=, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 95   : 	if (m_pFlyTarget)

  00007	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000a	85 c9		 test	 ecx, ecx
  0000c	74 0f		 je	 SHORT $LN2@operator
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h

; 26   : 		m_FlyTargeterSet.erase(pTargeter);

  0000e	8d 45 fc	 lea	 eax, DWORD PTR _pTargeter$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp

; 97   : 		m_pFlyTarget->RemoveFlyTargeter(this);

  00011	89 75 fc	 mov	 DWORD PTR _pTargeter$[ebp], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h

; 26   : 		m_FlyTargeterSet.erase(pTargeter);

  00014	50		 push	 eax
  00015	83 c1 04	 add	 ecx, 4
  00018	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
$LN2@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp

; 99   : 	m_eType = rhs.m_eType;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00020	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00023	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 100  : 	m_v3FlyTargetPosition = rhs.m_v3FlyTargetPosition;

  00026	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  0002b	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
  00030	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00033	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 101  : 	m_pFlyTarget = rhs.m_pFlyTarget;

  00036	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00039	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 102  : 	if (m_pFlyTarget)

  0003c	85 c9		 test	 ecx, ecx
  0003e	74 06		 je	 SHORT $LN7@operator

; 103  : 	{
; 104  : 		m_pFlyTarget->AddFlyTargeter(this);

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z ; IFlyTargetableObject::AddFlyTargeter
$LN7@operator:

; 105  : 	}
; 106  : 	return *this;
; 107  : }

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??4CFlyTarget@@QAEAAV0@ABV0@@Z ENDP			; CFlyTarget::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ
_TEXT	SEGMENT
?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ PROC ; CFlyTarget::GetFlyTarget, COMDAT
; _this$ = ecx

; 80   : 	assert(TYPE_OBJECT==GetType() && "CFly::GetFlyTarget");
; 81   : 	return m_pFlyTarget;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 82   : }

  00003	c3		 ret	 0
?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ENDP ; CFlyTarget::GetFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ
_TEXT	SEGMENT
?GetType@CFlyTarget@@QAE?AW4EType@1@XZ PROC		; CFlyTarget::GetType, COMDAT
; _this$ = ecx

; 75   : 	return m_eType;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 76   : }

  00003	c3		 ret	 0
?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ENDP		; CFlyTarget::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ PROC ; CFlyTarget::GetFlyTargetPosition, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 86   : 	if (m_eType == TYPE_OBJECT)

  00010	83 79 14 01	 cmp	 DWORD PTR [ecx+20], 1
  00014	56		 push	 esi
  00015	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00018	75 1a		 jne	 SHORT $LN5@GetFlyTarg

; 87   : 	{
; 88   : 		m_v3FlyTargetPosition = m_pFlyTarget->OnGetFlyTargetPosition();

  0001a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0001d	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	ff 52 04	 call	 DWORD PTR [edx+4]
  00026	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0002a	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$LN5@GetFlyTarg:

; 89   : 	}
; 90   : 	return m_v3FlyTargetPosition;
; 91   : }

  00034	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00037	8b c6		 mov	 eax, esi
  00039	33 cd		 xor	 ecx, ebp
  0003b	5e		 pop	 esi
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ENDP ; CFlyTarget::GetFlyTargetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?NotifyTargetClear@CFlyTarget@@QAEXXZ
_TEXT	SEGMENT
?NotifyTargetClear@CFlyTarget@@QAEXXZ PROC		; CFlyTarget::NotifyTargetClear, COMDAT
; _this$ = ecx

; 68   : 	//if (m_eType == FLY_TARGET_TYPE_OBJECT)
; 69   : 	m_eType = TYPE_POSITION;

  00000	c7 41 14 02 00
	00 00		 mov	 DWORD PTR [ecx+20], 2

; 70   : 	m_pFlyTarget = 0;

  00007	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 71   : }

  0000e	c3		 ret	 0
?NotifyTargetClear@CFlyTarget@@QAEXXZ ENDP		; CFlyTarget::NotifyTargetClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsValidTarget@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
?IsValidTarget@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsValidTarget, COMDAT
; _this$ = ecx

; 63   : 	return (TYPE_NONE!=GetType());

  00000	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00005	85 c0		 test	 eax, eax
  00007	0f 95 c0	 setne	 al

; 64   : }

  0000a	c3		 ret	 0
?IsValidTarget@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsValidTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsPosition@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
?IsPosition@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsPosition, COMDAT
; _this$ = ecx

; 58   : 	return (TYPE_POSITION==GetType());

  00000	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00005	83 f8 02	 cmp	 eax, 2
  00008	0f 94 c0	 sete	 al

; 59   : }

  0000b	c3		 ret	 0
?IsPosition@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsObject@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
?IsObject@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsObject, COMDAT
; _this$ = ecx

; 53   : 	return (TYPE_OBJECT==GetType());

  00000	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00005	83 f8 01	 cmp	 eax, 1
  00008	0f 94 c0	 sete	 al

; 54   : }

  0000b	c3		 ret	 0
?IsObject@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ?Clear@CFlyTarget@@QAEXXZ
_TEXT	SEGMENT
?Clear@CFlyTarget@@QAEXXZ PROC				; CFlyTarget::Clear, COMDAT
; _this$ = ecx

; 47   : 	m_eType = TYPE_NONE;

  00000	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 48   : 	m_pFlyTarget = 0;

  00007	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 49   : }

  0000e	c3		 ret	 0
?Clear@CFlyTarget@@QAEXXZ ENDP				; CFlyTarget::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??1CFlyTarget@@UAE@XZ
_TEXT	SEGMENT
_pTargeter$ = -4					; size = 4
??1CFlyTarget@@UAE@XZ PROC				; CFlyTarget::~CFlyTarget, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 34   : 	if (m_pFlyTarget)

  00004	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFlyTarget@@6B@
  0000d	85 c0		 test	 eax, eax
  0000f	74 0f		 je	 SHORT $LN2@CFlyTarget

; 35   : 		m_pFlyTarget->RemoveFlyTargeter(this);

  00011	89 4d fc	 mov	 DWORD PTR _pTargeter$[ebp], ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h

; 26   : 		m_FlyTargeterSet.erase(pTargeter);

  00014	8d 4d fc	 lea	 ecx, DWORD PTR _pTargeter$[ebp]
  00017	51		 push	 ecx
  00018	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
$LN2@CFlyTarget:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp

; 36   : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CFlyTarget@@UAE@XZ ENDP				; CFlyTarget::~CFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0CFlyTarget@@QAE@ABV0@@Z PROC				; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyTarget@@6B@

; 27   : 	__Initialize();

  0000c	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 28   : 
; 29   : 	*this = rhs;

  00011	ff 75 08	 push	 DWORD PTR _rhs$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 30   : }

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@ABV0@@Z ENDP				; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3FlyTargetPosition$ = 8				; size = 4
??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z PROC		; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyTarget@@6B@

; 19   : 	__Initialize();

  0000c	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 20   : 
; 21   : 	m_eType=TYPE_POSITION;
; 22   : 	m_v3FlyTargetPosition=v3FlyTargetPosition;

  00011	8b 45 08	 mov	 eax, DWORD PTR _v3FlyTargetPosition$[ebp]
  00014	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
  00024	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 23   : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z ENDP		; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z
_TEXT	SEGMENT
_pFlyTarget$ = 8					; size = 4
??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z PROC	; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyTarget@@6B@

; 11   : 	__Initialize();

  0000c	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 12   : 
; 13   : 	m_eType=TYPE_OBJECT;
; 14   : 	m_pFlyTarget=pFlyTarget;

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pFlyTarget$[ebp]

; 15   : 	m_pFlyTarget->AddFlyTargeter(this);

  00014	56		 push	 esi
  00015	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  0001c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0001f	e8 00 00 00 00	 call	 ?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z ; IFlyTargetableObject::AddFlyTargeter

; 16   : }

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z ENDP	; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@XZ
_TEXT	SEGMENT
??0CFlyTarget@@QAE@XZ PROC				; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 5    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyTarget@@6B@

; 6    : 	__Initialize();

  00009	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 7    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CFlyTarget@@QAE@XZ ENDP				; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 64   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 457  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 458  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())
; 59   :         } else {
; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 61   :         }
; 62   : 
; 63   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 64   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h
;	COMDAT ?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z
_TEXT	SEGMENT
$T4 = -24						; size = 8
__Myhead$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$1$ = 8						; size = 4
_pTargeter$ = 8						; size = 4
?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z PROC ; IFlyTargetableObject::AddFlyTargeter, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b 7d 08	 mov	 edi, DWORD PTR _pTargeter$[ebp]

; 21   : 		m_FlyTargeterSet.insert(pTargeter);

  0002b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	33 f6		 xor	 esi, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h

; 21   : 		m_FlyTargeterSet.insert(pTargeter);

  00032	89 45 08	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00035	8b d1		 mov	 edx, ecx
  00037	89 4d f0	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
  0003a	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  0003d	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00041	75 1e		 jne	 SHORT $LN11@AddFlyTarg
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00043	8b c3		 mov	 eax, ebx
$LL10@AddFlyTarg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00045	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00047	39 78 10	 cmp	 DWORD PTR [eax+16], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0004a	73 05		 jae	 SHORT $LN12@AddFlyTarg

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  0004c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1612 :             } else {

  0004f	eb 04		 jmp	 SHORT $LN13@AddFlyTarg
$LN12@AddFlyTarg:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00051	8b d0		 mov	 edx, eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00053	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@AddFlyTarg:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00055	1b f6		 sbb	 esi, esi
  00057	46		 inc	 esi
  00058	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005c	74 e7		 je	 SHORT $LL10@AddFlyTarg
  0005e	8b 45 08	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN11@AddFlyTarg:

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00061	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00065	75 05		 jne	 SHORT $LN19@AddFlyTarg
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00067	3b 7a 10	 cmp	 edi, DWORD PTR [edx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006a	73 43		 jae	 SHORT $LN89@AddFlyTarg
$LN19@AddFlyTarg:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  0006c	81 78 04 cc cc
	cc 0c		 cmp	 DWORD PTR [eax+4], 214748364 ; 0cccccccH
  00073	74 4e		 je	 SHORT $LN106@AddFlyTarg
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00075	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax

; 85   :         return ::operator new(_Bytes);

  00078	6a 14		 push	 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00081	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  00088	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008d	8b 4d f0	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00090	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00093	89 78 10	 mov	 DWORD PTR [eax+16], edi

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00096	89 08		 mov	 DWORD PTR [eax], ecx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00098	50		 push	 eax

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00099	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0009c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a2	56		 push	 esi
  000a3	53		 push	 ebx

; 816  :         this->_Ptr->_Color = _Red;

  000a4	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000aa	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
$LN89@AddFlyTarg:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\GameLib\FlyTarget.h

; 22   : 	}

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN106@AddFlyTarg:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1624 :             _Throw_tree_length_error();

  000c3	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN104@AddFlyTarg:
  000c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddFlyTargeter@IFlyTargetableObject@@AAEXPAVCFlyTarget@@@Z ENDP ; IFlyTargetableObject::AddFlyTargeter
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1186 = -8						; size = 4
tv1182 = -8						; size = 4
tv1149 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract, COMDAT
; _this$ = ecx

; 508  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 509  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 510  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++

; 511  : 
; 512  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 513  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 514  :         _Nodeptr _Pnode = _Erasednode;
; 515  : 
; 516  :         if (_Pnode->_Left->_Isnil) {

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	75 18		 jne	 SHORT $LN86@Extract

; 517  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 518  :         } else if (_Pnode->_Right->_Isnil) {

  00027	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002b	74 04		 je	 SHORT $LN7@Extract

; 519  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002d	8b f8		 mov	 edi, eax

; 520  :         } else { // two subtrees, must lift successor node to replace erased

  0002f	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 521  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 522  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	3b ca		 cmp	 ecx, edx

; 523  :         }
; 524  : 
; 525  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00039	0f 85 8b 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 526  :             _Fixnodeparent = _Erasednode->_Parent;
; 527  :             if (!_Fixnode->_Isnil) {

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00046	75 03		 jne	 SHORT $LN11@Extract

; 528  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 529  :             }
; 530  : 
; 531  :             if (_Myhead->_Parent == _Erasednode) {

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00050	75 05		 jne	 SHORT $LN12@Extract

; 532  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00052	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00055	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 533  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00057	39 16		 cmp	 DWORD PTR [esi], edx
  00059	75 04		 jne	 SHORT $LN14@Extract

; 534  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005b	89 3e		 mov	 DWORD PTR [esi], edi

; 535  :             } else {

  0005d	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 536  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 537  :             }
; 538  : 
; 539  :             if (_Myhead->_Left == _Erasednode) {

  00062	8b 03		 mov	 eax, DWORD PTR [ebx]
  00064	39 10		 cmp	 DWORD PTR [eax], edx
  00066	75 2b		 jne	 SHORT $LN16@Extract

; 540  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00068	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006c	74 04		 je	 SHORT $LN42@Extract
  0006e	8b d6		 mov	 edx, esi
  00070	eb 1c		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 457  :         while (!_Pnode->_Left->_Isnil) {

  00072	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 540  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00074	8b d7		 mov	 edx, edi

; 457  :         while (!_Pnode->_Left->_Isnil) {

  00076	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007a	75 12		 jne	 SHORT $LN48@Extract
  0007c	0f 1f 40 00	 npad	 4
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 458  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN48@Extract:

; 540  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008e	89 10		 mov	 DWORD PTR [eax], edx
  00090	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
$LN16@Extract:

; 541  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 542  :             }
; 543  : 
; 544  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00098	75 2b		 jne	 SHORT $LN17@Extract

; 545  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@Extract
  000a0	8b ce		 mov	 ecx, esi
  000a2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 546  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 547  :             }
; 548  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000a8	eb 7c		 jmp	 SHORT $LN55@Extract
$LN44@Extract:

; 449  :         while (!_Pnode->_Right->_Isnil) {

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 545  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000ad	8b cf		 mov	 ecx, edi

; 449  :         while (!_Pnode->_Right->_Isnil) {

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN52@Extract
$LL51@Extract:

; 450  :             _Pnode = _Pnode->_Right;

  000b5	8b c8		 mov	 ecx, eax
  000b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 545  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000c2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 546  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 547  :             }
; 548  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000c5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000c8	eb 5c		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 549  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 550  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 551  : 
; 552  :             if (_Pnode == _Erasednode->_Right) {

  000d1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000d4	75 04		 jne	 SHORT $LN18@Extract

; 553  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000d6	8b f1		 mov	 esi, ecx

; 554  :             } else { // successor further down, link in place of erased

  000d8	eb 1a		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 555  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 556  :                 if (!_Fixnode->_Isnil) {

  000da	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000de	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e1	75 03		 jne	 SHORT $LN20@Extract

; 557  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000e3	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 558  :                 }
; 559  : 
; 560  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000e6	89 3e		 mov	 DWORD PTR [esi], edi

; 561  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000e8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 562  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 563  :             }
; 564  : 
; 565  :             if (_Myhead->_Parent == _Erasednode) {

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f6	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  000f9	75 05		 jne	 SHORT $LN21@Extract

; 566  :                 _Myhead->_Parent = _Pnode; // link down from root

  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000fe	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 567  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00100	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00103	39 10		 cmp	 DWORD PTR [eax], edx
  00105	75 04		 jne	 SHORT $LN23@Extract

; 568  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 569  :             } else {

  00109	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 570  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN24@Extract:

; 573  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00111	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 573  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 105  :     _Left    = _STD move(_Right);

  00117	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0011a	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 106  :     _Right   = _STD move(_Tmp);

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00123	88 50 0c	 mov	 BYTE PTR [eax+12], dl
$LN55@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 577  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00126	80 fa 01	 cmp	 dl, 1
  00129	0f 85 46 01 00
	00		 jne	 $LN25@Extract

; 578  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 37 01 00
	00		 je	 $LN3@Extract
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Extract:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f8	 mov	 DWORD PTR tv1186[ebp], esi
  00147	0f 85 24 01 00
	00		 jne	 $LN3@Extract

; 579  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	3b f9		 cmp	 edi, ecx
  00151	0f 85 a2 00 00
	00		 jne	 $LN26@Extract

; 580  :                     _Pnode = _Fixnodeparent->_Right;

  00157	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 581  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0015a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0015e	75 43		 jne	 SHORT $LN87@Extract

; 582  :                         _Pnode->_Color         = _Black;

  00160	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 583  :                         _Fixnodeparent->_Color = _Red;

  00167	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00176	75 03		 jne	 SHORT $LN57@Extract

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00178	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  00181	8b 03		 mov	 eax, DWORD PTR [ebx]
  00183	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00186	75 05		 jne	 SHORT $LN58@Extract

; 475  :             _Myhead->_Parent = _Pnode;

  00188	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0018b	eb 0e		 jmp	 SHORT $LN61@Extract
$LN58@Extract:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0018d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00190	3b 30		 cmp	 esi, DWORD PTR [eax]
  00192	75 04		 jne	 SHORT $LN60@Extract

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  00194	89 08		 mov	 DWORD PTR [eax], ecx

; 478  :         } else {

  00196	eb 03		 jmp	 SHORT $LN61@Extract
$LN60@Extract:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@Extract:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  0019b	89 31		 mov	 DWORD PTR [ecx], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  0019d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 584  :                         _Lrotate(_Fixnodeparent);
; 585  :                         _Pnode = _Fixnodeparent->_Right;

  001a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 586  :                     }
; 587  : 
; 588  :                     if (_Pnode->_Isnil) {

  001a3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a7	0f 85 b1 00 00
	00		 jne	 $LN2@Extract

; 589  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 590  :                     } else if (_Pnode->_Left->_Color == _Black
; 591  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  001b3	75 0d		 jne	 SHORT $LN89@Extract
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001bc	0f 84 98 00 00
	00		 je	 $LN93@Extract
$LN89@Extract:

; 592  :                         _Pnode->_Color = _Red;
; 593  :                         _Fixnode       = _Fixnodeparent;
; 594  :                     } else { // must rearrange right subtree
; 595  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c5	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001c9	75 13		 jne	 SHORT $LN33@Extract

; 596  :                             _Pnode->_Left->_Color = _Black;

  001cb	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 597  :                             _Pnode->_Color        = _Red;

  001cf	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 598  :                             _Rrotate(_Pnode);

  001d3	51		 push	 ecx
  001d4	8b cb		 mov	 ecx, ebx
  001d6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate

; 599  :                             _Pnode = _Fixnodeparent->_Right;

  001db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 600  :                         }
; 601  : 
; 602  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  001de	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001e1	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 603  :                         _Fixnodeparent->_Color = _Black;

  001e4	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 604  :                         _Pnode->_Right->_Color = _Black;

  001e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 605  :                         _Lrotate(_Fixnodeparent);

  001eb	8b cb		 mov	 ecx, ebx
  001ed	56		 push	 esi
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate

; 606  :                         break; // tree now recolored/rebalanced

  001f7	eb 78		 jmp	 SHORT $LN3@Extract
$LN26@Extract:

; 607  :                     }
; 608  :                 } else { // fixup right subtree
; 609  :                     _Pnode = _Fixnodeparent->_Left;
; 610  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  001f9	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001fd	75 44		 jne	 SHORT $LN88@Extract

; 611  :                         _Pnode->_Color         = _Black;

  001ff	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00203	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 612  :                         _Fixnodeparent->_Color = _Red;

  00205	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  00209	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020c	89 06		 mov	 DWORD PTR [esi], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  0020e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	75 03		 jne	 SHORT $LN64@Extract

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00217	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0021a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	75 05		 jne	 SHORT $LN65@Extract

; 497  :             _Myhead->_Parent = _Pnode;

  00227	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0022a	eb 0f		 jmp	 SHORT $LN68@Extract
$LN65@Extract:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0022c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0022f	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00232	75 05		 jne	 SHORT $LN67@Extract

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  00237	eb 02		 jmp	 SHORT $LN68@Extract
$LN67@Extract:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00239	89 08		 mov	 DWORD PTR [eax], ecx
$LN68@Extract:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0023b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 505  :         _Wherenode->_Parent = _Pnode;

  0023e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 613  :                         _Rrotate(_Fixnodeparent);
; 614  :                         _Pnode = _Fixnodeparent->_Left;

  00241	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN88@Extract:

; 615  :                     }
; 616  : 
; 617  :                     if (_Pnode->_Isnil) {

  00243	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00247	75 15		 jne	 SHORT $LN2@Extract

; 618  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 619  :                     } else if (_Pnode->_Right->_Color == _Black
; 620  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  00250	75 3a		 jne	 SHORT $LN90@Extract
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00258	75 32		 jne	 SHORT $LN90@Extract
$LN93@Extract:

; 578  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0025a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  0025e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00260	8b 4d f8	 mov	 ecx, DWORD PTR tv1186[ebp]
  00263	8b f9		 mov	 edi, ecx
  00265	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00268	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026b	0f 85 cf fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 635  :                         break; // tree now recolored/rebalanced
; 636  :                     }
; 637  :                 }
; 638  :             }
; 639  : 
; 640  :             _Fixnode->_Color = _Black; // stopping node is black

  00271	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 641  :         }
; 642  : 
; 643  :         if (0 < _Mysize) {

  00275	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00278	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0027b	85 c9		 test	 ecx, ecx
  0027d	74 04		 je	 SHORT $LN40@Extract

; 644  :             --_Mysize;

  0027f	49		 dec	 ecx
  00280	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 645  :         }
; 646  : 
; 647  :         return _Erasednode;
; 648  :     }

  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN90@Extract:

; 621  :                         _Pnode->_Color = _Red;
; 622  :                         _Fixnode       = _Fixnodeparent;
; 623  :                     } else { // must rearrange left subtree
; 624  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  0028c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028e	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00292	75 12		 jne	 SHORT $LN39@Extract

; 625  :                             _Pnode->_Right->_Color = _Black;

  00294	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 626  :                             _Pnode->_Color         = _Red;

  00298	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 627  :                             _Lrotate(_Pnode);

  0029c	51		 push	 ecx
  0029d	8b cb		 mov	 ecx, ebx
  0029f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate

; 628  :                             _Pnode = _Fixnodeparent->_Left;

  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 629  :                         }
; 630  : 
; 631  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002a6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002a9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 632  :                         _Fixnodeparent->_Color = _Black;

  002ac	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 633  :                         _Pnode->_Left->_Color  = _Black;

  002b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 634  :                         _Rrotate(_Fixnodeparent);

  002b2	8b cb		 mov	 ecx, ebx
  002b4	56		 push	 esi
  002b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
  002be	eb b1		 jmp	 SHORT $LN3@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate, COMDAT
; _this$ = ecx

; 486  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 497  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;
; 505  :         _Wherenode->_Parent = _Pnode;
; 506  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;
; 505  :         _Wherenode->_Parent = _Pnode;
; 506  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 500  :         } else {
; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;
; 505  :         _Wherenode->_Parent = _Pnode;
; 506  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate, COMDAT
; _this$ = ecx

; 464  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 475  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;
; 483  :         _Wherenode->_Parent = _Pnode;
; 484  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;
; 483  :         _Wherenode->_Parent = _Pnode;
; 484  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 478  :         } else {
; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;
; 483  :         _Wherenode->_Parent = _Pnode;
; 484  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
__First$ = -12						; size = 4
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Off$1$ = 8						; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase, COMDAT
; _this$ = ecx

; 1338 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1691 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  0000b	8b 38		 mov	 edi, DWORD PTR [eax]

; 1692 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  0000d	8b f7		 mov	 esi, edi

; 1338 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  0000f	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 1691 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00012	89 7d f8	 mov	 DWORD PTR __Head$1$[ebp], edi
  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	8b d0		 mov	 edx, eax

; 1693 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails
; 1694 : 
; 1695 :         while (!_Pnode->_Isnil) {

  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 26		 jne	 SHORT $LN5@erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00020	8b 5d 08	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  00023	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LL4@erase:
  00025	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00028	3b cb		 cmp	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1697 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  0002a	73 05		 jae	 SHORT $LN8@erase

; 1698 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0002c	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 1699 :             } else { // _Pnode not less than _Keyval, remember it

  0002f	eb 0f		 jmp	 SHORT $LN9@erase
$LN8@erase:

; 1700 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  00031	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00035	74 05		 je	 SHORT $LN10@erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00037	3b d9		 cmp	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1700 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  00039	0f 42 fa	 cmovb	 edi, edx
$LN10@erase:

; 1701 :                     _Hinode = _Pnode; // _Pnode greater, remember it
; 1702 :                 }
; 1703 : 
; 1704 :                 _Lonode = _Pnode;

  0003c	8b f2		 mov	 esi, edx

; 1705 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  0003e	8b 12		 mov	 edx, DWORD PTR [edx]
$LN9@erase:

; 1693 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails
; 1694 : 
; 1695 :         while (!_Pnode->_Isnil) {

  00040	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00044	74 df		 je	 SHORT $LL4@erase
$LN5@erase:

; 1706 :             }
; 1707 :         }
; 1708 : 
; 1709 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound

  00046	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0004a	75 02		 jne	 SHORT $LN15@erase
  0004c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN15@erase:

; 1710 :         while (!_Pnode->_Isnil) {

  0004e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00052	75 20		 jne	 SHORT $LN7@erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00057	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@erase:
  00060	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1711 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00063	73 06		 jae	 SHORT $LN11@erase

; 1712 :                 // _Pnode greater than _Keyval, remember it
; 1713 :                 _Hinode = _Pnode;

  00065	8b f8		 mov	 edi, eax

; 1714 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00067	8b 00		 mov	 eax, DWORD PTR [eax]

; 1715 :             } else {

  00069	eb 03		 jmp	 SHORT $LN12@erase
$LN11@erase:

; 1716 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0006b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN12@erase:

; 1710 :         while (!_Pnode->_Isnil) {

  0006e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00072	74 ec		 je	 SHORT $LL6@erase
$LN7@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1595 :         _Iter_diff_t<_InIt> _Off = 0;

  00074	33 db		 xor	 ebx, ebx
  00076	8b c6		 mov	 eax, esi
  00078	89 5d 08	 mov	 DWORD PTR __Off$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  0007b	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1596 :         for (; _UFirst != _ULast; ++_UFirst) {

  0007d	74 45		 je	 SHORT $LN30@erase
  0007f	90		 npad	 1
$LL37@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00080	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1597 :             ++_Off;

  00083	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00084	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00088	74 1d		 je	 SHORT $LN36@erase

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0008a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 10		 jne	 SHORT $LN152@erase
$LL34@erase:
  00093	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00096	75 0b		 jne	 SHORT $LN152@erase

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00098	8b c1		 mov	 eax, ecx
  0009a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000a1	74 f0		 je	 SHORT $LL34@erase
$LN152@erase:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  000a3	8b c1		 mov	 eax, ecx

; 59   :         } else {

  000a5	eb 16		 jmp	 SHORT $LN41@erase
$LN36@erase:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000a7	8b c1		 mov	 eax, ecx

; 457  :         while (!_Pnode->_Left->_Isnil) {

  000a9	8b 10		 mov	 edx, DWORD PTR [eax]
  000ab	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000af	75 0c		 jne	 SHORT $LN41@erase
$LL40@erase:
  000b1	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 458  :             _Pnode = _Pnode->_Left;

  000b3	8b c2		 mov	 eax, edx
  000b5	8b d1		 mov	 edx, ecx
  000b7	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000bb	74 f4		 je	 SHORT $LL40@erase
$LN41@erase:

; 98   :         return _Ptr == _Right._Ptr;

  000bd	3b c7		 cmp	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1596 :         for (; _UFirst != _ULast; ++_UFirst) {

  000bf	75 bf		 jne	 SHORT $LL37@erase
  000c1	89 5d 08	 mov	 DWORD PTR __Off$1$[ebp], ebx
$LN30@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR __Head$1$[ebp]

; 1339 :         const auto _Where = _Eqrange(_Keyval);
; 1340 :         const _Unchecked_const_iterator _First(_Where.first, nullptr);
; 1341 :         const _Unchecked_const_iterator _Last(_Where.second, nullptr);
; 1342 :         const auto _Num = static_cast<size_type>(_STD distance(_First, _Last));
; 1343 :         _Erase_unchecked(_First, _Last);

  000c7	89 75 f4	 mov	 DWORD PTR __First$[ebp], esi

; 98   :         return _Ptr == _Right._Ptr;

  000ca	3b 30		 cmp	 esi, DWORD PTR [eax]

; 1300 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  000cc	75 55		 jne	 SHORT $LN131@erase
  000ce	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000d2	74 4f		 je	 SHORT $LN131@erase

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000d7	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000db	75 29		 jne	 SHORT $LN62@erase
  000dd	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LL61@erase:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  000e0	ff 76 08	 push	 DWORD PTR [esi+8]
  000e3	8b cb		 mov	 ecx, ebx
  000e5	53		 push	 ebx
  000e6	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000eb	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  000ed	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000ef	6a 14		 push	 20			; 00000014H
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f7	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000fa	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000fe	74 e0		 je	 SHORT $LL61@erase
  00100	8b 5d 08	 mov	 ebx, DWORD PTR __Off$1$[ebp]
  00103	8b 45 f8	 mov	 eax, DWORD PTR __Head$1$[ebp]
$LN62@erase:

; 1352 :         _Head->_Parent  = _Head;

  00106	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1353 :         _Head->_Left    = _Head;

  00109	89 00		 mov	 DWORD PTR [eax], eax

; 1354 :         _Head->_Right   = _Head;

  0010b	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1355 :         _Scary->_Mysize = 0;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00111	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN151@erase:
  00118	5f		 pop	 edi

; 1344 :         return _Num;
; 1345 :     }

  00119	5e		 pop	 esi
  0011a	8b c3		 mov	 eax, ebx
  0011c	5b		 pop	 ebx
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 04 00	 ret	 4
$LN131@erase:

; 98   :         return _Ptr == _Right._Ptr;

  00123	3b f7		 cmp	 esi, edi

; 1307 :         while (_First != _Last) {

  00125	74 f1		 je	 SHORT $LN151@erase
  00127	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL48@erase:

; 68   :         ++*this;

  00130	8d 4d f4	 lea	 ecx, DWORD PTR __First$[ebp]
  00133	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++

; 1292 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00138	56		 push	 esi
  00139	8b cb		 mov	 ecx, ebx
  0013b	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00140	6a 14		 push	 20			; 00000014H
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  00148	8b 75 f4	 mov	 esi, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  0014e	3b f7		 cmp	 esi, edi

; 1307 :         while (_First != _Last) {

  00150	75 de		 jne	 SHORT $LL48@erase

; 1344 :         return _Num;
; 1345 :     }

  00152	8b 45 08	 mov	 eax, DWORD PTR __Off$1$[ebp]
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 421  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
