; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\Distribute\ModelInstanceCollisionDetection.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::GetMeshMatrixPointer
PUBLIC	?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ; CGrannyModelInstance::Intersect
PUBLIC	?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox
PUBLIC	?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
PUBLIC	??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ	; stl_stack_pool<SBoundBox>::~stl_stack_pool<SBoundBox>
PUBLIC	??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
PUBLIC	?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
PUBLIC	??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z	; stl_stack_pool<SBoundBox>::`scalar deleting destructor'
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7?$stl_stack_pool@USBoundBox@@@@6B@		; stl_stack_pool<SBoundBox>::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$stl_stack_pool@USBoundBox@@@@6B@		; stl_stack_pool<SBoundBox>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8	; stl_stack_pool<SBoundBox> `RTTI Type Descriptor'
PUBLIC	??_R3?$stl_stack_pool@USBoundBox@@@@8		; stl_stack_pool<SBoundBox>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$stl_stack_pool@USBoundBox@@@@8		; stl_stack_pool<SBoundBox>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8	; stl_stack_pool<SBoundBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4b189680
PUBLIC	__real@cb189680
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__imp__GrannyGetWorldPose4x4@8:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?IntersectCube@CGraphicCollisionObject@@IAE_NPBUD3DXMATRIX@@MMMMMMAAUD3DXVECTOR3@@1PAM22@Z:PROC ; CGraphicCollisionObject::IntersectCube
EXTRN	?GetMeshCount@CGrannyModel@@QBEHXZ:PROC		; CGrannyModel::GetMeshCount
EXTRN	?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ:PROC ; CGrannyModel::GetGrannyModelPointer
EXTRN	?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPBHI@Z:PROC ; CGrannyModelInstance::__GetMeshBoneIndices
EXTRN	?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUworld_pose@granny@@XZ:PROC ; CGrannyModelInstance::__GetWorldPosePtr
EXTRN	??_E?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z:PROC ; stl_stack_pool<SBoundBox>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayOrig
EXTRN	?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayDir
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA DD 01H DUP (?) ; `CGrannyModelInstance::Intersect'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __real@cb189680
CONST	SEGMENT
__real@cb189680 DD 0cb189680r			; -1e+07
CONST	ENDS
;	COMDAT __real@4b189680
CONST	SEGMENT
__real@4b189680 DD 04b189680r			; 1e+07
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8 DD FLAT:??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8 ; stl_stack_pool<SBoundBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R2?$stl_stack_pool@USBoundBox@@@@8 DD FLAT:??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8 ; stl_stack_pool<SBoundBox>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R3?$stl_stack_pool@USBoundBox@@@@8 DD 00H		; stl_stack_pool<SBoundBox>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8
data$rs	SEGMENT
??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8 DD FLAT:??_7type_info@@6B@ ; stl_stack_pool<SBoundBox> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$stl_stack_pool@USBoundBox@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$stl_stack_pool@USBoundBox@@@@6B@
rdata$r	SEGMENT
??_R4?$stl_stack_pool@USBoundBox@@@@6B@ DD 00H		; stl_stack_pool<SBoundBox>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8
	DD	FLAT:??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A
_DATA	SEGMENT
?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A DD FLAT:??_7?$stl_stack_pool@USBoundBox@@@@6B@ ; `CGrannyModelInstance::Intersect'::`2'::s_boundBoxPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7?$stl_stack_pool@USBoundBox@@@@6B@
CONST	SEGMENT
??_7?$stl_stack_pool@USBoundBox@@@@6B@ DD FLAT:??_R4?$stl_stack_pool@USBoundBox@@@@6B@ ; stl_stack_pool<SBoundBox>::`vftable'
	DD	FLAT:??_E?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z$0
__ehfuncinfo$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$1
__ehfuncinfo$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z PROC ; std::_Copy_memmove<SBoundBox *,SBoundBox *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ENDP ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
$T2 = 8							; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1229 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1230 :         if (_Newsize > max_size()) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000a	8b d9		 mov	 ebx, ecx
  0000c	81 ff ff ff ff
	07		 cmp	 edi, 134217727		; 07ffffffH
  00012	0f 87 f4 00 00
	00		 ja	 $LN90@Resize_rea

; 1232 :         }
; 1233 : 
; 1234 :         auto& _My_data    = _Mypair._Myval2;
; 1235 :         pointer& _Myfirst = _My_data._Myfirst;
; 1236 :         pointer& _Mylast  = _My_data._Mylast;
; 1237 : 
; 1238 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1232 :         }
; 1233 : 
; 1234 :         auto& _My_data    = _Mypair._Myval2;
; 1235 :         pointer& _Myfirst = _My_data._Myfirst;
; 1236 :         pointer& _Mylast  = _My_data._Mylast;
; 1237 : 
; 1238 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00022	c1 f9 05	 sar	 ecx, 5
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002b	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0002d	c1 f9 05	 sar	 ecx, 5

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 10		 jbe	 SHORT $LN10@Resize_rea

; 1689 :             return _Max; // geometric growth would overflow

  0003a	be e0 ff ff ff	 mov	 esi, -32		; ffffffe0H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00045	83 c4 04	 add	 esp, 4
  00048	eb 3e		 jmp	 SHORT $LN88@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004a	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

  0004d	3b f7		 cmp	 esi, edi
  0004f	73 18		 jae	 SHORT $LN11@Resize_rea

; 1695 :             return _Newsize; // geometric growth would be insufficient

  00051	8b f7		 mov	 esi, edi
$LN85@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 69   :     return _Count * _Ty_size;

  00053	c1 e6 05	 shl	 esi, 5

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00056	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0005c	72 19		 jb	 SHORT $LN22@Resize_rea

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00064	83 c4 04	 add	 esp, 4
  00067	eb 1f		 jmp	 SHORT $LN88@Resize_rea
$LN11@Resize_rea:

; 64   :         if (_Count > _Max_possible) {

  00069	81 fe ff ff ff
	07		 cmp	 esi, 134217727		; 07ffffffH
  0006f	0f 87 9c 00 00
	00		 ja	 $LN91@Resize_rea
  00075	eb dc		 jmp	 SHORT $LN85@Resize_rea
$LN22@Resize_rea:

; 243  :     if (_Bytes != 0) {

  00077	85 f6		 test	 esi, esi
  00079	74 0b		 je	 SHORT $LN23@Resize_rea

; 85   :         return ::operator new(_Bytes);

  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00081	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00084	eb 02		 jmp	 SHORT $LN88@Resize_rea
$LN23@Resize_rea:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00086	33 c0		 xor	 eax, eax
$LN88@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1242 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00088	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1246 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0008b	8b cf		 mov	 ecx, edi
  0008d	c1 e2 05	 shl	 edx, 5
  00090	03 d0		 add	 edx, eax
  00092	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
  00095	2b 4d fc	 sub	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1830 :     for (; 0 < _Count; --_Count) {

  00098	74 12		 je	 SHORT $LN33@Resize_rea
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1246 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0009a	c1 e1 05	 shl	 ecx, 5
  0009d	51		 push	 ecx
  0009e	6a 00		 push	 0
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _memset
  000a6	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ac	50		 push	 eax
  000ad	ff 73 04	 push	 DWORD PTR [ebx+4]
  000b0	ff 33		 push	 DWORD PTR [ebx]
  000b2	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000b7	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000bc	85 c0		 test	 eax, eax
  000be	74 2c		 je	 SHORT $LN67@Resize_rea

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c0	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000c3	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c5	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ce	72 12		 jb	 SHORT $LN77@Resize_rea

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000d0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000d3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000db	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000de	77 27		 ja	 SHORT $LN74@Resize_rea

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000e0	8b c2		 mov	 eax, edx
$LN77@Resize_rea:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000e2	51		 push	 ecx
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e9	83 c4 08	 add	 esp, 8
$LN67@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         _Myfirst = _Newvec;

  000ec	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  000ef	c1 e7 05	 shl	 edi, 5
  000f2	89 03		 mov	 DWORD PTR [ebx], eax
  000f4	03 f8		 add	 edi, eax
  000f6	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  000f9	03 c6		 add	 eax, esi
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00100	5b		 pop	 ebx

; 1255 :     }

  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
$LN74@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00107	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1231 :             _Xlength();

  0010c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
$LN91@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00111	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN87@Resize_rea:
  00116	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ
text$yd	SEGMENT
??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ PROC ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ ; stl_stack_pool<SBoundBox>::~stl_stack_pool<SBoundBox>
??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ ENDP ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z PROC	; stl_stack_pool<SBoundBox>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ ; stl_stack_pool<SBoundBox>::~stl_stack_pool<SBoundBox>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z ENDP	; stl_stack_pool<SBoundBox>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 717  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
;	COMDAT ??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ
_TEXT	SEGMENT
??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ PROC		; stl_stack_pool<SBoundBox>::~stl_stack_pool<SBoundBox>, COMDAT
; _this$ = ecx

; 255  : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$stl_stack_pool@USBoundBox@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@stl_stack_

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@stl_stack_

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN19@stl_stack_

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@stl_stack_:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN6@stl_stack_:
  00051	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 256  : 		}

  00052	c3		 ret	 0
$LN19@stl_stack_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@stl_stack_:
  00058	cc		 int	 3
??1?$stl_stack_pool@USBoundBox@@@@UAE@XZ ENDP		; stl_stack_pool<SBoundBox>::~stl_stack_pool<SBoundBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_BoundBox$ = -48					; size = 32
_meshCount$1$ = -16					; size = 4
_boneIndices$1$ = -12					; size = 4
_m$1$ = -8						; size = 4
_pgrnMesh$1$ = -4					; size = 4
_vtMin$ = 8						; size = 4
_vtMax$ = 12						; size = 4
?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z PROC ; CGrannyModelInstance::GetBoundBox, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 183  : 	if (!m_pgrnModelInstance)

  00009	83 7b 08 00	 cmp	 DWORD PTR [ebx+8], 0
  0000d	0f 84 bd 00 00
	00		 je	 $LN3@GetBoundBo

; 184  : 		return;
; 185  : 
; 186  : 	TBoundBox BoundBox;
; 187  : 
; 188  : 	vtMin->x = vtMin->y = vtMin->z = +100000.0f;

  00013	8b 45 08	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00016	57		 push	 edi
  00017	c7 40 08 00 50
	c3 47		 mov	 DWORD PTR [eax+8], 1203982336 ; 47c35000H
  0001e	c7 40 04 00 50
	c3 47		 mov	 DWORD PTR [eax+4], 1203982336 ; 47c35000H
  00025	c7 00 00 50 c3
	47		 mov	 DWORD PTR [eax], 1203982336 ; 47c35000H

; 189  : 	vtMax->x = vtMax->y = vtMax->z = -100000.0f;

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0002e	c7 40 08 00 50
	c3 c7		 mov	 DWORD PTR [eax+8], -943501312 ; c7c35000H
  00035	c7 40 04 00 50
	c3 c7		 mov	 DWORD PTR [eax+4], -943501312 ; c7c35000H
  0003c	c7 00 00 50 c3
	c7		 mov	 DWORD PTR [eax], -943501312 ; c7c35000H

; 190  : 
; 191  : 	int meshCount = m_pModel->GetMeshCount();

  00042	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00045	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount
  0004a	33 ff		 xor	 edi, edi
  0004c	89 45 f0	 mov	 DWORD PTR _meshCount$1$[ebp], eax
  0004f	89 7d f8	 mov	 DWORD PTR _m$1$[ebp], edi

; 192  : 	for (int m = 0; m < meshCount; ++m)

  00052	85 c0		 test	 eax, eax
  00054	7e 79		 jle	 SHORT $LN20@GetBoundBo
  00056	56		 push	 esi
$LL4@GetBoundBo:

; 193  : 	{
; 194  : 		//const CGrannyMesh* pMesh = m_pModel->GetMeshPointer(m);
; 195  : 		const granny_mesh* pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  00057	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005a	e8 00 00 00 00	 call	 ?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ ; CGrannyModel::GetGrannyModelPointer

; 196  : 
; 197  : 		// WORK
; 198  : 		const granny_int32x* boneIndices = __GetMeshBoneIndices(m);

  0005f	57		 push	 edi
  00060	8b cb		 mov	 ecx, ebx
  00062	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00065	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00068	89 45 fc	 mov	 DWORD PTR _pgrnMesh$1$[ebp], eax
  0006b	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPBHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  00070	8b d0		 mov	 edx, eax

; 199  : 		// END_OF_WORK
; 200  : 		for (int b = 0; b < pgrnMesh->BoneBindingCount; ++b)

  00072	33 f6		 xor	 esi, esi
  00074	8b 45 fc	 mov	 eax, DWORD PTR _pgrnMesh$1$[ebp]
  00077	89 55 f4	 mov	 DWORD PTR _boneIndices$1$[ebp], edx
  0007a	39 70 1c	 cmp	 DWORD PTR [eax+28], esi
  0007d	7e 46		 jle	 SHORT $LN2@GetBoundBo

; 193  : 	{
; 194  : 		//const CGrannyMesh* pMesh = m_pModel->GetMeshPointer(m);
; 195  : 		const granny_mesh* pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  0007f	33 ff		 xor	 edi, edi
$LL7@GetBoundBo:

; 201  : 		{
; 202  : 			const granny_bone_binding& rgrnBoneBinding = pgrnMesh->BoneBindings[b];

  00081	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]

; 203  : 
; 204  : 			MakeBoundBox(&BoundBox,

  00084	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00087	ff 75 0c	 push	 DWORD PTR _vtMax$[ebp]
  0008a	03 c1		 add	 eax, ecx
  0008c	ff 75 08	 push	 DWORD PTR _vtMin$[ebp]
  0008f	50		 push	 eax
  00090	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00093	8b cb		 mov	 ecx, ebx
  00095	03 c7		 add	 eax, edi
  00097	50		 push	 eax
  00098	ff 34 b2	 push	 DWORD PTR [edx+esi*4]
  0009b	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUworld_pose@granny@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8
  000a7	50		 push	 eax
  000a8	8d 45 d0	 lea	 eax, DWORD PTR _BoundBox$[ebp]
  000ab	8b cb		 mov	 ecx, ebx
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _pgrnMesh$1$[ebp]
  000b6	46		 inc	 esi
  000b7	8b 55 f4	 mov	 edx, DWORD PTR _boneIndices$1$[ebp]
  000ba	83 c7 24	 add	 edi, 36			; 00000024H
  000bd	3b 70 1c	 cmp	 esi, DWORD PTR [eax+28]
  000c0	7c bf		 jl	 SHORT $LL7@GetBoundBo
  000c2	8b 7d f8	 mov	 edi, DWORD PTR _m$1$[ebp]
$LN2@GetBoundBo:

; 192  : 	for (int m = 0; m < meshCount; ++m)

  000c5	47		 inc	 edi
  000c6	89 7d f8	 mov	 DWORD PTR _m$1$[ebp], edi
  000c9	3b 7d f0	 cmp	 edi, DWORD PTR _meshCount$1$[ebp]
  000cc	7c 89		 jl	 SHORT $LL4@GetBoundBo
  000ce	5e		 pop	 esi
$LN20@GetBoundBo:
  000cf	5f		 pop	 edi
$LN3@GetBoundBo:
  000d0	5b		 pop	 ebx

; 205  : 						 GrannyGetWorldPose4x4(__GetWorldPosePtr(), boneIndices[b]),
; 206  : 						 rgrnBoneBinding.OBBMin, rgrnBoneBinding.OBBMax, vtMin, vtMax);
; 207  : 		}
; 208  : 	}
; 209  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 08 00	 ret	 8
?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ENDP ; CGrannyModelInstance::GetBoundBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z
_TEXT	SEGMENT
_pBoundBox$ = 8						; size = 4
_mat$ = 12						; size = 4
_OBBMin$ = 16						; size = 4
_OBBMax$ = 20						; size = 4
_vtMin$ = 24						; size = 4
_vtMax$ = 28						; size = 4
?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z PROC ; CGrannyModelInstance::MakeBoundBox, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 12   : 	pBoundBox->sx = OBBMin[0] * mat[0] + OBBMin[1] * mat[4] + OBBMin[2] * mat[8] + mat[12];

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR _OBBMin$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR _pBoundBox$[ebp]
  0000c	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00010	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00014	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00019	f3 0f 59 51 10	 mulss	 xmm2, DWORD PTR [ecx+16]
  0001e	f3 0f 58 d0	 addss	 xmm2, xmm0
  00022	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00027	f3 0f 59 41 20	 mulss	 xmm0, DWORD PTR [ecx+32]
  0002c	f3 0f 58 d0	 addss	 xmm2, xmm0
  00030	f3 0f 58 51 30	 addss	 xmm2, DWORD PTR [ecx+48]
  00035	f3 0f 11 12	 movss	 DWORD PTR [edx], xmm2

; 13   : 	pBoundBox->sy = OBBMin[0] * mat[1] + OBBMin[1] * mat[5] + OBBMin[2] * mat[9] + mat[13];

  00039	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0003d	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00042	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00047	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0004c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00050	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  00055	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  0005a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0005e	f3 0f 58 49 34	 addss	 xmm1, DWORD PTR [ecx+52]
  00063	f3 0f 11 4a 04	 movss	 DWORD PTR [edx+4], xmm1

; 14   : 	pBoundBox->sz = OBBMin[0] * mat[2] + OBBMin[1] * mat[6] + OBBMin[2] * mat[10] + mat[14];

  00068	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0006c	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  00071	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00076	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0007b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0007f	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00084	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]

; 15   : 
; 16   : 	pBoundBox->ex = OBBMax[0] * mat[0] + OBBMax[1] * mat[4] + OBBMax[2] * mat[8] + mat[12];

  00089	8b 45 14	 mov	 eax, DWORD PTR _OBBMax$[ebp]
  0008c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00090	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]
  00095	f3 0f 11 4a 08	 movss	 DWORD PTR [edx+8], xmm1
  0009a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0009f	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  000a4	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000a8	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [eax]
  000ac	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b5	f3 0f 59 41 20	 mulss	 xmm0, DWORD PTR [ecx+32]
  000ba	f3 0f 58 c8	 addss	 xmm1, xmm0
  000be	f3 0f 58 49 30	 addss	 xmm1, DWORD PTR [ecx+48]
  000c3	f3 0f 11 4a 0c	 movss	 DWORD PTR [edx+12], xmm1

; 17   : 	pBoundBox->ey = OBBMax[0] * mat[1] + OBBMax[1] * mat[5] + OBBMax[2] * mat[9] + mat[13];

  000c8	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  000cd	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  000d2	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000d7	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  000db	f3 0f 58 c8	 addss	 xmm1, xmm0
  000df	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  000e4	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  000e9	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ed	f3 0f 58 49 34	 addss	 xmm1, DWORD PTR [ecx+52]
  000f2	f3 0f 11 4a 10	 movss	 DWORD PTR [edx+16], xmm1

; 18   : 	pBoundBox->ez = OBBMax[0] * mat[2] + OBBMax[1] * mat[6] + OBBMax[2] * mat[10] + mat[14];

  000f7	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000fc	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00100	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00105	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  0010a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0010e	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00113	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]

; 19   : 
; 20   : 	vtMin->x = min(vtMin->x, pBoundBox->sx);

  00118	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  0011b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011f	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]
  00124	f3 0f 11 4a 14	 movss	 DWORD PTR [edx+20], xmm1
  00129	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012d	f3 0f 5d c2	 minss	 xmm0, xmm2
  00131	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 21   : 	vtMin->x = min(vtMin->x, pBoundBox->ex);

  00135	f3 0f 5d 42 0c	 minss	 xmm0, DWORD PTR [edx+12]
  0013a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 22   : 	vtMin->y = min(vtMin->y, pBoundBox->sy);

  0013e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00143	f3 0f 5d 42 04	 minss	 xmm0, DWORD PTR [edx+4]
  00148	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 23   : 	vtMin->y = min(vtMin->y, pBoundBox->ey);

  0014d	f3 0f 5d 42 10	 minss	 xmm0, DWORD PTR [edx+16]
  00152	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 24   : 	vtMin->z = min(vtMin->z, pBoundBox->sz);

  00157	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0015c	f3 0f 5d 42 08	 minss	 xmm0, DWORD PTR [edx+8]
  00161	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 25   : 	vtMin->z = min(vtMin->z, pBoundBox->ez);

  00166	f3 0f 5d 42 14	 minss	 xmm0, DWORD PTR [edx+20]
  0016b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 26   : 
; 27   : 	vtMax->x = max(vtMax->x, pBoundBox->sx);

  00170	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00173	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00177	f3 0f 5f 02	 maxss	 xmm0, DWORD PTR [edx]
  0017b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 28   : 	vtMax->x = max(vtMax->x, pBoundBox->ex);

  0017f	f3 0f 5f 42 0c	 maxss	 xmm0, DWORD PTR [edx+12]
  00184	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 29   : 	vtMax->y = max(vtMax->y, pBoundBox->sy);

  00188	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0018d	f3 0f 5f 42 04	 maxss	 xmm0, DWORD PTR [edx+4]
  00192	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 30   : 	vtMax->y = max(vtMax->y, pBoundBox->ey);

  00197	f3 0f 5f 42 10	 maxss	 xmm0, DWORD PTR [edx+16]
  0019c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 31   : 	vtMax->z = max(vtMax->z, pBoundBox->sz);

  001a1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001a6	f3 0f 5f 42 08	 maxss	 xmm0, DWORD PTR [edx+8]
  001ab	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 32   : 	vtMax->z = max(vtMax->z, pBoundBox->ez);

  001b0	f3 0f 5f 42 14	 maxss	 xmm0, DWORD PTR [edx+20]
  001b5	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 33   : }

  001ba	5d		 pop	 ebp
  001bb	c2 18 00	 ret	 24			; 00000018H
?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ENDP ; CGrannyModelInstance::MakeBoundBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
_TEXT	SEGMENT
_vtMin$ = -64						; size = 12
_vtMax$ = -52						; size = 12
_u$ = -40						; size = 4
_v$ = -36						; size = 4
_t$ = -32						; size = 4
_meshCount$1$ = -28					; size = 4
_pgrnMesh$1$ = -24					; size = 4
tv536 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_pMatrix$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
_b$1$ = 20						; size = 4
_pt$ = 20						; size = 4
$T3 = 23						; size = 1
?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z PROC ; CGrannyModelInstance::Intersect, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 38   : 	if (!m_pgrnModelInstance)

  0002d	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00031	0f 84 d3 01 00
	00		 je	 $LN68@Intersect

; 39   : 		return false;
; 40   : 
; 41   : 	float u, v, t;
; 42   : 	bool ret = false;
; 43   : 	*pt = 100000000.0f;

  00037	8b 45 14	 mov	 eax, DWORD PTR _pt$[ebp]

; 50   : 	static stl_stack_pool<TBoundBox> s_boundBoxPool(1024);

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4b189680
  00048	f3 0f 11 45 c8	 movss	 DWORD PTR _vtMin$[ebp+8], xmm0
  0004d	c7 00 20 bc be
	4c		 mov	 DWORD PTR [eax], 1287568416 ; 4cbebc20H
  00053	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00059	f3 0f 11 45 c4	 movss	 DWORD PTR _vtMin$[ebp+4], xmm0
  0005e	f3 0f 11 45 c0	 movss	 DWORD PTR _vtMin$[ebp], xmm0
  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@cb189680
  0006b	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  00073	f3 0f 11 45 d4	 movss	 DWORD PTR _vtMax$[ebp+8], xmm0
  00078	f3 0f 11 45 d0	 movss	 DWORD PTR _vtMax$[ebp+4], xmm0
  0007d	f3 0f 11 45 cc	 movss	 DWORD PTR _vtMax$[ebp], xmm0
  00082	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00088	0f 8f 92 01 00
	00		 jg	 $LN72@Intersect
$LN2@Intersect:

; 51   : 	s_boundBoxPool.clear();

  0008e	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+4, 0

; 52   : 
; 53   : 	int meshCount = m_pModel->GetMeshCount();

  00098	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0009b	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount
  000a0	33 db		 xor	 ebx, ebx
  000a2	89 45 e4	 mov	 DWORD PTR _meshCount$1$[ebp], eax

; 54   : 
; 55   : 	for (int m = 0; m < meshCount; ++m)

  000a5	85 c0		 test	 eax, eax
  000a7	0f 8e d9 00 00
	00		 jle	 $LN69@Intersect
  000ad	0f 1f 00	 npad	 3
$LL5@Intersect:

; 56   : 	{
; 57   : 		//const CGrannyMesh * pMesh = m_pModel->GetMeshPointer(m);
; 58   : 		const granny_mesh * pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  000b0	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b3	e8 00 00 00 00	 call	 ?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ ; CGrannyModel::GetGrannyModelPointer

; 59   : 
; 60   : 		for (int b = 0; b < pgrnMesh->BoneBindingCount; ++b)

  000b8	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _b$1$[ebp], 0
  000bf	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  000c2	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  000c5	89 45 e8	 mov	 DWORD PTR _pgrnMesh$1$[ebp], eax
  000c8	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  000cc	0f 8e 9e 00 00
	00		 jle	 $LN3@Intersect

; 56   : 	{
; 57   : 		//const CGrannyMesh * pMesh = m_pModel->GetMeshPointer(m);
; 58   : 		const granny_mesh * pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  000d2	33 d2		 xor	 edx, edx
  000d4	89 55 ec	 mov	 DWORD PTR tv536[ebp], edx
  000d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL8@Intersect:

; 62   : 			const granny_bone_binding& rgrnBoneBinding = pgrnMesh->BoneBindings[b];

  000e0	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e3	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+12
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 62   : 			const granny_bone_binding& rgrnBoneBinding = pgrnMesh->BoneBindings[b];

  000e8	03 f2		 add	 esi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ea	2b 05 08 00 00
	00		 sub	 eax, DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 275  : 			if (m_pos >= max)

  000f0	33 d2		 xor	 edx, edx
  000f2	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 67   : 			float * Transform = GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(m)[b]);

  000f8	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fb	c1 f8 05	 sar	 eax, 5
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 275  : 			if (m_pos >= max)

  000fe	3b f8		 cmp	 edi, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 67   : 			float * Transform = GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(m)[b]);

  00100	53		 push	 ebx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 275  : 			if (m_pos >= max)

  00101	0f 4d fa	 cmovge	 edi, edx

; 281  : 			return &m_dataVector[m_pos++];

  00104	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00107	c1 e7 05	 shl	 edi, 5
  0010a	03 3d 08 00 00
	00		 add	 edi, DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 281  : 			return &m_dataVector[m_pos++];

  00110	a3 04 00 00 00	 mov	 DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+4, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 67   : 			float * Transform = GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(m)[b]);

  00115	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPBHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  0011a	8b 4d 14	 mov	 ecx, DWORD PTR _b$1$[ebp]
  0011d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00120	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUworld_pose@granny@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  00129	50		 push	 eax
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8

; 68   : 			// END_OF_WORK
; 69   : 
; 70   : 			MakeBoundBox(pBoundBox,

  00130	8d 4d cc	 lea	 ecx, DWORD PTR _vtMax$[ebp]
  00133	51		 push	 ecx
  00134	8d 4d c0	 lea	 ecx, DWORD PTR _vtMin$[ebp]
  00137	51		 push	 ecx
  00138	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0013b	51		 push	 ecx
  0013c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0013f	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
  00142	51		 push	 ecx
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	8b ce		 mov	 ecx, esi
  00147	e8 00 00 00 00	 call	 ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox

; 71   : 						 Transform,
; 72   : 						 rgrnBoneBinding.OBBMin,
; 73   : 						 rgrnBoneBinding.OBBMax,
; 74   : 						 &vtMin,
; 75   : 						 &vtMax);
; 76   : 
; 77   : 			pBoundBox->meshIndex = m;
; 78   : 			pBoundBox->boneIndex = b;

  0014c	8b 45 14	 mov	 eax, DWORD PTR _b$1$[ebp]
  0014f	8b 4d e8	 mov	 ecx, DWORD PTR _pgrnMesh$1$[ebp]
  00152	8b 55 ec	 mov	 edx, DWORD PTR tv536[ebp]
  00155	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00158	83 c2 24	 add	 edx, 36			; 00000024H
  0015b	40		 inc	 eax
  0015c	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  0015f	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  00162	89 45 14	 mov	 DWORD PTR _b$1$[ebp], eax
  00165	8b c1		 mov	 eax, ecx
  00167	89 55 ec	 mov	 DWORD PTR tv536[ebp], edx
  0016a	0f 8c 70 ff ff
	ff		 jl	 $LL8@Intersect
$LN3@Intersect:

; 54   : 
; 55   : 	for (int m = 0; m < meshCount; ++m)

  00170	43		 inc	 ebx
  00171	3b 5d e4	 cmp	 ebx, DWORD PTR _meshCount$1$[ebp]
  00174	0f 8c 36 ff ff
	ff		 jl	 $LL5@Intersect
  0017a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _vtMin$[ebp+8]
  0017f	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _vtMax$[ebp+8]
  00184	eb 10		 jmp	 SHORT $LN4@Intersect
$LN69@Intersect:
  00186	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4b189680
  0018e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@cb189680
$LN4@Intersect:

; 79   : 		}
; 80   : 	}
; 81   : 
; 82   : 	if (!IntersectCube(c_pMatrix,

  00196	8d 45 e0	 lea	 eax, DWORD PTR _t$[ebp]
  00199	8b ce		 mov	 ecx, esi
  0019b	50		 push	 eax
  0019c	8d 45 dc	 lea	 eax, DWORD PTR _v$[ebp]
  0019f	50		 push	 eax
  001a0	8d 45 d8	 lea	 eax, DWORD PTR _u$[ebp]
  001a3	50		 push	 eax
  001a4	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  001a9	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  001ae	83 ec 18	 sub	 esp, 24			; 00000018H
  001b1	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  001b7	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _vtMax$[ebp+4]
  001bc	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  001c2	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _vtMax$[ebp]
  001c7	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  001cd	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001d3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _vtMin$[ebp+4]
  001d8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001de	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _vtMin$[ebp]
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	ff 75 08	 push	 DWORD PTR _c_pMatrix$[ebp]
  001eb	e8 00 00 00 00	 call	 ?IntersectCube@CGraphicCollisionObject@@IAE_NPBUD3DXMATRIX@@MMMMMMAAUD3DXVECTOR3@@1PAM22@Z ; CGraphicCollisionObject::IntersectCube
  001f0	84 c0		 test	 al, al
  001f2	74 16		 je	 SHORT $LN68@Intersect

; 89   : 	}
; 90   : 
; 91   : 	return true;

  001f4	b0 01		 mov	 al, 1

; 92   : 
; 93   : /*
; 94   : 	TBoundBox* boundBoxs = s_boundBoxPool.base();
; 95   : 	for (int i = 0; i < s_boundBoxPool.size(); ++i)
; 96   : 	{
; 97   : 		TBoundBox& rcurBoundBox=boundBoxs[i];
; 98   : 
; 99   : 		if (!IntersectBoundBox(c_pMatrix, rcurBoundBox, &u, &v, &t))
; 100  : 			continue;
; 101  : 
; 102  : 		granny_matrix_4x4* pgrnMatCompositeBuffer = GrannyGetWorldPoseComposite4x4Array(m_pgrnWorldPose);
; 103  : 		const CGrannyMesh* c_pMesh = m_pModel->GetMeshPointer(rcurBoundBox.meshIndex);
; 104  : 		const granny_mesh* c_pgrnMesh = c_pMesh->GetGrannyMeshPointer();
; 105  : 
; 106  : 		if (!GrannyMeshIsRigid(c_pgrnMesh))
; 107  : 		{
; 108  : 			//continue;
; 109  : 			ret = true;
; 110  : 		}
; 111  : 		else
; 112  : 		{
; 113  : 			D3DXMATRIX matMesh;
; 114  : 			int* toBoneIndices = c_pMesh->GetBoneIndices();
; 115  : 			D3DXMatrixMultiply(&matMesh, (D3DXMATRIX*) pgrnMatCompositeBuffer[toBoneIndices[0]], c_pMatrix);
; 116  : 
; 117  : 			granny_tri_material_group* pgrnTriGroups = GrannyGetMeshTriangleGroups(c_pgrnMesh);
; 118  : 			int mtrlCount = c_pMesh->GetGrannyMeshPointer()->MaterialBindingCount;
; 119  : 			int vtxCount = GrannyGetMeshVertexCount(c_pgrnMesh);
; 120  : 			int groupCount = GrannyGetMeshTriangleGroupCount(c_pgrnMesh);
; 121  : 
; 122  : 			TIndex*	modelIndices;
; 123  : 			TPNTVertex*	modelVertices;
; 124  : 
; 125  : 			if (m_pModel->LockVertices((void**)&modelIndices, (void**)&modelVertices))
; 126  : 			{
; 127  : 				TIndex* meshIndices = modelIndices + c_pMesh->GetIndexBasePosition();
; 128  : 				TPNTVertex* meshVertices = modelVertices + c_pMesh->GetVertexBasePosition();
; 129  : 
; 130  : 				for (int i = 0; i < groupCount; ++i)
; 131  : 				{
; 132  : 					granny_tri_material_group& rgrnTriGroup = pgrnTriGroups[i];
; 133  : 
; 134  : 					if (rgrnTriGroup.MaterialIndex < 0 || rgrnTriGroup.MaterialIndex >= mtrlCount)
; 135  : 						continue;
; 136  : 
; 137  : 					if (IntersectMesh(&matMesh,
; 138  : 									  meshVertices,
; 139  : 									  sizeof(TPNTVertex),
; 140  : 									  vtxCount,
; 141  : 									  meshIndices,
; 142  : 									  GrannyGetMeshIndexCount(c_pgrnMesh),
; 143  : 									  ms_vtPickRayOrig,
; 144  : 									  ms_vtPickRayDir,
; 145  : 									  &u, &v, &t))
; 146  : 					{
; 147  : 						ret = true;
; 148  : 						break;
; 149  : 					}
; 150  : 				}
; 151  : 
; 152  : 				m_pModel->UnlockVertices();
; 153  : 			}
; 154  : 		}
; 155  : 
; 156  : 		if (ret)
; 157  : 		{
; 158  : 			*pu = u;
; 159  : 			*pv = v;
; 160  : 			*pt = -t;
; 161  : 
; 162  : 			if (c_szModelName)
; 163  : 			{
; 164  : 				if (!strncmp(c_pgrnMesh->Name, c_szModelName, strlen(c_szModelName)))
; 165  : 					return ret;
; 166  : 
; 167  : 				ret = false;
; 168  : 				continue;
; 169  : 			}
; 170  : 
; 171  : 			return ret;
; 172  : 		}
; 173  : 	}
; 174  : 
; 175  : 	return (ret);
; 176  : */
; 177  : }

  001f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00200	59		 pop	 ecx
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5b		 pop	 ebx
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c2 10 00	 ret	 16			; 00000010H
$LN68@Intersect:

; 83   : 					   vtMin.x, vtMin.y, vtMin.z,
; 84   : 					   vtMax.x, vtMax.y, vtMax.z,
; 85   : 					   ms_vtPickRayOrig, ms_vtPickRayDir,
; 86   : 					   &u, &v, &t))
; 87   : 	{
; 88   : 		return ret;

  0020a	32 c0		 xor	 al, al

; 92   : 
; 93   : /*
; 94   : 	TBoundBox* boundBoxs = s_boundBoxPool.base();
; 95   : 	for (int i = 0; i < s_boundBoxPool.size(); ++i)
; 96   : 	{
; 97   : 		TBoundBox& rcurBoundBox=boundBoxs[i];
; 98   : 
; 99   : 		if (!IntersectBoundBox(c_pMatrix, rcurBoundBox, &u, &v, &t))
; 100  : 			continue;
; 101  : 
; 102  : 		granny_matrix_4x4* pgrnMatCompositeBuffer = GrannyGetWorldPoseComposite4x4Array(m_pgrnWorldPose);
; 103  : 		const CGrannyMesh* c_pMesh = m_pModel->GetMeshPointer(rcurBoundBox.meshIndex);
; 104  : 		const granny_mesh* c_pgrnMesh = c_pMesh->GetGrannyMeshPointer();
; 105  : 
; 106  : 		if (!GrannyMeshIsRigid(c_pgrnMesh))
; 107  : 		{
; 108  : 			//continue;
; 109  : 			ret = true;
; 110  : 		}
; 111  : 		else
; 112  : 		{
; 113  : 			D3DXMATRIX matMesh;
; 114  : 			int* toBoneIndices = c_pMesh->GetBoneIndices();
; 115  : 			D3DXMatrixMultiply(&matMesh, (D3DXMATRIX*) pgrnMatCompositeBuffer[toBoneIndices[0]], c_pMatrix);
; 116  : 
; 117  : 			granny_tri_material_group* pgrnTriGroups = GrannyGetMeshTriangleGroups(c_pgrnMesh);
; 118  : 			int mtrlCount = c_pMesh->GetGrannyMeshPointer()->MaterialBindingCount;
; 119  : 			int vtxCount = GrannyGetMeshVertexCount(c_pgrnMesh);
; 120  : 			int groupCount = GrannyGetMeshTriangleGroupCount(c_pgrnMesh);
; 121  : 
; 122  : 			TIndex*	modelIndices;
; 123  : 			TPNTVertex*	modelVertices;
; 124  : 
; 125  : 			if (m_pModel->LockVertices((void**)&modelIndices, (void**)&modelVertices))
; 126  : 			{
; 127  : 				TIndex* meshIndices = modelIndices + c_pMesh->GetIndexBasePosition();
; 128  : 				TPNTVertex* meshVertices = modelVertices + c_pMesh->GetVertexBasePosition();
; 129  : 
; 130  : 				for (int i = 0; i < groupCount; ++i)
; 131  : 				{
; 132  : 					granny_tri_material_group& rgrnTriGroup = pgrnTriGroups[i];
; 133  : 
; 134  : 					if (rgrnTriGroup.MaterialIndex < 0 || rgrnTriGroup.MaterialIndex >= mtrlCount)
; 135  : 						continue;
; 136  : 
; 137  : 					if (IntersectMesh(&matMesh,
; 138  : 									  meshVertices,
; 139  : 									  sizeof(TPNTVertex),
; 140  : 									  vtxCount,
; 141  : 									  meshIndices,
; 142  : 									  GrannyGetMeshIndexCount(c_pgrnMesh),
; 143  : 									  ms_vtPickRayOrig,
; 144  : 									  ms_vtPickRayDir,
; 145  : 									  &u, &v, &t))
; 146  : 					{
; 147  : 						ret = true;
; 148  : 						break;
; 149  : 					}
; 150  : 				}
; 151  : 
; 152  : 				m_pModel->UnlockVertices();
; 153  : 			}
; 154  : 		}
; 155  : 
; 156  : 		if (ret)
; 157  : 		{
; 158  : 			*pu = u;
; 159  : 			*pv = v;
; 160  : 			*pt = -t;
; 161  : 
; 162  : 			if (c_szModelName)
; 163  : 			{
; 164  : 				if (!strncmp(c_pgrnMesh->Name, c_szModelName, strlen(c_szModelName)))
; 165  : 					return ret;
; 166  : 
; 167  : 				ret = false;
; 168  : 				continue;
; 169  : 			}
; 170  : 
; 171  : 			return ret;
; 172  : 		}
; 173  : 	}
; 174  : 
; 175  : 	return (ret);
; 176  : */
; 177  : }

  0020c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00216	59		 pop	 ecx
  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	5b		 pop	 ebx
  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c2 10 00	 ret	 16			; 00000010H
$LN72@Intersect:

; 50   : 	static stl_stack_pool<TBoundBox> s_boundBoxPool(1024);

  00220	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  00225	e8 00 00 00 00	 call	 __Init_thread_header
  0022a	83 c4 04	 add	 esp, 4
  0022d	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA, -1
  00234	0f 85 54 fe ff
	ff		 jne	 $LN2@Intersect
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1275 :                 _Resize_reallocate(_Newsize, _Val);

  0023a	8d 45 17	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Stl.h

; 249  : 		{

  0023d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1275 :                 _Resize_reallocate(_Newsize, _Val);

  00244	50		 push	 eax
  00245	68 00 04 00 00	 push	 1024			; 00000400H
  0024a	b9 08 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+8
  0024f	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 50   : 	static stl_stack_pool<TBoundBox> s_boundBoxPool(1024);

  00254	68 00 00 00 00	 push	 OFFSET ??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool''
  00259	e8 00 00 00 00	 call	 _atexit
  0025e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  00263	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0026a	e8 00 00 00 00	 call	 __Init_thread_footer
  0026f	83 c4 08	 add	 esp, 8
  00272	e9 17 fe ff ff	 jmp	 $LN2@Intersect
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$1:
  0000c	b9 08 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+8
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ENDP ; CGrannyModelInstance::Intersect
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_iMesh$ = 8						; size = 4
_c_ppMatrix$ = 12					; size = 4
?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z PROC ; CGrannyModelInstance::GetMeshMatrixPointer, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 213  : 	if (!m_pgrnModelInstance)

  00006	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000a	74 32		 je	 SHORT $LN5@GetMeshMat

; 214  : 		return false;
; 215  : 
; 216  : 	int meshCount = m_pModel->GetMeshCount();

  0000c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000f	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount

; 217  : 
; 218  : 	if (meshCount <= 0)

  00014	85 c0		 test	 eax, eax
  00016	7e 26		 jle	 SHORT $LN5@GetMeshMat

; 220  : 
; 221  : 	// WORK
; 222  : 	//const CGrannyMesh * pMesh = m_pModel->GetMeshPointer(iMesh);
; 223  : 	*c_ppMatrix = (D3DXMATRIX *)GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(iMesh)[0]);

  00018	ff 75 08	 push	 DWORD PTR _iMesh$[ebp]
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPBHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  00022	8b ce		 mov	 ecx, esi
  00024	ff 30		 push	 DWORD PTR [eax]
  00026	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUworld_pose@granny@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _c_ppMatrix$[ebp]
  00035	5e		 pop	 esi
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 224  : 	// END_OF_WORK
; 225  : 
; 226  : 	return true;

  00038	b0 01		 mov	 al, 1

; 227  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN5@GetMeshMat:

; 219  : 		return false;

  0003e	32 c0		 xor	 al, al
  00040	5e		 pop	 esi

; 227  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z ENDP ; CGrannyModelInstance::GetMeshMatrixPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
