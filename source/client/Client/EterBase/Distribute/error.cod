; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\Distribute\error.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?fException@@3PAU_iobuf@@A			; fException
_BSS	SEGMENT
?fException@@3PAU_iobuf@@A DD 01H DUP (?)		; fException
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ; std::_Integral_to_string<char,int>
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category2@std@@UBEPBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??_G_Iostream_error_category2@std@@UAEPAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z	; make_minidump
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ; std::put_time<char>
PUBLIC	??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ; std::operator<<<char,std::char_traits<char>,char>
PUBLIC	?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; EterExceptionFilter
PUBLIC	?SetEterExceptionHandler@@YAXXZ			; SetEterExceptionHandler
PUBLIC	??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z	; std::_UIntegral_to_buff<char,unsigned int>
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_07MOMJMPG@dbghelp@			; `string'
PUBLIC	??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@		; `string'
PUBLIC	??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@ ; `string'
PUBLIC	??_C@_04JMFINIFG@?4dmp@				; `string'
PUBLIC	??_C@_0O@BMPKPIOH@metin2client_@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_04IHCGILC@?$CB?$CFx?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	_free:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Gettnames:PROC
EXTRN	__Strftime:PROC
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D'
	DB	'@std@@@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD FLAT:??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$rs	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 00H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category2@std@@@8
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$rs	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	050H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$rs	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_04IHCGILC@?$CB?$CFx?$AA@
CONST	SEGMENT
??_C@_04IHCGILC@?$CB?$CFx?$AA@ DB '!%x', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
CONST	ENDS
;	COMDAT ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A
_DATA	SEGMENT
?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A DD FLAT:??_7_Iostream_error_category2@std@@6B@ ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
	DD	05H
_DATA	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMPKPIOH@metin2client_@
CONST	SEGMENT
??_C@_0O@BMPKPIOH@metin2client_@ DB 'metin2client_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMFINIFG@?4dmp@
CONST	SEGMENT
??_C@_04JMFINIFG@?4dmp@ DB '.dmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@
CONST	SEGMENT
??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@ DB '%Y%m%d_%H%M%S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
CONST	SEGMENT
??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@ DB 'MiniDumpWriteDump', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MOMJMPG@dbghelp@
CONST	SEGMENT
??_C@_07MOMJMPG@dbghelp@ DB 'dbghelp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	050H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DD FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DD	FLAT:??_E_Iostream_error_category2@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category2@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z$0
__ehfuncinfo$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z$0
__ehfuncinfo$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1
	DD	00H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$0
__tryblocktable$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$6
__ehfuncinfo$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1
__ehfuncinfo$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$2
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1
__ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z DD 019930522H
	DD	01bH
	DD	FLAT:__unwindtable$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$16
	DD	02H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$1
	DD	04H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$21
	DD	04H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$2
	DD	06H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$3
	DD	07H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$4
	DD	08H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$5
	DD	09H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$6
	DD	0aH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$7
	DD	0bH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$8
	DD	0cH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$9
	DD	0dH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$10
	DD	0eH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$11
	DD	0fH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0eH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0dH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	08H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	07H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	04H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gios_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gios_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@ios_base@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Init@ios_base@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@ios_base@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
tv468 = -12						; size = 4
tv466 = -8						; size = 4
__New_size$1$ = -8					; size = 4
tv467 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4538 :         const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 4539 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4540 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4541 :         auto& _My_data            = _Mypair._Myval2;
; 4542 :         const size_type _Old_size = _My_data._Mysize;
; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00008	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00018	2b c2		 sub	 eax, edx
  0001a	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 44 01 00
	00		 jb	 $LN59@Reallocate

; 4548 :         const size_type _Old_capacity = _My_data._Myres;

  00025	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00028	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002b	8b f0		 mov	 esi, eax

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00030	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4548 :         const size_type _Old_capacity = _My_data._Myres;

  00033	89 5d 08	 mov	 DWORD PTR __Old$1$[ebp], ebx

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00036	3b f1		 cmp	 esi, ecx

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	76 17		 jbe	 SHORT $LN9@Reallocate

; 4490 :             return _Max;

  0003a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0003f	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 5b		 jmp	 SHORT $LN16@Reallocate
$LN9@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00051	8b c3		 mov	 eax, ebx
  00053	d1 e8		 shr	 eax, 1
  00055	2b c8		 sub	 ecx, eax
  00057	3b d9		 cmp	 ebx, ecx
  00059	76 1a		 jbe	 SHORT $LN10@Reallocate

; 4494 :             return _Max;

  0005b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00060	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	eb 37		 jmp	 SHORT $LN16@Reallocate
$LN10@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	03 c3		 add	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b f0		 cmp	 esi, eax
  00079	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00084	72 10		 jb	 SHORT $LN17@Reallocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008c	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0008f	83 c4 04	 add	 esp, 4
  00092	8b d8		 mov	 ebx, eax
  00094	eb 16		 jmp	 SHORT $LN16@Reallocate
$LN17@Reallocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00096	85 c0		 test	 eax, eax
  00098	74 10		 je	 SHORT $LN18@Reallocate

; 85   :         return ::operator new(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000a0	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000a3	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000a6	8b d8		 mov	 ebx, eax
  000a8	eb 02		 jmp	 SHORT $LN16@Reallocate
$LN18@Reallocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000aa	33 db		 xor	 ebx, ebx
$LN16@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4559 :         _My_data._Mysize      = _New_size;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000af	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 4560 :         _My_data._Myres       = _New_capacity;
; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b2	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000b5	2b d0		 sub	 edx, eax
  000b7	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000ba	50		 push	 eax
  000bb	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000be	89 4d fc	 mov	 DWORD PTR tv467[ebp], ecx
  000c1	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  000c4	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000c7	03 ce		 add	 ecx, esi
  000c9	89 75 f4	 mov	 DWORD PTR tv468[ebp], esi
  000cc	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000d0	89 4d f8	 mov	 DWORD PTR tv466[ebp], ecx
  000d3	72 60		 jb	 SHORT $LN3@Reallocate

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d5	8b 37		 mov	 esi, DWORD PTR [edi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	56		 push	 esi
  000d8	53		 push	 ebx
  000d9	e8 00 00 00 00	 call	 _memcpy
  000de	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000e1	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000e4	ff 75 f4	 push	 DWORD PTR tv468[ebp]
  000e7	e8 00 00 00 00	 call	 _memcpy
  000ec	ff 75 fc	 push	 DWORD PTR tv467[ebp]

; 3378 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000ef	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000f2	03 c6		 add	 eax, esi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f4	50		 push	 eax
  000f5	ff 75 f8	 push	 DWORD PTR tv466[ebp]
  000f8	e8 00 00 00 00	 call	 _memcpy

; 4564 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fd	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00100	83 c4 24	 add	 esp, 36			; 00000024H

; 4564 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00103	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010a	72 12		 jb	 SHORT $LN44@Reallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0010f	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	77 52		 ja	 SHORT $LN41@Reallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011c	8b f2		 mov	 esi, edx
$LN44@Reallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0011e	51		 push	 ecx
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4572 :         return *this;

  00128	89 1f		 mov	 DWORD PTR [edi], ebx
  0012a	8b c7		 mov	 eax, edi
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx

; 4573 :     }

  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00135	57		 push	 edi
  00136	53		 push	 ebx
  00137	e8 00 00 00 00	 call	 _memcpy
  0013c	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  0013f	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _memcpy
  00148	ff 75 fc	 push	 DWORD PTR tv467[ebp]

; 3378 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0014b	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0014e	03 c7		 add	 eax, edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00150	50		 push	 eax
  00151	ff 75 f8	 push	 DWORD PTR tv466[ebp]
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	83 c4 24	 add	 esp, 36			; 00000024H

; 4572 :         return *this;

  0015c	89 1f		 mov	 DWORD PTR [edi], ebx
  0015e	8b c7		 mov	 eax, edi
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 4573 :     }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 14 00	 ret	 20			; 00000014H
$LN59@Reallocate:

; 4544 :             _Xlen_string(); // result too long

  00169	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@Reallocate:
  00173	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 34   :         _CSTD free(_Timeptr);

  00006	ff 76 08	 push	 DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 34   :         _CSTD free(_Timeptr);

  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00017	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00021	74 0b		 je	 SHORT $LN9@scalar
  00023	6a 0c		 push	 12			; 0000000cH
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -76				; size = 4
_this$GSCopy$1$ = -72					; size = 4
tv995 = -68						; size = 4
__Dest$ = -64						; size = 8
__Pt$GSCopy$1$ = -60					; size = 4
__Old_capacity$1$ = -56					; size = 4
__Last$1$ = -52						; size = 4
tv994 = -52						; size = 4
__Old_size$1$ = -52					; size = 4
__Str$ = -48						; size = 24
__Fmt$ = -24						; size = 5
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
__Pt$ = 28						; size = 4
__Specifier$ = 32					; size = 1
__Modifier$ = 36					; size = 1
?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 719  :         char _Modifier = '\0') const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00031	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 719  :         char _Modifier = '\0') const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  00033	89 45 b4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00036	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 719  :         char _Modifier = '\0') const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  0003b	8b 45 1c	 mov	 eax, DWORD PTR __Pt$[ebp]
  0003e	89 45 c4	 mov	 DWORD PTR __Pt$GSCopy$1$[ebp], eax

; 720  :         char _Fmt[5] = "!%x\0"; // '!' for nonzero count, null for modifier

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04IHCGILC@?$CB?$CFx?$AA@
  00046	89 45 e8	 mov	 DWORD PTR __Fmt$[ebp], eax
  00049	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04IHCGILC@?$CB?$CFx?$AA@+4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00050	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Str$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 720  :         char _Fmt[5] = "!%x\0"; // '!' for nonzero count, null for modifier

  00057	88 45 ec	 mov	 BYTE PTR __Fmt$[ebp+4], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  0005a	89 4d cc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0005d	89 4d e0	 mov	 DWORD PTR __Str$[ebp+16], ecx

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00060	89 75 c8	 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
  00063	89 75 e4	 mov	 DWORD PTR __Str$[ebp+20], esi

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	88 4d d0	 mov	 BYTE PTR __Str$[ebp], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 725  :         if (_Modifier == '\0') {

  00069	8a 45 24	 mov	 al, BYTE PTR __Modifier$[ebp]
  0006c	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  0006f	84 c0		 test	 al, al
  00071	75 08		 jne	 SHORT $LN5@do_put

; 726  :             _Fmt[2] = _Specifier;

  00073	8a 45 20	 mov	 al, BYTE PTR __Specifier$[ebp]
  00076	88 45 ea	 mov	 BYTE PTR __Fmt$[ebp+2], al

; 727  :         } else { // add both modifier and specifier

  00079	eb 09		 jmp	 SHORT $LN6@do_put
$LN5@do_put:

; 728  :             _Fmt[2] = _Modifier;

  0007b	88 45 ea	 mov	 BYTE PTR __Fmt$[ebp+2], al

; 729  :             _Fmt[3] = _Specifier;

  0007e	8a 45 20	 mov	 al, BYTE PTR __Specifier$[ebp]
  00081	88 45 eb	 mov	 BYTE PTR __Fmt$[ebp+3], al
$LN6@do_put:

; 730  :         }
; 731  : 
; 732  :         for (_Num = 16;; _Num *= 2) { // convert into ever larger string buffer until success

  00084	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3180 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00090	8b c6		 mov	 eax, esi
  00092	2b c1		 sub	 eax, ecx

; 3181 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00094	3b d8		 cmp	 ebx, eax
  00096	77 2b		 ja	 SHORT $LN24@do_put

; 3182 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00098	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2319 :         return _BUF_SIZE <= _Myres;

  0009b	83 fe 10	 cmp	 esi, 16			; 00000010H

; 3182 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0009e	89 45 e0	 mov	 DWORD PTR __Str$[ebp+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  000a1	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 2297 :         if (_Large_string_engaged()) {

  000a4	0f 43 45 d0	 cmovae	 eax, DWORD PTR __Str$[ebp]

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000a8	53		 push	 ebx
  000a9	6a 00		 push	 0

; 3184 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  000ab	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 _memset

; 3185 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000b4	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3186 :             return *this;

  000bb	8b 75 d0	 mov	 esi, DWORD PTR __Str$[ebp]
  000be	e9 21 01 00 00	 jmp	 $LN36@do_put
$LN24@do_put:

; 4542 :         const size_type _Old_size = _My_data._Mysize;

  000c3	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000c8	2b c1		 sub	 eax, ecx

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  000ca	3b c3		 cmp	 eax, ebx
  000cc	0f 82 22 02 00
	00		 jb	 $LN166@do_put

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  000d2	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000d5	83 cf 0f	 or	 edi, 15			; 0000000fH
  000d8	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000de	76 1a		 jbe	 SHORT $LN41@do_put

; 4490 :             return _Max;

  000e0	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  000e5	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000f0	8b 4d cc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000f3	83 c4 04	 add	 esp, 4
  000f6	8b f0		 mov	 esi, eax
  000f8	eb 61		 jmp	 SHORT $LN48@do_put
$LN41@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000fa	8b d6		 mov	 edx, esi
  000fc	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00101	d1 ea		 shr	 edx, 1
  00103	2b c2		 sub	 eax, edx
  00105	3b f0		 cmp	 esi, eax
  00107	76 1a		 jbe	 SHORT $LN42@do_put

; 4494 :             return _Max;

  00109	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0010e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00119	8b 4d cc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  0011c	83 c4 04	 add	 esp, 4
  0011f	8b f0		 mov	 esi, eax
  00121	eb 38		 jmp	 SHORT $LN48@do_put
$LN42@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00123	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00126	3b f8		 cmp	 edi, eax
  00128	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0012b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0012e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00133	72 10		 jb	 SHORT $LN49@do_put

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0013b	8b 4d cc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  0013e	83 c4 04	 add	 esp, 4
  00141	8b f0		 mov	 esi, eax
  00143	eb 16		 jmp	 SHORT $LN48@do_put
$LN49@do_put:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00145	85 c0		 test	 eax, eax
  00147	74 10		 je	 SHORT $LN50@do_put

; 85   :         return ::operator new(_Bytes);

  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0014f	8b 4d cc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  00152	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00155	8b f0		 mov	 esi, eax
  00157	eb 02		 jmp	 SHORT $LN48@do_put
$LN50@do_put:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00159	33 f6		 xor	 esi, esi
$LN48@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4559 :         _My_data._Mysize      = _New_size;

  0015b	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 4560 :         _My_data._Myres       = _New_capacity;

  0015e	89 7d e4	 mov	 DWORD PTR __Str$[ebp+20], edi
  00161	89 45 e0	 mov	 DWORD PTR __Str$[ebp+16], eax

; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00164	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]
  00167	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0016a	89 7d bc	 mov	 DWORD PTR tv995[ebp], edi
  0016d	03 c3		 add	 eax, ebx

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  0016f	83 7d c8 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  00173	89 45 cc	 mov	 DWORD PTR tv994[ebp], eax
  00176	51		 push	 ecx
  00177	72 4c		 jb	 SHORT $LN35@do_put

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00179	8b 7d d0	 mov	 edi, DWORD PTR __Str$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	57		 push	 edi
  0017d	56		 push	 esi
  0017e	e8 00 00 00 00	 call	 _memcpy

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00183	53		 push	 ebx
  00184	6a 00		 push	 0
  00186	ff 75 bc	 push	 DWORD PTR tv995[ebp]
  00189	e8 00 00 00 00	 call	 _memset

; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0018e	8b 45 cc	 mov	 eax, DWORD PTR tv994[ebp]

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00191	83 c4 18	 add	 esp, 24			; 00000018H

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00194	8b 4d c8	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  00197	41		 inc	 ecx

; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00198	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0019b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a1	72 16		 jb	 SHORT $LN74@do_put

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a3	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  001a6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a9	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ab	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  001ae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b1	0f 87 42 01 00
	00		 ja	 $LN155@do_put

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001b7	8b fa		 mov	 edi, edx
$LN74@do_put:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001b9	51		 push	 ecx
  001ba	57		 push	 edi
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c0	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4567 :         } else {

  001c3	eb 1c		 jmp	 SHORT $LN177@do_put
$LN35@do_put:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c5	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]
  001c8	50		 push	 eax
  001c9	56		 push	 esi
  001ca	e8 00 00 00 00	 call	 _memcpy

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  001cf	53		 push	 ebx
  001d0	6a 00		 push	 0
  001d2	57		 push	 edi
  001d3	e8 00 00 00 00	 call	 _memset

; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001d8	8b 45 cc	 mov	 eax, DWORD PTR tv994[ebp]

; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  001db	83 c4 18	 add	 esp, 24			; 00000018H

; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001de	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN177@do_put:

; 2296 :         value_type* _Result = _Bx._Buf;

  001e1	89 75 d0	 mov	 DWORD PTR __Str$[ebp], esi
$LN36@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 734  :             if (0 < (_Count = _Strftime(&_Str[0], _Str.size(), _Fmt, _Pt, _Tnames._Getptr()))) {

  001e4	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  001e7	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  001ea	83 7d e4 10	 cmp	 DWORD PTR __Str$[ebp+20], 16 ; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  001ee	0f 43 c6	 cmovae	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 734  :             if (0 < (_Count = _Strftime(&_Str[0], _Str.size(), _Fmt, _Pt, _Tnames._Getptr()))) {

  001f1	ff 71 08	 push	 DWORD PTR [ecx+8]
  001f4	8d 4d e8	 lea	 ecx, DWORD PTR __Fmt$[ebp]
  001f7	ff 75 c4	 push	 DWORD PTR __Pt$GSCopy$1$[ebp]
  001fa	51		 push	 ecx
  001fb	ff 75 e0	 push	 DWORD PTR __Str$[ebp+16]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 __Strftime
  00204	8b c8		 mov	 ecx, eax
  00206	83 c4 14	 add	 esp, 20			; 00000014H
  00209	85 c9		 test	 ecx, ecx
  0020b	75 13		 jne	 SHORT $LN167@do_put

; 730  :         }
; 731  : 
; 732  :         for (_Num = 16;; _Num *= 2) { // convert into ever larger string buffer until success

  0020d	8b 75 e4	 mov	 esi, DWORD PTR __Str$[ebp+20]
  00210	03 db		 add	 ebx, ebx
  00212	8b 4d e0	 mov	 ecx, DWORD PTR __Str$[ebp+16]
  00215	89 75 c8	 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
  00218	89 4d cc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0021b	e9 70 fe ff ff	 jmp	 $LL4@do_put
$LN167@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00220	8b 5d e4	 mov	 ebx, DWORD PTR __Str$[ebp+20]

; 2296 :         value_type* _Result = _Bx._Buf;

  00223	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 2297 :         if (_Large_string_engaged()) {

  00226	8b 55 d0	 mov	 edx, DWORD PTR __Str$[ebp]

; 2296 :         value_type* _Result = _Bx._Buf;

  00229	8d 7d d0	 lea	 edi, DWORD PTR __Str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4210 :     _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));

  0022c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0022f	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00232	0f 43 c2	 cmovae	 eax, edx

; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  00235	03 c1		 add	 eax, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00237	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  0023a	89 45 cc	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4210 :     _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));

  0023d	8b 45 0c	 mov	 eax, DWORD PTR __Dest$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2297 :         if (_Large_string_engaged()) {

  00240	0f 43 fa	 cmovae	 edi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4210 :     _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));

  00243	89 45 c0	 mov	 DWORD PTR __Dest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  00246	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00247	8b 45 cc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  0024a	3b f8		 cmp	 edi, eax
  0024c	74 4f		 je	 SHORT $LN113@do_put
  0024e	66 90		 npad	 2
$LL114@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00250	85 f6		 test	 esi, esi
  00252	74 3a		 je	 SHORT $LN118@do_put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 259  :         return *_IPnext ? *_IPcount : 0;

  00254	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00257	8a 1f		 mov	 bl, BYTE PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 259  :         return *_IPnext ? *_IPcount : 0;

  00259	83 38 00	 cmp	 DWORD PTR [eax], 0
  0025c	74 1d		 je	 SHORT $LN122@do_put
  0025e	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00261	8b 01		 mov	 eax, DWORD PTR [ecx]

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00263	85 c0		 test	 eax, eax
  00265	7e 14		 jle	 SHORT $LN122@do_put

; 254  :         --*_IPcount;

  00267	48		 dec	 eax
  00268	89 01		 mov	 DWORD PTR [ecx], eax

; 255  :         return (*_IPnext)++;

  0026a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0026d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00272	89 01		 mov	 DWORD PTR [ecx], eax

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00274	88 1a		 mov	 BYTE PTR [edx], bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  00276	0f b6 c3	 movzx	 eax, bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00279	eb 0b		 jmp	 SHORT $LN123@do_put
$LN122@do_put:
  0027b	8b 16		 mov	 edx, DWORD PTR [esi]
  0027d	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  0027f	0f b6 c3	 movzx	 eax, bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00282	50		 push	 eax
  00283	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN123@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  00286	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00289	8b 45 cc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  0028c	75 04		 jne	 SHORT $LN112@do_put
$LN118@do_put:

; 529  :             _Failed = true;

  0028e	c6 45 c0 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN112@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00292	47		 inc	 edi
  00293	3b f8		 cmp	 edi, eax
  00295	75 b9		 jne	 SHORT $LL114@do_put
  00297	8b 5d e4	 mov	 ebx, DWORD PTR __Str$[ebp+20]
  0029a	8b 55 d0	 mov	 edx, DWORD PTR __Str$[ebp]
$LN113@do_put:

; 4211 :     return _Dest;

  0029d	8b 7d b4	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  002a0	8b 45 c0	 mov	 eax, DWORD PTR __Dest$[ebp]
  002a3	89 07		 mov	 DWORD PTR [edi], eax
  002a5	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  002a8	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ab	72 27		 jb	 SHORT $LN148@do_put

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4620 :             auto& _Al          = _Getal();
; 4621 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002ad	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b0	8b c2		 mov	 eax, edx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002b8	72 10		 jb	 SHORT $LN158@do_put

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002ba	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  002bd	83 c1 23	 add	 ecx, 35			; 00000023H
  002c0	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  002c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002c8	77 2f		 ja	 SHORT $LN155@do_put
$LN158@do_put:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002ca	51		 push	 ecx
  002cb	52		 push	 edx
  002cc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d1	83 c4 08	 add	 esp, 8
$LN148@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 739  :         return _STD copy(&_Str[1], &_Str[_Count], _Dest);

  002d4	8b c7		 mov	 eax, edi

; 740  :     }

  002d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e0	59		 pop	 ecx
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx
  002e4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e7	33 cd		 xor	 ecx, ebp
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 20 00	 ret	 32			; 00000020H
$LN166@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4544 :             _Xlen_string(); // result too long

  002f4	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN155@do_put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN176@do_put:
  002fe	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 34   :         _CSTD free(_Timeptr);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 34   :         _CSTD free(_Timeptr);

  0000c	e8 00 00 00 00	 call	 _free
  00011	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 712  :     virtual __CLR_OR_THIS_CALL ~time_put() noexcept {}

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
_TEXT	SEGMENT
$T2 = -52						; size = 8
_this$1$ = -44						; size = 4
$T3 = -40						; size = 8
__Ch$ = -36						; size = 1
__Ch$ = -32						; size = 1
__Ch$ = -28						; size = 1
__Specifier$4 = -24					; size = 1
__Modifier$5 = -20					; size = 1
__Ctype_fac$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Pt$ = 28						; size = 4
__Fmtfirst$ = 32					; size = 4
__Ch$1$ = 35						; size = 1
__Fmtlast$ = 36						; size = 4
?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 652  :         const _Elem* _Fmtlast) const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 373  :         return *_Ploc;

  0002b	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  0002e	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00031	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 268  :         _Ptr->_Incref();

  00034	8b ce		 mov	 ecx, esi
  00036	89 75 dc	 mov	 DWORD PTR $T3[ebp+4], esi
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 653  :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Iosbase.getloc());

  0003e	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0004e	83 c4 04	 add	 esp, 4
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b d8		 mov	 ebx, eax
  0005a	89 5d f0	 mov	 DWORD PTR __Ctype_fac$1$[ebp], ebx
  0005d	85 f6		 test	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  0005f	74 13		 je	 SHORT $LN21@put

; 352  :             delete _Ptr->_Decref();

  00061	8b 16		 mov	 edx, DWORD PTR [esi]
  00063	8b ce		 mov	 ecx, esi
  00065	ff 52 08	 call	 DWORD PTR [edx+8]
  00068	85 c0		 test	 eax, eax
  0006a	74 08		 je	 SHORT $LN21@put
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b c8		 mov	 ecx, eax
  00070	6a 01		 push	 1
  00072	ff 12		 call	 DWORD PTR [edx]
$LN21@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 655  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  00074	8b 75 20	 mov	 esi, DWORD PTR __Fmtfirst$[ebp]
  00077	8b 7d 24	 mov	 edi, DWORD PTR __Fmtlast$[ebp]
  0007a	3b f7		 cmp	 esi, edi
  0007c	75 25		 jne	 SHORT $LN4@put
$LN118@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0007e	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
$LN88@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 682  :         return _Dest;

  00081	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00087	89 08		 mov	 DWORD PTR [eax], ecx
  00089	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 683  :     }

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 20 00	 ret	 32			; 00000020H
$LL120@put:

; 655  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  000a0	8b 7d 24	 mov	 edi, DWORD PTR __Fmtlast$[ebp]
$LN4@put:

; 656  :             if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {

  000a3	8a 06		 mov	 al, BYTE PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  000a5	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 656  :             if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {

  000a7	88 45 e4	 mov	 BYTE PTR __Ch$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  000aa	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ac	6a 00		 push	 0
  000ae	ff 75 e4	 push	 DWORD PTR __Ch$[ebp]
  000b1	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000b4	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 656  :             if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {

  000b6	3c 25		 cmp	 al, 37			; 00000025H
  000b8	74 54		 je	 SHORT $LN5@put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  000ba	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
  000bd	85 ff		 test	 edi, edi
  000bf	74 44		 je	 SHORT $LN27@put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 259  :         return *_IPnext ? *_IPcount : 0;

  000c1	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  000c4	8a 0e		 mov	 cl, BYTE PTR [esi]
  000c6	88 4d 23	 mov	 BYTE PTR __Ch$1$[ebp], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 259  :         return *_IPnext ? *_IPcount : 0;

  000c9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cc	74 20		 je	 SHORT $LN115@put
  000ce	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  000d1	8b 02		 mov	 eax, DWORD PTR [edx]

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000d3	85 c0		 test	 eax, eax
  000d5	7e 17		 jle	 SHORT $LN115@put

; 254  :         --*_IPcount;

  000d7	48		 dec	 eax
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 255  :         return (*_IPnext)++;

  000da	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  000dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000df	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000e2	89 01		 mov	 DWORD PTR [ecx], eax

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000e4	8a 45 23	 mov	 al, BYTE PTR __Ch$1$[ebp]
  000e7	88 02		 mov	 BYTE PTR [edx], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  000e9	0f b6 c0	 movzx	 eax, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000ec	eb 0b		 jmp	 SHORT $LN32@put
$LN115@put:
  000ee	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  000f0	0f b6 c1	 movzx	 eax, cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000f3	8b cf		 mov	 ecx, edi
  000f5	50		 push	 eax
  000f6	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN32@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  000f9	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  000fc	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  000ff	0f 85 97 00 00
	00		 jne	 $LN2@put
$LN27@put:

; 529  :             _Failed = true;

  00105	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1

; 530  :         }
; 531  : 
; 532  :         return *this;
; 533  :     }

  00109	e9 8e 00 00 00	 jmp	 $LN2@put
$LN5@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 658  :             } else if (++_Fmtfirst == _Fmtlast) { // treat trailing % as %%

  0010e	46		 inc	 esi
  0010f	3b f7		 cmp	 esi, edi
  00111	0f 84 20 01 00
	00		 je	 $LN110@put

; 662  :                 char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  00117	8a 06		 mov	 al, BYTE PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  00119	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 662  :                 char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  0011b	88 45 e0	 mov	 BYTE PTR __Ch$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  0011e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00120	6a 00		 push	 0
  00122	ff 75 e0	 push	 DWORD PTR __Ch$[ebp]
  00125	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00128	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 664  :                 _Elem _Percent  = _Fmtfirst[-1];

  0012a	8a 7e ff	 mov	 bh, BYTE PTR [esi-1]
  0012d	8a d8		 mov	 bl, al
  0012f	88 5d e8	 mov	 BYTE PTR __Specifier$4[ebp], bl
  00132	c6 45 ec 00	 mov	 BYTE PTR __Modifier$5[ebp], 0

; 665  : 
; 666  :                 if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {

  00136	80 fb 45	 cmp	 bl, 69			; 00000045H
  00139	74 0f		 je	 SHORT $LN10@put
  0013b	80 fb 4f	 cmp	 bl, 79			; 0000004fH
  0013e	74 0a		 je	 SHORT $LN10@put
  00140	80 fb 51	 cmp	 bl, 81			; 00000051H
  00143	74 05		 je	 SHORT $LN10@put
  00145	80 fb 23	 cmp	 bl, 35			; 00000023H
  00148	75 23		 jne	 SHORT $LN119@put
$LN10@put:

; 667  :                     if (++_Fmtfirst == _Fmtlast) { // no specifier, copy %[E0Q#] as literal elements

  0014a	46		 inc	 esi
  0014b	3b f7		 cmp	 esi, edi
  0014d	74 5c		 je	 SHORT $LN111@put

; 675  :                     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  0014f	8a 06		 mov	 al, BYTE PTR [esi]
  00151	88 5d ec	 mov	 BYTE PTR __Modifier$5[ebp], bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  00154	8b 5d f0	 mov	 ebx, DWORD PTR __Ctype_fac$1$[ebp]
  00157	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 675  :                     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  00159	88 45 dc	 mov	 BYTE PTR __Ch$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2698 :         return do_narrow(_Ch, _Dflt);

  0015c	6a 00		 push	 0
  0015e	ff 75 dc	 push	 DWORD PTR __Ch$[ebp]
  00161	8b 03		 mov	 eax, DWORD PTR [ebx]
  00163	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00166	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 675  :                     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  00168	88 45 e8	 mov	 BYTE PTR __Specifier$4[ebp], al
  0016b	eb 03		 jmp	 SHORT $LN9@put
$LN119@put:

; 665  : 
; 666  :                 if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {

  0016d	8b 5d f0	 mov	 ebx, DWORD PTR __Ctype_fac$1$[ebp]
$LN9@put:

; 676  :                 }
; 677  : 
; 678  :                 _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier); // convert a single field

  00170	ff 75 ec	 push	 DWORD PTR __Modifier$5[ebp]
  00173	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00176	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  00179	ff 75 e8	 push	 DWORD PTR __Specifier$4[ebp]
  0017c	ff 75 1c	 push	 DWORD PTR __Pt$[ebp]
  0017f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00181	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00184	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  00187	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0018a	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0018d	52		 push	 edx
  0018e	ff 50 0c	 call	 DWORD PTR [eax+12]
  00191	8b 08		 mov	 ecx, DWORD PTR [eax]
  00193	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00196	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00199	89 7d 10	 mov	 DWORD PTR __Dest$[ebp+4], edi
$LN2@put:

; 655  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  0019c	46		 inc	 esi
  0019d	3b 75 24	 cmp	 esi, DWORD PTR __Fmtlast$[ebp]
  001a0	0f 85 fa fe ff
	ff		 jne	 $LL120@put

; 667  :                     if (++_Fmtfirst == _Fmtlast) { // no specifier, copy %[E0Q#] as literal elements

  001a6	e9 d6 fe ff ff	 jmp	 $LN88@put
$LN111@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001ab	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
  001ae	85 ff		 test	 edi, edi
  001b0	74 38		 je	 SHORT $LN69@put
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 259  :         return *_IPnext ? *_IPcount : 0;

  001b2	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001b5	83 38 00	 cmp	 DWORD PTR [eax], 0
  001b8	74 1d		 je	 SHORT $LN73@put
  001ba	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  001bd	8b 01		 mov	 eax, DWORD PTR [ecx]

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001bf	85 c0		 test	 eax, eax
  001c1	7e 14		 jle	 SHORT $LN73@put

; 254  :         --*_IPcount;

  001c3	48		 dec	 eax
  001c4	89 01		 mov	 DWORD PTR [ecx], eax

; 255  :         return (*_IPnext)++;

  001c6	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  001c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cb	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  001ce	89 01		 mov	 DWORD PTR [ecx], eax

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001d0	88 3a		 mov	 BYTE PTR [edx], bh
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  001d2	0f b6 c7	 movzx	 eax, bh
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001d5	eb 0b		 jmp	 SHORT $LN74@put
$LN73@put:
  001d7	8b 17		 mov	 edx, DWORD PTR [edi]
  001d9	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  001db	0f b6 c7	 movzx	 eax, bh
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001de	50		 push	 eax
  001df	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN74@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001e2	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  001e5	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001e8	75 04		 jne	 SHORT $LN68@put
$LN69@put:

; 529  :             _Failed = true;

  001ea	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN68@put:

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001ee	85 ff		 test	 edi, edi
  001f0	74 3c		 je	 SHORT $LN89@put
$LN122@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 682  :         return _Dest;

  001f2	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001f5	83 38 00	 cmp	 DWORD PTR [eax], 0
  001f8	74 1d		 je	 SHORT $LN93@put
  001fa	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  001fd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ff	85 c0		 test	 eax, eax
  00201	7e 14		 jle	 SHORT $LN93@put
  00203	48		 dec	 eax
  00204	89 01		 mov	 DWORD PTR [ecx], eax
  00206	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00209	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0020e	89 01		 mov	 DWORD PTR [ecx], eax
  00210	88 1a		 mov	 BYTE PTR [edx], bl
  00212	0f b6 c3	 movzx	 eax, bl
  00215	eb 0b		 jmp	 SHORT $LN94@put
$LN93@put:
  00217	8b 17		 mov	 edx, DWORD PTR [edi]
  00219	8b cf		 mov	 ecx, edi
  0021b	0f b6 c3	 movzx	 eax, bl
  0021e	50		 push	 eax
  0021f	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN94@put:
  00222	83 f8 ff	 cmp	 eax, -1
  00225	0f 85 53 fe ff
	ff		 jne	 $LN118@put
  0022b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
$LN89@put:
  0022e	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
  00232	e9 4a fe ff ff	 jmp	 $LN88@put
$LN110@put:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00237	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp+4]
  0023a	85 ff		 test	 edi, edi
  0023c	74 f0		 je	 SHORT $LN89@put
  0023e	8a 5e ff	 mov	 bl, BYTE PTR [esi-1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00241	eb af		 jmp	 SHORT $LN122@put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -80						; size = 52
$T3 = -28						; size = 4
__Lock$4 = -24						; size = 4
$T5 = -20						; size = 4
__Lock$6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$8 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 428  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 429  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  00039	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id

; 430  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  0004c	85 f6		 test	 esi, esi
  0004e	75 2f		 jne	 SHORT $LN11@use_facet

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00050	56		 push	 esi
  00051	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00054	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  00059	39 35 00 00 00
	00		 cmp	 DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, esi ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005f	75 10		 jne	 SHORT $LN12@use_facet

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00066	40		 inc	 eax
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN12@use_facet:

; 109  :                 }
; 110  :                 _END_LOCK()

  00071	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00079	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN11@use_facet:

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00082	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00085	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  00088	73 10		 jae	 SHORT $LN19@use_facet
  0008a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008d	8b 3c b0	 mov	 edi, DWORD PTR [eax+esi*4]

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  00090	85 ff		 test	 edi, edi
  00092	0f 85 d9 00 00
	00		 jne	 $LN70@use_facet
  00098	eb 02		 jmp	 SHORT $LN73@use_facet
$LN19@use_facet:

; 371  :     }
; 372  : 
; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009a	33 ff		 xor	 edi, edi
$LN73@use_facet:

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  0009c	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a0	74 10		 je	 SHORT $LN14@use_facet

; 376  :             return _Facptr; // found facet or not transparent
; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a2	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  000a7	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000aa	73 0e		 jae	 SHORT $LN74@use_facet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ac	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000af	8b 3c b0	 mov	 edi, DWORD PTR [eax+esi*4]
$LN14@use_facet:

; 431  : 
; 432  :     const size_t _Id         = _Facet::id;
; 433  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 434  : 
; 435  :     if (!_Pf) {

  000b2	85 ff		 test	 edi, edi
  000b4	0f 85 b7 00 00
	00		 jne	 $LN70@use_facet
$LN74@use_facet:

; 436  :         if (_Psave) {

  000ba	85 db		 test	 ebx, ebx
  000bc	74 07		 je	 SHORT $LN3@use_facet

; 437  :             _Pf = _Psave; // lazy facet already allocated

  000be	8b fb		 mov	 edi, ebx

; 438  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c0	e9 ac 00 00 00	 jmp	 $LN70@use_facet
$LN3@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 705  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));

  000c5	6a 0c		 push	 12			; 0000000cH
  000c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000cc	8b f8		 mov	 edi, eax
  000ce	83 c4 04	 add	 esp, 4
  000d1	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi
  000d4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d8	85 ff		 test	 edi, edi
  000da	74 68		 je	 SHORT $LN24@use_facet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000dc	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	85 c9		 test	 ecx, ecx
  000e4	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 109  :         return _Myptr ? _Myptr : &_Nul;

  000e6	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000e9	85 c0		 test	 eax, eax
  000eb	75 0a		 jne	 SHORT $LN33@use_facet
  000ed	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f0	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  000f2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 705  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));

  000f7	50		 push	 eax
  000f8	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  000fb	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00100	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 698  :     __CLR_OR_THIS_CALL time_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

  00107	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0010a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 705  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));

  00110	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 27   :     explicit __CLR_OR_THIS_CALL _Timevec(void* _Ptr = nullptr) : _Timeptr(_Ptr) {}

  00117	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 211  :         return _Timevec(::_Gettnames());

  0011d	e8 00 00 00 00	 call	 __Gettnames

; 27   :     explicit __CLR_OR_THIS_CALL _Timevec(void* _Ptr = nullptr) : _Timeptr(_Ptr) {}

  00122	8b f0		 mov	 esi, eax

; 38   :         if (this != &_Right) {

  00124	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  00127	3b d8		 cmp	 ebx, eax
  00129	74 0e		 je	 SHORT $LN53@use_facet

; 39   :             _CSTD free(_Timeptr);

  0012b	ff 33		 push	 DWORD PTR [ebx]
  0012d	e8 00 00 00 00	 call	 _free
  00132	83 c4 04	 add	 esp, 4

; 40   :             _Timeptr                               = _Right._Timeptr;

  00135	89 33		 mov	 DWORD PTR [ebx], esi

; 41   :             const_cast<_Timevec&>(_Right)._Timeptr = nullptr; // TRANSITION, should be movable-only

  00137	33 f6		 xor	 esi, esi
$LN53@use_facet:

; 34   :         _CSTD free(_Timeptr);

  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 _free
  0013f	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xloctime

; 705  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));

  00142	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00144	33 ff		 xor	 edi, edi
$LN25@use_facet:
  00146	f6 45 f0 01	 test	 BYTE PTR $T7[ebp], 1
  0014a	74 08		 je	 SHORT $LN29@use_facet
  0014c	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  0014f	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1390 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00154	89 7d 08	 mov	 DWORD PTR __Psave_guard$8[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 451  :             _Facet_Register(_Pfmod);

  00157	57		 push	 edi
  00158	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015c	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 452  : #endif // defined(_M_CEE)
; 453  : 
; 454  :             _Pfmod->_Incref();

  00161	8b 17		 mov	 edx, DWORD PTR [edi]
  00163	83 c4 04	 add	 esp, 4
  00166	8b cf		 mov	 ecx, edi
  00168	ff 52 04	 call	 DWORD PTR [edx+4]

; 455  :             _Facetptr<_Facet>::_Psave = _Psave;

  0016b	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
$LN70@use_facet:

; 456  :             _Pf                       = _Psave;
; 457  : 
; 458  :             (void) _Psave_guard.release();
; 459  :         }
; 460  :     }
; 461  : 
; 462  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00171	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00174	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00179	8b c7		 mov	 eax, edi

; 463  :     _END_LOCK()
; 464  : } // end of use_facet body

  0017b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00185	59		 pop	 ecx
  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2:
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN5@sentry

; 81   :                 _Rdbuf->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 120  :             }
; 121  :         }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 20
$T3 = -32						; size = 8
__Ok$4 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Rdbuf$1$ = 8						; size = 4
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00030	89 33		 mov	 DWORD PTR [ebx], esi

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 16		 mov	 edx, DWORD PTR [esi]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 73   :             if (_Rdbuf) {

  0003b	85 c9		 test	 ecx, ecx
  0003d	74 07		 je	 SHORT $LN8@sentry

; 74   :                 _Rdbuf->_Lock();

  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	ff 50 04	 call	 DWORD PTR [eax+4]
  00044	8b 16		 mov	 edx, DWORD PTR [esi]
$LN8@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0004e	8d 3c 30	 lea	 edi, DWORD PTR [eax+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  00058	74 07		 je	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  0005a	32 c0		 xor	 al, al

; 95   :                 return;

  0005c	e9 9d 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00061	8b 7f 3c	 mov	 edi, DWORD PTR [edi+60]

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00064	85 ff		 test	 edi, edi
  00066	0f 84 90 00 00
	00		 je	 $LN4@sentry
  0006c	3b fe		 cmp	 edi, esi
  0006e	0f 84 88 00 00
	00		 je	 $LN4@sentry

; 546  :         const auto _Rdbuf = _Myios::rdbuf();

  00074	8b 07		 mov	 eax, DWORD PTR [edi]
  00076	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00079	8b 44 38 38	 mov	 eax, DWORD PTR [eax+edi+56]
  0007d	89 45 08	 mov	 DWORD PTR __Rdbuf$1$[ebp], eax

; 547  :         if (_Rdbuf) { // buffer exists, flush it

  00080	85 c0		 test	 eax, eax
  00082	74 6b		 je	 SHORT $LN36@sentry

; 548  :             const sentry _Ok(*this);

  00084	57		 push	 edi
  00085	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  00088	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 550  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  0008d	80 7d ec 00	 cmp	 BYTE PTR __Ok$4[ebp+4], 0
  00091	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00095	74 28		 je	 SHORT $LN24@sentry
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 123  :         return sync();

  00097	8b 4d 08	 mov	 ecx, DWORD PTR __Rdbuf$1$[ebp]
  0009a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009c	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 550  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  0009f	83 f8 ff	 cmp	 eax, -1
  000a2	75 1b		 jne	 SHORT $LN24@sentry

; 551  :                 _Myios::setstate(ios_base::badbit); // sync failed

  000a4	8b 07		 mov	 eax, DWORD PTR [edi]
  000a6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 244  :         _State &= _Statmask;

  000a9	8b 44 39 0c	 mov	 eax, DWORD PTR [ecx+edi+12]
  000ad	83 e0 13	 and	 eax, 19			; 00000013H
  000b0	83 c8 04	 or	 eax, 4

; 245  :         _Mystate             = _State;

  000b3	89 44 39 0c	 mov	 DWORD PTR [ecx+edi+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  000b7	8b 4c 39 10	 mov	 ecx, DWORD PTR [ecx+edi+16]
  000bb	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  000bd	75 58		 jne	 SHORT $LN48@sentry
$LN24@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  000bf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  000c3	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  000c8	84 c0		 test	 al, al
  000ca	75 08		 jne	 SHORT $LN35@sentry

; 119  :                 this->_Myostr._Osfx();

  000cc	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  000cf	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN35@sentry:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  000d4	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  000d7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e0	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  000e4	85 c9		 test	 ecx, ecx
  000e6	74 05		 je	 SHORT $LN39@sentry

; 81   :                 _Rdbuf->_Unlock();

  000e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ea	ff 50 08	 call	 DWORD PTR [eax+8]
$LN39@sentry:
  000ed	8b 16		 mov	 edx, DWORD PTR [esi]
$LN36@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  000ef	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f2	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  000f7	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000fa	eb 02		 jmp	 SHORT $LN1@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000fc	b0 01		 mov	 al, 1
$LN1@sentry:

; 106  :         }

  000fe	88 43 04	 mov	 BYTE PTR [ebx+4], al
  00101	8b c3		 mov	 eax, ebx
  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 04 00	 ret	 4
$LN48@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  00117	f6 c1 04	 test	 cl, 4
  0011a	74 07		 je	 SHORT $LN26@sentry

; 254  :                 _Msg = "ios_base::badbit set";

  0011c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00121	eb 10		 jmp	 SHORT $LN28@sentry
$LN26@sentry:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00123	f6 c1 02	 test	 cl, 2
  00126	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0012b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00130	0f 44 f0	 cmove	 esi, eax
$LN28@sentry:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  00133	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00136	6a 01		 push	 1
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0013e	83 c4 08	 add	 esp, 8
  00141	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00144	50		 push	 eax
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0014b	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00150	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@sentry:
  00159	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3229 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN6@unique_ptr

; 3120 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN6@unique_ptr:

; 3230 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3231 :         }
; 3232 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string
;	COMDAT ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z
_TEXT	SEGMENT
__RNext$ = 8						; size = 4
__UVal$ = 12						; size = 4
??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z PROC		; std::_UIntegral_to_buff<char,unsigned int>, COMDAT

; 453  : _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal) { // format _UVal into buffer *ending at* _RNext

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 454  :     static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");
; 455  : 
; 456  : #ifdef _WIN64
; 457  :     auto _UVal_trunc = _UVal;
; 458  : #else // ^^^ _WIN64 ^^^ // vvv !_WIN64 vvv
; 459  : 
; 460  :     constexpr bool _Big_uty = sizeof(_UTy) > 4;
; 461  :     if constexpr (_Big_uty) { // For 64-bit numbers, work in chunks to avoid 64-bit divisions.
; 462  :         while (_UVal > 0xFFFFFFFFU) {
; 463  :             auto _UVal_chunk = static_cast<unsigned long>(_UVal % 1000000000);
; 464  :             _UVal /= 1000000000;
; 465  : 
; 466  :             for (int _Idx = 0; _Idx != 9; ++_Idx) {
; 467  :                 *--_RNext = static_cast<_Elem>('0' + _UVal_chunk % 10);
; 468  :                 _UVal_chunk /= 10;
; 469  :             }
; 470  :         }
; 471  :     }
; 472  : 
; 473  :     auto _UVal_trunc = static_cast<unsigned long>(_UVal);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __UVal$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __RNext$[ebp]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@UIntegral_:

; 474  : #endif // _WIN64
; 475  : 
; 476  :     do {
; 477  :         *--_RNext = static_cast<_Elem>('0' + _UVal_trunc % 10);

  00010	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00015	4e		 dec	 esi
  00016	f7 e1		 mul	 ecx
  00018	c1 ea 03	 shr	 edx, 3
  0001b	8a c2		 mov	 al, dl
  0001d	c0 e0 02	 shl	 al, 2
  00020	8d 1c 10	 lea	 ebx, DWORD PTR [eax+edx]
  00023	02 db		 add	 bl, bl
  00025	2a cb		 sub	 cl, bl
  00027	80 c1 30	 add	 cl, 48			; 00000030H
  0002a	88 0e		 mov	 BYTE PTR [esi], cl

; 478  :         _UVal_trunc /= 10;

  0002c	8b ca		 mov	 ecx, edx

; 479  :     } while (_UVal_trunc != 0);

  0002e	85 c9		 test	 ecx, ecx
  00030	75 de		 jne	 SHORT $LL4@UIntegral_

; 480  :     return _RNext;

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 481  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ENDP		; std::_UIntegral_to_buff<char,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
;	COMDAT ?SetEterExceptionHandler@@YAXXZ
_TEXT	SEGMENT
?SetEterExceptionHandler@@YAXXZ PROC			; SetEterExceptionHandler, COMDAT

; 72   : 	SetUnhandledExceptionFilter(EterExceptionFilter);

  00000	68 00 00 00 00	 push	 OFFSET ?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; EterExceptionFilter
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 73   : }

  0000b	c3		 ret	 0
?SetEterExceptionHandler@@YAXXZ ENDP			; SetEterExceptionHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
;	COMDAT ?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_pExceptionInfo$ = 8					; size = 4
?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC ; EterExceptionFilter, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : #ifdef ENABLE_CRASH_MINIDUMP
; 63   : 	make_minidump(pExceptionInfo);

  00003	ff 75 08	 push	 DWORD PTR _pExceptionInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z ; make_minidump
  0000b	83 c4 04	 add	 esp, 4

; 64   : #else
; 65   : 	// eterlog trash
; 66   : #endif
; 67   : 	return EXCEPTION_EXECUTE_HANDLER;

  0000e	b8 01 00 00 00	 mov	 eax, 1

; 68   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP ; EterExceptionFilter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 20
$T3 = -36						; size = 8
$T4 = -36						; size = 8
$T5 = -36						; size = 8
$T6 = -36						; size = 8
__Ok$ = -28						; size = 8
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Manip$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,char>, COMDAT

; 174  :     const _Timeobj<_Elem2, const tm*>& _Manip) { // put time information to output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 175  :     using _Myos   = basic_ostream<_Elem, _Traits>;
; 176  :     using _Iter   = ostreambuf_iterator<_Elem, _Traits>;
; 177  :     using _Mytput = time_put<_Elem2, _Iter>;
; 178  : 
; 179  :     static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for put_time");
; 180  : 
; 181  :     ios_base::iostate _State = ios_base::goodbit;
; 182  :     const typename _Myos::sentry _Ok(_Ostr);

  0002b	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00031	33 ff		 xor	 edi, edi
  00033	56		 push	 esi
  00034	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi
  00037	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 183  : 
; 184  :     if (_Ok) { // state okay, insert monetary amount

  0003c	80 7d e8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00040	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00043	0f 84 a9 00 00
	00		 je	 $LN46@operator

; 185  :         const _Mytput& _Tput_fac = _STD use_facet<_Mytput>(_Ostr.getloc());

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 373  :         return *_Ploc;

  0004e	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00052	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 268  :         _Ptr->_Incref();

  00055	8b cf		 mov	 ecx, edi
  00057	89 7d e0	 mov	 DWORD PTR $T6[ebp+4], edi
  0005a	8b 07		 mov	 eax, DWORD PTR [edi]
  0005c	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 185  :         const _Mytput& _Tput_fac = _STD use_facet<_Mytput>(_Ostr.getloc());

  0005f	8d 45 dc	 lea	 eax, DWORD PTR $T6[ebp]
  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b d8		 mov	 ebx, eax
  00071	85 ff		 test	 edi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  00073	74 13		 je	 SHORT $LN19@operator

; 352  :             delete _Ptr->_Decref();

  00075	8b 07		 mov	 eax, DWORD PTR [edi]
  00077	8b cf		 mov	 ecx, edi
  00079	ff 50 08	 call	 DWORD PTR [eax+8]
  0007c	8b c8		 mov	 ecx, eax
  0007e	85 c9		 test	 ecx, ecx
  00080	74 06		 je	 SHORT $LN19@operator
  00082	8b 01		 mov	 eax, DWORD PTR [ecx]
  00084	6a 01		 push	 1
  00086	ff 10		 call	 DWORD PTR [eax]
$LN19@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 188  :                 .failed()) {

  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	8b 45 0c	 mov	 eax, DWORD PTR __Manip$[ebp]
  00094	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iterator

; 552  :     bool _Failed            = false; // true if any stores have failed

  00096	c6 45 dc 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 188  :                 .failed()) {

  0009a	ff 70 08	 push	 DWORD PTR [eax+8]
  0009d	ff 70 04	 push	 DWORD PTR [eax+4]
  000a0	ff 30		 push	 DWORD PTR [eax]
  000a2	0f b6 41 40	 movzx	 eax, BYTE PTR [ecx+64]
  000a6	50		 push	 eax
  000a7	51		 push	 ecx
  000a8	ff 71 38	 push	 DWORD PTR [ecx+56]
  000ab	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
  000ae	8b cb		 mov	 ecx, ebx
  000b0	ff 75 dc	 push	 DWORD PTR $T5[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put

; 189  :             _State |= ios_base::badbit;

  000b9	33 c9		 xor	 ecx, ecx
  000bb	ba 04 00 00 00	 mov	 edx, 4
  000c0	8b fa		 mov	 edi, edx
  000c2	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  000c5	38 08		 cmp	 BYTE PTR [eax], cl
  000c7	0f 44 f9	 cmove	 edi, ecx
  000ca	eb 2b		 jmp	 SHORT $LN10@operator
__catch$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$0:

; 190  :         }
; 191  :         _CATCH_IO_(ios_base, _Ostr)

  000cc	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cf	6a 01		 push	 1
  000d1	6a 04		 push	 4
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	03 ca		 add	 ecx, edx
  000da	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000df	b8 00 00 00 00	 mov	 eax, $LN11@operator
  000e4	c3		 ret	 0
$LN11@operator:

; 183  : 
; 184  :     if (_Ok) { // state okay, insert monetary amount

  000e5	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  000e8	8b 7d ec	 mov	 edi, DWORD PTR __State$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
  000eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN46@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 194  :     _Ostr.setstate(_State);

  000f2	ba 04 00 00 00	 mov	 edx, 4
$LN10@operator:
  000f7	8b 06		 mov	 eax, DWORD PTR [esi]
  000f9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  000fc	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 194  :     _Ostr.setstate(_State);

  00100	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 53   :         clear(rdstate() | _State, _Reraise);

  00102	0b c7		 or	 eax, edi

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00104	33 ff		 xor	 edi, edi
  00106	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  00109	0f 45 d7	 cmovne	 edx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 244  :         _State &= _Statmask;

  0010c	0b d0		 or	 edx, eax

; 245  :         _Mystate             = _State;
; 246  :         const auto _Filtered = _State & _Except;

  0010e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00111	83 e2 17	 and	 edx, 23			; 00000017H
  00114	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00117	23 c2		 and	 eax, edx

; 247  :         if (_Filtered) {

  00119	75 45		 jne	 SHORT $LN50@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  0011b	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00122	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  00127	84 c0		 test	 al, al
  00129	75 08		 jne	 SHORT $LN39@operator

; 119  :                 this->_Myostr._Osfx();

  0012b	8b 4d e4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN39@operator:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00133	8b 4d e4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00136	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0013a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013f	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 80   :             if (_Rdbuf) {

  00143	85 c9		 test	 ecx, ecx
  00145	74 05		 je	 SHORT $LN43@operator

; 81   :                 _Rdbuf->_Unlock();

  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	ff 52 08	 call	 DWORD PTR [edx+8]
$LN43@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip

; 195  :     return _Ostr;

  0014c	8b c6		 mov	 eax, esi

; 196  : }

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN50@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  00160	a8 04		 test	 al, 4
  00162	74 07		 je	 SHORT $LN30@operator

; 254  :                 _Msg = "ios_base::badbit set";

  00164	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00169	eb 0f		 jmp	 SHORT $LN32@operator
$LN30@operator:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  0016b	a8 02		 test	 al, 2
  0016d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00172	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00177	0f 44 f0	 cmove	 esi, eax
$LN32@operator:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0017a	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
  0017d	6a 01		 push	 1
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00185	83 c4 08	 add	 esp, 8
  00188	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0018b	50		 push	 eax
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00192	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00197	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN48@operator:
  001a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$3:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,char>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Tptr_arg$ = 12					; size = 4
__Fmt_arg$ = 16						; size = 4
??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z PROC ; std::put_time<char>, COMDAT

; 168  : _NODISCARD _Timeobj<_Elem, const tm*> put_time(const tm* _Tptr_arg, const _Elem* _Fmt_arg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  :     _Timeobj(_Ptr _Tptr_arg, const _Elem* _Fmt_arg) : _Tptr(_Tptr_arg), _Fmtfirst(_Fmt_arg) {

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Fmt_arg$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Tptr_arg$[ebp]

; 127  :         for (_Fmtlast = _Fmtfirst; *_Fmtlast != 0; ++_Fmtlast) { // find end of format string

  0000c	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00017	74 10		 je	 SHORT $LN12@put_time
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@put_time:
  00020	41		 inc	 ecx
  00021	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00024	75 fa		 jne	 SHORT $LL6@put_time
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN12@put_time:

; 169  :     return _Timeobj<_Elem, const tm*>(_Tptr_arg, _Fmt_arg);
; 170  : }

  00029	8b c2		 mov	 eax, edx
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ENDP ; std::put_time<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 735  :     virtual ~basic_ostringstream() noexcept {}

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8d 71 50	 lea	 esi, DWORD PTR [ecx+80]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00033	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  0003c	89 44 31 ac	 mov	 DWORD PTR [ecx+esi-84], eax
  00040	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00043	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 63   :     virtual __CLR_OR_THIS_CALL ~basic_ostream() noexcept {}

  00048	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00056	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005c	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0005f	89 44 31 ac	 mov	 DWORD PTR [ecx+esi-84], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00063	56		 push	 esi
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00071	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 b0	 lea	 esi, DWORD PTR [ecx-80]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0e		 je	 SHORT $LN4@scalar
  00014	68 98 00 00 00	 push	 152			; 00000098H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv194 = -16						; size = 4
tv248 = -12						; size = 4
__Gptr_old$1$ = -8					; size = 4
__Seeklow$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  :     virtual pos_type seekpos(pos_type _Pos, ios_base::openmode _Mode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 70   :         return _Myoff + _Fpos;

  00007	8b 5d 18	 mov	 ebx, DWORD PTR __Pos$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 399  :     virtual pos_type seekpos(pos_type _Pos, ios_base::openmode _Mode = ios_base::in | ios_base::out) {

  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 70   :         return _Myoff + _Fpos;

  0000e	8b 7d 14	 mov	 edi, DWORD PTR __Pos$[ebp+8]
  00011	03 7d 0c	 add	 edi, DWORD PTR __Pos$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00014	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 70   :         return _Myoff + _Fpos;

  00017	13 5d 10	 adc	 ebx, DWORD PTR __Pos$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0001a	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	89 45 f8	 mov	 DWORD PTR __Gptr_old$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00023	74 04		 je	 SHORT $LN10@seekpos
  00025	33 c9		 xor	 ecx, ecx
  00027	eb 11		 jmp	 SHORT $LN2@seekpos
$LN10@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  00029	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]

; 404  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  0002e	85 c9		 test	 ecx, ecx
  00030	74 08		 je	 SHORT $LN2@seekpos
  00032	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  00035	73 03		 jae	 SHORT $LN2@seekpos

; 405  :             _Seekhigh = _Pptr_old;

  00037	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN2@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  0003a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003d	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 409  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  0003f	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00042	89 45 f0	 mov	 DWORD PTR tv194[ebp], eax
  00045	2b c2		 sub	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  00047	89 55 fc	 mov	 DWORD PTR __Seeklow$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 410  :         if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist)) {

  0004a	99		 cdq
  0004b	3b da		 cmp	 ebx, edx
  0004d	77 78		 ja	 SHORT $LN5@seekpos
  0004f	72 04		 jb	 SHORT $LN32@seekpos
  00051	3b f8		 cmp	 edi, eax
  00053	77 72		 ja	 SHORT $LN5@seekpos
$LN32@seekpos:

; 411  :             return pos_type(off_type(-1));
; 412  :         }
; 413  : 
; 414  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  00055	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
  00058	8b c7		 mov	 eax, edi
  0005a	0b c3		 or	 eax, ebx
  0005c	74 14		 je	 SHORT $LN4@seekpos
  0005e	f6 c2 01	 test	 dl, 1
  00061	74 06		 je	 SHORT $LN6@seekpos
  00063	83 7d f8 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  00067	74 5e		 je	 SHORT $LN5@seekpos
$LN6@seekpos:
  00069	f6 c2 02	 test	 dl, 2
  0006c	74 04		 je	 SHORT $LN4@seekpos
  0006e	85 c9		 test	 ecx, ecx
  00070	74 55		 je	 SHORT $LN5@seekpos
$LN4@seekpos:

; 415  :             return pos_type(off_type(-1));
; 416  :         }
; 417  : 
; 418  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  00072	8b 45 fc	 mov	 eax, DWORD PTR __Seeklow$1$[ebp]
  00075	03 c7		 add	 eax, edi

; 419  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  00077	f6 c2 01	 test	 dl, 1
  0007a	74 18		 je	 SHORT $LN7@seekpos
  0007c	83 7d f8 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  00080	74 12		 je	 SHORT $LN7@seekpos
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 208  :         *_IGnext  = _Next;

  00082	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00085	89 02		 mov	 DWORD PTR [edx], eax

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00087	8b 55 f0	 mov	 edx, DWORD PTR tv194[ebp]
  0008a	2b d0		 sub	 edx, eax
  0008c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
$LN7@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 423  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  00094	f6 c2 02	 test	 dl, 2
  00097	74 24		 je	 SHORT $LN8@seekpos
  00099	85 c9		 test	 ecx, ecx
  0009b	74 20		 je	 SHORT $LN8@seekpos
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  0009d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000a0	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a3	8b 10		 mov	 edx, DWORD PTR [eax]

; 248  :         *_IPfirst = _First;

  000a5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 213  :         return *_IPnext + *_IPcount;

  000a8	03 11		 add	 edx, DWORD PTR [ecx]

; 248  :         *_IPfirst = _First;

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __Seeklow$1$[ebp]
  000ad	89 08		 mov	 DWORD PTR [eax], ecx

; 249  :         *_IPnext  = _Next;

  000af	03 cf		 add	 ecx, edi
  000b1	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 250  :         *_IPcount = static_cast<int>(_Last - _Next);

  000b4	2b d1		 sub	 edx, ecx
  000b6	89 08		 mov	 DWORD PTR [eax], ecx
  000b8	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000bb	89 10		 mov	 DWORD PTR [eax], edx
$LN8@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  000bd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	89 38		 mov	 DWORD PTR [eax], edi
  000c2	89 58 04	 mov	 DWORD PTR [eax+4], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 427  :         return pos_type(_Off);

  000c5	eb 10		 jmp	 SHORT $LN33@seekpos
$LN5@seekpos:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  000c7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ca	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000d0	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$LN33@seekpos:
  000d7	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 428  :     }

  000d8	0f 57 c0	 xorps	 xmm0, xmm0
  000db	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000e2	5e		 pop	 esi
  000e3	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000ea	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Newoff$ = -28						; size = 8
tv175 = -20						; size = 4
tv222 = -16						; size = 4
__Seeklow$1$ = -12					; size = 4
__Seekdist$1$ = -8					; size = 4
__Gptr_old$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Off$2$ = 20						; size = 4
__Way$ = 20						; size = 4
__Newptr$1$ = 24					; size = 4
__Mode$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 338  :         off_type _Off, ios_base::seekdir _Way, ios_base::openmode _Mode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 341  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0000b	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  0000f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00012	8b 38		 mov	 edi, DWORD PTR [eax]
  00014	89 7d fc	 mov	 DWORD PTR __Gptr_old$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 341  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00017	74 04		 je	 SHORT $LN23@seekoff
  00019	33 c9		 xor	 ecx, ecx
  0001b	eb 11		 jmp	 SHORT $LN4@seekoff
$LN23@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  0001d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 341  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00020	8b 08		 mov	 ecx, DWORD PTR [eax]

; 342  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  00022	85 c9		 test	 ecx, ecx
  00024	74 08		 je	 SHORT $LN4@seekoff
  00026	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  00029	73 03		 jae	 SHORT $LN4@seekoff

; 343  :             _Seekhigh = _Pptr_old;

  0002b	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN4@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  0002e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 349  :         switch (_Way) {

  00031	8b 5d 18	 mov	 ebx, DWORD PTR __Mode$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  00034	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 347  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  00036	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00039	89 45 ec	 mov	 DWORD PTR tv175[ebp], eax
  0003c	2b c2		 sub	 eax, edx
  0003e	89 45 f8	 mov	 DWORD PTR __Seekdist$1$[ebp], eax

; 349  :         switch (_Way) {

  00041	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  00044	89 55 f4	 mov	 DWORD PTR __Seeklow$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 349  :         switch (_Way) {

  00047	83 e8 00	 sub	 eax, 0
  0004a	74 61		 je	 SHORT $LN5@seekoff
  0004c	83 e8 01	 sub	 eax, 1
  0004f	74 13		 je	 SHORT $LN7@seekoff
  00051	83 e8 01	 sub	 eax, 1
  00054	0f 85 ec 00 00
	00		 jne	 $LN18@seekoff

; 352  :             break;
; 353  :         case ios_base::end:
; 354  :             _Newoff = _Seekdist;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  0005d	99		 cdq
  0005e	8b f8		 mov	 edi, eax
  00060	8b c2		 mov	 eax, edx

; 355  :             break;

  00062	eb 57		 jmp	 SHORT $LN2@seekoff
$LN7@seekoff:

; 356  :         case ios_base::cur:
; 357  :             {
; 358  :                 constexpr auto _Both = ios_base::in | ios_base::out;
; 359  :                 if ((_Mode & _Both)
; 360  :                     != _Both) { // prohibited by N4727 [stringbuf.virtuals] Table 107 "seekoff positioning"

  00064	8b c3		 mov	 eax, ebx
  00066	83 e0 03	 and	 eax, 3
  00069	3c 03		 cmp	 al, 3
  0006b	0f 84 d5 00 00
	00		 je	 $LN18@seekoff

; 361  :                     if (_Mode & ios_base::in) {

  00071	f6 c3 01	 test	 bl, 1
  00074	74 17		 je	 SHORT $LN9@seekoff

; 362  :                         if (_Gptr_old || !_Seeklow) {

  00076	85 ff		 test	 edi, edi
  00078	75 08		 jne	 SHORT $LN12@seekoff
  0007a	85 d2		 test	 edx, edx
  0007c	0f 85 c4 00 00
	00		 jne	 $LN18@seekoff
$LN12@seekoff:

; 363  :                             _Newoff = _Gptr_old - _Seeklow;

  00082	8b c7		 mov	 eax, edi
  00084	2b c2		 sub	 eax, edx
  00086	99		 cdq
  00087	8b f8		 mov	 edi, eax
  00089	8b c2		 mov	 eax, edx

; 364  :                             break;

  0008b	eb 2e		 jmp	 SHORT $LN2@seekoff
$LN9@seekoff:

; 365  :                         }
; 366  :                     } else if ((_Mode & ios_base::out) && (_Pptr_old || !_Seeklow)) {

  0008d	f6 c3 02	 test	 bl, 2
  00090	0f 84 b0 00 00
	00		 je	 $LN18@seekoff
  00096	85 c9		 test	 ecx, ecx
  00098	75 08		 jne	 SHORT $LN14@seekoff
  0009a	85 d2		 test	 edx, edx
  0009c	0f 85 a4 00 00
	00		 jne	 $LN18@seekoff
$LN14@seekoff:

; 367  :                         _Newoff = _Pptr_old - _Seeklow;

  000a2	8b c1		 mov	 eax, ecx
  000a4	2b c2		 sub	 eax, edx
  000a6	99		 cdq
  000a7	8b f8		 mov	 edi, eax
  000a9	8b c2		 mov	 eax, edx

; 368  :                         break;

  000ab	eb 0e		 jmp	 SHORT $LN2@seekoff
$LN5@seekoff:
  000ad	0f 57 c0	 xorps	 xmm0, xmm0

; 350  :         case ios_base::beg:
; 351  :             _Newoff = 0;

  000b0	66 0f 13 45 e4	 movlpd	 QWORD PTR __Newoff$[ebp], xmm0
  000b5	8b 45 e8	 mov	 eax, DWORD PTR __Newoff$[ebp+4]
  000b8	8b 7d e4	 mov	 edi, DWORD PTR __Newoff$[ebp]
$LN2@seekoff:

; 369  :                     }
; 370  :                 }
; 371  :             }
; 372  : 
; 373  :             // fallthrough
; 374  :         default:
; 375  :             return pos_type(off_type(-1));
; 376  :         }
; 377  : 
; 378  :         if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist)) {

  000bb	03 7d 0c	 add	 edi, DWORD PTR __Off$[ebp]
  000be	13 45 10	 adc	 eax, DWORD PTR __Off$[ebp+4]
  000c1	89 45 14	 mov	 DWORD PTR __Off$2$[ebp], eax
  000c4	8b 45 f8	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  000c7	99		 cdq
  000c8	39 55 14	 cmp	 DWORD PTR __Off$2$[ebp], edx
  000cb	77 79		 ja	 SHORT $LN18@seekoff
  000cd	72 04		 jb	 SHORT $LN45@seekoff
  000cf	3b f8		 cmp	 edi, eax
  000d1	77 73		 ja	 SHORT $LN18@seekoff
$LN45@seekoff:

; 379  :             return pos_type(off_type(-1));
; 380  :         }
; 381  : 
; 382  :         _Off += _Newoff;
; 383  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  000d3	8b 55 fc	 mov	 edx, DWORD PTR __Gptr_old$1$[ebp]
  000d6	8b c7		 mov	 eax, edi
  000d8	0b 45 14	 or	 eax, DWORD PTR __Off$2$[ebp]
  000db	74 12		 je	 SHORT $LN17@seekoff
  000dd	f6 c3 01	 test	 bl, 1
  000e0	74 04		 je	 SHORT $LN19@seekoff
  000e2	85 d2		 test	 edx, edx
  000e4	74 60		 je	 SHORT $LN18@seekoff
$LN19@seekoff:
  000e6	f6 c3 02	 test	 bl, 2
  000e9	74 04		 je	 SHORT $LN17@seekoff
  000eb	85 c9		 test	 ecx, ecx
  000ed	74 57		 je	 SHORT $LN18@seekoff
$LN17@seekoff:

; 384  :             return pos_type(off_type(-1));
; 385  :         }
; 386  : 
; 387  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __Seeklow$1$[ebp]
  000f2	03 c7		 add	 eax, edi
  000f4	89 45 18	 mov	 DWORD PTR __Newptr$1$[ebp], eax

; 388  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  000f7	f6 c3 01	 test	 bl, 1
  000fa	74 13		 je	 SHORT $LN20@seekoff
  000fc	85 d2		 test	 edx, edx
  000fe	74 0f		 je	 SHORT $LN20@seekoff
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 208  :         *_IGnext  = _Next;

  00100	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00103	89 02		 mov	 DWORD PTR [edx], eax

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00105	8b 55 ec	 mov	 edx, DWORD PTR tv175[ebp]
  00108	2b d0		 sub	 edx, eax
  0010a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
$LN20@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 392  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  0010f	f6 c3 02	 test	 bl, 2
  00112	74 25		 je	 SHORT $LN21@seekoff
  00114	85 c9		 test	 ecx, ecx
  00116	74 21		 je	 SHORT $LN21@seekoff
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  00118	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0011b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0011e	8b 10		 mov	 edx, DWORD PTR [eax]

; 248  :         *_IPfirst = _First;

  00120	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 213  :         return *_IPnext + *_IPcount;

  00123	03 11		 add	 edx, DWORD PTR [ecx]

; 248  :         *_IPfirst = _First;

  00125	8b 4d f4	 mov	 ecx, DWORD PTR __Seeklow$1$[ebp]
  00128	89 08		 mov	 DWORD PTR [eax], ecx

; 249  :         *_IPnext  = _Next;

  0012a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0012d	8b 4d 18	 mov	 ecx, DWORD PTR __Newptr$1$[ebp]

; 250  :         *_IPcount = static_cast<int>(_Last - _Next);

  00130	2b d1		 sub	 edx, ecx
  00132	89 08		 mov	 DWORD PTR [eax], ecx
  00134	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00137	89 10		 mov	 DWORD PTR [eax], edx
$LN21@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00139	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0013c	8b 4d 14	 mov	 ecx, DWORD PTR __Off$2$[ebp]
  0013f	89 38		 mov	 DWORD PTR [eax], edi
  00141	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 396  :         return pos_type(_Off);

  00144	eb 10		 jmp	 SHORT $LN48@seekoff
$LN18@seekoff:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00146	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00149	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0014f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$LN48@seekoff:
  00156	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 397  :     }

  00157	0f 57 c0	 xorps	 xmm0, xmm0
  0015a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00161	5e		 pop	 esi
  00162	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00169	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  0016e	5b		 pop	 ebx
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 311  :     virtual int_type underflow() { // get an element from stream, but don't point past it

  00000	56		 push	 esi
  00001	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00002	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  00005	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 313  :         if (!_Gptr) { // no character buffer, fail

  00007	85 d2		 test	 edx, edx
  00009	74 45		 je	 SHORT $LN5@underflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 198  :         return *_IGnext + *_IGcount;

  0000b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 317  :         if (_Gptr < _Mysb::egptr()) {

  00012	3b d0		 cmp	 edx, eax
  00014	73 06		 jae	 SHORT $LN3@underflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  00016	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00019	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 335  :     }

  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
$LN3@underflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  0001c	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 322  :         const auto _Pptr = _Mysb::pptr();

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	85 c0		 test	 eax, eax

; 323  :         if (!_Pptr || (_Mystate & _Noread)) { // no put area or read disallowed

  00023	74 2b		 je	 SHORT $LN5@underflow
  00025	f6 41 3c 04	 test	 BYTE PTR [ecx+60], 4
  00029	75 25		 jne	 SHORT $LN5@underflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0002b	8b 71 38	 mov	 esi, DWORD PTR [ecx+56]
  0002e	3b f0		 cmp	 esi, eax
  00030	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 328  :         if (_Local_highwater <= _Gptr) { // nothing in the put area to take

  00033	3b f2		 cmp	 esi, edx
  00035	76 19		 jbe	 SHORT $LN5@underflow

; 329  :             return _Traits::eof();
; 330  :         }
; 331  : 
; 332  :         _Seekhigh = _Local_highwater;

  00037	89 71 38	 mov	 DWORD PTR [ecx+56], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  0003a	8b 07		 mov	 eax, DWORD PTR [edi]

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  0003c	2b f0		 sub	 esi, eax
  0003e	89 07		 mov	 DWORD PTR [edi], eax
  00040	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00043	5f		 pop	 edi
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 186  :         return *_IGnext;

  00046	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 335  :     }

  00049	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  0004c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 335  :     }

  0004f	c3		 ret	 0
$LN5@underflow:
  00050	5f		 pop	 edi

; 324  :             return _Traits::eof();

  00051	83 c8 ff	 or	 eax, -1

; 335  :     }

  00054	5e		 pop	 esi
  00055	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 294  :     virtual int_type pbackfail(int_type _Meta = _Traits::eof()) { // put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 294  :     virtual int_type pbackfail(int_type _Meta = _Traits::eof()) { // put an element back to stream

  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00007	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 297  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN3@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  0000d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 297  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	76 38		 jbe	 SHORT $LN3@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  00014	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00017	83 fa ff	 cmp	 edx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 297  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  0001a	74 0b		 je	 SHORT $LN2@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 454  :         return _Left == _Right;

  0001c	3a 56 ff	 cmp	 dl, BYTE PTR [esi-1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 297  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  0001f	74 06		 je	 SHORT $LN2@pbackfail
  00021	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  00025	75 25		 jne	 SHORT $LN3@pbackfail
$LN2@pbackfail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 202  :         *_IGcount -= _Off;

  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 203  :         *_IGnext += _Off;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	ff 08		 dec	 DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  00031	83 fa ff	 cmp	 edx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 304  :         if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00034	74 07		 je	 SHORT $LN4@pbackfail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00036	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 305  :             *_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003b	88 11		 mov	 BYTE PTR [ecx], dl
$LN4@pbackfail:

; 306  :         }
; 307  : 
; 308  :         return _Traits::not_eof(_Meta);

  0003d	33 c0		 xor	 eax, eax
  0003f	83 fa ff	 cmp	 edx, -1
  00042	5e		 pop	 esi
  00043	0f 44 d0	 cmove	 edx, eax
  00046	8b c2		 mov	 eax, edx

; 309  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN3@pbackfail:

; 298  :                 && (_Mystate & _Constant))) { // can't put back, fail
; 299  :             return _Traits::eof();

  0004c	83 c8 ff	 or	 eax, -1
  0004f	5e		 pop	 esi

; 309  :     }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Oldptr$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 237  :     virtual int_type overflow(int_type _Meta = _Traits::eof()) { // put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 238  :         if (_Mystate & _Constant) {

  0000b	f6 47 3c 02	 test	 BYTE PTR [edi+60], 2
  0000f	0f 85 4c 01 00
	00		 jne	 $LN10@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  00015	83 7d 08 ff	 cmp	 DWORD PTR __Meta$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 242  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00019	75 0b		 jne	 SHORT $LN3@overflow

; 292  :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  00026	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00029	8b 18		 mov	 ebx, DWORD PTR [eax]

; 213  :         return *_IPnext + *_IPcount;

  0002b	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8d 0c 1a	 lea	 ecx, DWORD PTR [edx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 248  :         if (_Pptr && _Pptr < _Epptr) { // room in buffer, store it

  00033	85 db		 test	 ebx, ebx
  00035	74 27		 je	 SHORT $LN53@overflow
  00037	3b d9		 cmp	 ebx, ecx
  00039	73 23		 jae	 SHORT $LN53@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 254  :         --*_IPcount;

  0003b	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  0003e	89 08		 mov	 DWORD PTR [eax], ecx

; 255  :         return (*_IPnext)++;

  00040	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 249  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00043	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 255  :         return (*_IPnext)++;

  00046	8b 32		 mov	 esi, DWORD PTR [edx]
  00048	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0004b	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 250  :             _Seekhigh        = _Pptr + 1;

  0004d	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00050	88 06		 mov	 BYTE PTR [esi], al
  00052	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  00055	5f		 pop	 edi

; 292  :     }

  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN53@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  0005e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00061	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 262  :         if (_Oldsize < _MINSIZE) {

  00063	2b c8		 sub	 ecx, eax
  00065	f7 db		 neg	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  00067	89 45 f8	 mov	 DWORD PTR __Oldptr$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 262  :         if (_Oldsize < _MINSIZE) {

  0006a	1b db		 sbb	 ebx, ebx
  0006c	23 d9		 and	 ebx, ecx
  0006e	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00071	73 0d		 jae	 SHORT $LN6@overflow

; 263  :             _Newsize = _MINSIZE;

  00073	be 20 00 00 00	 mov	 esi, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0007e	eb 3a		 jmp	 SHORT $LN54@overflow
$LN6@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 264  :         } else if (_Oldsize < INT_MAX / 2) { // grow by 50 percent

  00080	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00086	73 1b		 jae	 SHORT $LN8@overflow

; 265  :             _Newsize = _Oldsize << 1;

  00088	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008b	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00091	73 21		 jae	 SHORT $LN52@overflow

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00093	85 f6		 test	 esi, esi
  00095	74 08		 je	 SHORT $LN34@overflow

; 85   :         return ::operator new(_Bytes);

  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0009d	eb 1b		 jmp	 SHORT $LN54@overflow
$LN34@overflow:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0009f	33 c0		 xor	 eax, eax
  000a1	eb 1a		 jmp	 SHORT $LN55@overflow
$LN8@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 266  :         } else if (_Oldsize < INT_MAX) {

  000a3	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  000a9	0f 83 b2 00 00
	00		 jae	 $LN10@overflow

; 267  :             _Newsize = INT_MAX;

  000af	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
$LN52@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN54@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ba	83 c4 04	 add	 esp, 4
$LN55@overflow:
  000bd	53		 push	 ebx
  000be	ff 75 f8	 push	 DWORD PTR __Oldptr$1$[ebp]
  000c1	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 275  :         const auto _New_pnext = _Newptr + _Oldsize;

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 275  :         const auto _New_pnext = _Newptr + _Oldsize;

  000d0	8d 14 0b	 lea	 edx, DWORD PTR [ebx+ecx]

; 276  :         _Seekhigh             = _New_pnext + 1; // to include _Meta

  000d3	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000d6	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 248  :         *_IPfirst = _First;

  000d9	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000dc	89 08		 mov	 DWORD PTR [eax], ecx

; 250  :         *_IPcount = static_cast<int>(_Last - _Next);

  000de	2b ca		 sub	 ecx, edx
  000e0	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000e3	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 279  :         if (_Mystate & _Noread) { // maintain eback() == allocated pointer invariant

  000e5	8b 75 fc	 mov	 esi, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 249  :         *_IPnext  = _Next;

  000e8	89 10		 mov	 DWORD PTR [eax], edx

; 250  :         *_IPcount = static_cast<int>(_Last - _Next);

  000ea	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000ed	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 279  :         if (_Mystate & _Noread) { // maintain eback() == allocated pointer invariant

  000ef	f6 47 3c 04	 test	 BYTE PTR [edi+60], 4
  000f3	74 15		 je	 SHORT $LN12@overflow
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 207  :         *_IGfirst = _First;

  000f5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000f8	89 30		 mov	 DWORD PTR [eax], esi

; 208  :         *_IGnext  = _Next;

  000fa	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000fd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00103	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00106	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 281  :         } else { // if readable, set the get area to initialized region

  00108	eb 1e		 jmp	 SHORT $LN13@overflow
$LN12@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  0010a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 282  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  0010d	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00110	8b 08		 mov	 ecx, DWORD PTR [eax]

; 207  :         *_IGfirst = _First;

  00112	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 186  :         return *_IGnext;

  00115	2b 4d f8	 sub	 ecx, DWORD PTR __Oldptr$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 282  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  00118	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  0011a	2b d1		 sub	 edx, ecx
  0011c	89 30		 mov	 DWORD PTR [eax], esi
  0011e	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00121	89 08		 mov	 DWORD PTR [eax], ecx
  00123	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00126	89 10		 mov	 DWORD PTR [eax], edx
$LN13@overflow:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 285  :         if (_Mystate & _Allocated) {

  00128	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0012b	a8 01		 test	 al, 1
  0012d	74 0f		 je	 SHORT $LN14@overflow

; 286  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);

  0012f	53		 push	 ebx
  00130	ff 75 f8	 push	 DWORD PTR __Oldptr$1$[ebp]
  00133	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00136	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
  0013b	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
$LN14@overflow:

; 287  :         }
; 288  : 
; 289  :         _Mystate |= _Allocated;

  0013e	83 c8 01	 or	 eax, 1
  00141	89 47 3c	 mov	 DWORD PTR [edi+60], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 254  :         --*_IPcount;

  00144	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00147	ff 08		 dec	 DWORD PTR [eax]

; 255  :         return (*_IPnext)++;

  00149	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0014c	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 292  :     }

  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 255  :         return (*_IPnext)++;

  0014f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00151	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00154	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 290  :         *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00156	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00159	88 02		 mov	 BYTE PTR [edx], al

; 292  :     }

  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 04 00	 ret	 4
$LN10@overflow:
  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	83 c8 ff	 or	 eax, -1
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 110  :     virtual ~basic_stringbuf() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 495  :         if (_Mystate & _Allocated) {

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1

; 110  :     virtual ~basic_stringbuf() noexcept {

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 495  :         if (_Mystate & _Allocated) {

  0000d	74 47		 je	 SHORT $LN22@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  0000f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 496  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	85 c9		 test	 ecx, ecx
  00016	74 09		 je	 SHORT $LN6@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	03 d1		 add	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 496  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0001f	eb 0a		 jmp	 SHORT $LN7@basic_stri
$LN6@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 198  :         return *_IGnext + *_IGcount;

  00021	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00024	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	03 11		 add	 edx, DWORD PTR [ecx]
$LN7@basic_stri:

; 182  :         return *_IGfirst;

  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 496  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	2b d0		 sub	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00032	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00038	72 12		 jb	 SHORT $LN32@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003d	83 c2 23	 add	 edx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00040	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00042	83 c0 fc	 add	 eax, -4			; fffffffcH
  00045	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00048	77 7f		 ja	 SHORT $LN29@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004a	8b c1		 mov	 eax, ecx
$LN32@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004c	52		 push	 edx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN22@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 207  :         *_IGfirst = _First;

  00056	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 208  :         *_IGnext  = _Next;

  0005f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00062	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00068	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0006b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 241  :         *_IPfirst = _First;

  00071	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 242  :         *_IPnext  = _First;

  0007a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 243  :         *_IPcount = static_cast<int>(_Last - _First);

  00083	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00086	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 504  :         _Mystate &= ~_Allocated;

  0008c	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00090	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 70   :         delete _Plocale;

  0009d	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  000a0	85 f6		 test	 esi, esi
  000a2	74 23		 je	 SHORT $LN46@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  000a4	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 11		 je	 SHORT $LN51@basic_stri

; 352  :             delete _Ptr->_Decref();

  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	ff 50 08	 call	 DWORD PTR [eax+8]
  000b0	85 c0		 test	 eax, eax
  000b2	74 08		 je	 SHORT $LN51@basic_stri
  000b4	8b 10		 mov	 edx, DWORD PTR [eax]
  000b6	8b c8		 mov	 ecx, eax
  000b8	6a 01		 push	 1
  000ba	ff 12		 call	 DWORD PTR [edx]
$LN51@basic_stri:
  000bc	6a 08		 push	 8
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c4	83 c4 08	 add	 esp, 8
$LN46@basic_stri:
  000c7	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 112  :     }

  000c8	c3		 ret	 0
$LN29@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN53@basic_stri:
  000ce	cc		 int	 3
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 70   :         delete _Plocale;

  00007	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00010	85 ff		 test	 edi, edi
  00012	74 23		 je	 SHORT $LN9@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  00014	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 11		 je	 SHORT $LN14@scalar

; 352  :             delete _Ptr->_Decref();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 50 08	 call	 DWORD PTR [eax+8]
  00020	85 c0		 test	 eax, eax
  00022	74 08		 je	 SHORT $LN14@scalar
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	8b c8		 mov	 ecx, eax
  00028	6a 01		 push	 1
  0002a	ff 12		 call	 DWORD PTR [edx]
$LN14@scalar:
  0002c	6a 08		 push	 8
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN16@scalar
  0003d	6a 38		 push	 56			; 00000038H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 378  :     virtual void __CLR_OR_THIS_CALL imbue(const locale&) {} // set locale to argument (do nothing)

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 375  :         return 0;

  00000	33 c0		 xor	 eax, eax

; 376  :     }

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 370  :         // offer buffer to external agent (do nothing)
; 371  :         return this;

  00000	8b c1		 mov	 eax, ecx

; 372  :     }

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 364  :     virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 367  :     }

  00029	5d		 pop	 ebp
  0002a	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 359  :         off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\iosfwd

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 362  :     }

  00029	5d		 pop	 ebp
  0002a	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -12					; size = 4
__Start_count$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 333  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 334  :         // put _Count characters to stream
; 335  :         const streamsize _Start_count = _Count;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	8b d3		 mov	 edx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	89 55 f4	 mov	 DWORD PTR __Start_count$2$[ebp], edx
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00016	8b c7		 mov	 eax, edi
  00018	89 45 f8	 mov	 DWORD PTR __Start_count$1$[ebp], eax

; 336  :         while (0 < _Count) {

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 8c 91 00 00
	00		 jl	 $LN27@xsputn
  00023	7f 08		 jg	 SHORT $LN31@xsputn
  00025	85 ff		 test	 edi, edi
  00027	0f 84 87 00 00
	00		 je	 $LN27@xsputn
$LN31@xsputn:
  0002d	56		 push	 esi
  0002e	66 90		 npad	 2
$LL2@xsputn:

; 337  :             streamsize _Size = _Pnavail();

  00030	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00035	8b f0		 mov	 esi, eax
  00037	8b c2		 mov	 eax, edx
  00039	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 338  :             if (0 < _Size) { // copy to write buffer

  0003c	85 c0		 test	 eax, eax
  0003e	7c 3e		 jl	 SHORT $LN4@xsputn
  00040	7f 04		 jg	 SHORT $LN25@xsputn
  00042	85 f6		 test	 esi, esi
  00044	74 38		 je	 SHORT $LN4@xsputn
$LN25@xsputn:

; 339  :                 if (_Count < _Size) {

  00046	3b d8		 cmp	 ebx, eax
  00048	7f 0b		 jg	 SHORT $LN6@xsputn
  0004a	7c 04		 jl	 SHORT $LN26@xsputn
  0004c	3b fe		 cmp	 edi, esi
  0004e	73 05		 jae	 SHORT $LN6@xsputn
$LN26@xsputn:

; 340  :                     _Size = _Count;

  00050	8b f7		 mov	 esi, edi
  00052	89 5d 10	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN6@xsputn:

; 194  :         return *_IPnext;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00058	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005b	56		 push	 esi
  0005c	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  0005d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00060	ff 30		 push	 DWORD PTR [eax]
  00062	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 236  :         *_IPcount -= _Off;

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 345  :                 _Count -= _Size;

  0006d	2b fe		 sub	 edi, esi
  0006f	1b 5d 10	 sbb	 ebx, DWORD PTR __Size$2$[ebp]

; 236  :         *_IPcount -= _Off;

  00072	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00075	29 30		 sub	 DWORD PTR [eax], esi

; 237  :         *_IPnext += _Off;

  00077	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0007a	01 30		 add	 DWORD PTR [eax], esi

; 347  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  0007c	eb 22		 jmp	 SHORT $LN8@xsputn
$LN4@xsputn:
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  00081	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 347  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  00086	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 347  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00089	50		 push	 eax
  0008a	ff 52 0c	 call	 DWORD PTR [edx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  0008d	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 347  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00090	74 1b		 je	 SHORT $LN30@xsputn

; 348  :                 break; // single character put failed, quit
; 349  :             } else { // count character successfully put
; 350  :                 ++_Ptr;
; 351  :                 --_Count;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00095	83 c7 ff	 add	 edi, -1
  00098	be 01 00 00 00	 mov	 esi, 1
  0009d	83 d3 ff	 adc	 ebx, -1
$LN8@xsputn:

; 336  :         while (0 < _Count) {

  000a0	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi
  000a3	85 db		 test	 ebx, ebx
  000a5	7f 89		 jg	 SHORT $LL2@xsputn
  000a7	7c 04		 jl	 SHORT $LN30@xsputn
  000a9	85 ff		 test	 edi, edi
  000ab	75 83		 jne	 SHORT $LL2@xsputn
$LN30@xsputn:
  000ad	8b 45 f8	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000b0	8b 55 f4	 mov	 edx, DWORD PTR __Start_count$2$[ebp]
  000b3	5e		 pop	 esi
$LN27@xsputn:

; 352  :             }
; 353  :         }
; 354  : 
; 355  :         return _Start_count - _Count;

  000b4	2b c7		 sub	 eax, edi
  000b6	5f		 pop	 edi
  000b7	1b d3		 sbb	 edx, ebx
  000b9	5b		 pop	 ebx

; 356  :     }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -12					; size = 4
__Start_count$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 304  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) { // get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 305  :         const streamsize _Start_count = _Count;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	8b d3		 mov	 edx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	89 55 f4	 mov	 DWORD PTR __Start_count$2$[ebp], edx
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00016	8b c7		 mov	 eax, edi
  00018	89 45 f8	 mov	 DWORD PTR __Start_count$1$[ebp], eax

; 306  : 
; 307  :         while (0 < _Count) {

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 8c 99 00 00
	00		 jl	 $LN24@xsgetn
  00023	7f 08		 jg	 SHORT $LN28@xsgetn
  00025	85 ff		 test	 edi, edi
  00027	0f 84 8f 00 00
	00		 je	 $LN24@xsgetn
$LN28@xsgetn:
  0002d	56		 push	 esi
  0002e	66 90		 npad	 2
$LL2@xsgetn:

; 308  :             streamsize _Size = _Gnavail();

  00030	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00035	8b f0		 mov	 esi, eax
  00037	8b c2		 mov	 eax, edx
  00039	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 309  :             if (0 < _Size) { // copy from read buffer

  0003c	85 c0		 test	 eax, eax
  0003e	7c 40		 jl	 SHORT $LN4@xsgetn
  00040	7f 04		 jg	 SHORT $LN22@xsgetn
  00042	85 f6		 test	 esi, esi
  00044	74 3a		 je	 SHORT $LN4@xsgetn
$LN22@xsgetn:

; 310  :                 if (_Count < _Size) {

  00046	3b d8		 cmp	 ebx, eax
  00048	7f 0b		 jg	 SHORT $LN6@xsgetn
  0004a	7c 04		 jl	 SHORT $LN23@xsgetn
  0004c	3b fe		 cmp	 edi, esi
  0004e	73 05		 jae	 SHORT $LN6@xsgetn
$LN23@xsgetn:

; 311  :                     _Size = _Count;

  00050	8b f7		 mov	 esi, edi
  00052	89 5d 10	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN6@xsgetn:

; 186  :         return *_IGnext;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00058	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  00059	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0005c	ff 30		 push	 DWORD PTR [eax]
  0005e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00061	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 202  :         *_IGcount -= _Off;

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 316  :                 _Count -= _Size;

  0006c	2b fe		 sub	 edi, esi
  0006e	1b 5d 10	 sbb	 ebx, DWORD PTR __Size$2$[ebp]

; 202  :         *_IGcount -= _Off;

  00071	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00074	29 30		 sub	 DWORD PTR [eax], esi

; 203  :         *_IGnext += _Off;

  00076	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00079	01 30		 add	 DWORD PTR [eax], esi

; 317  :                 gbump(static_cast<int>(_Size));
; 318  :             } else {

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0007e	eb 22		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 319  :                 const int_type _Meta = uflow();

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	ff 50 1c	 call	 DWORD PTR [eax+28]
  00088	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  0008a	83 f9 ff	 cmp	 ecx, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 320  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0008d	74 26		 je	 SHORT $LN27@xsgetn

; 321  :                     break; // end of file, quit
; 322  :                 }
; 323  : 
; 324  :                 // get a single character
; 325  :                 *_Ptr++ = _Traits::to_char_type(_Meta);

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 326  :                 --_Count;

  00092	83 c7 ff	 add	 edi, -1
  00095	be 01 00 00 00	 mov	 esi, 1
  0009a	83 d3 ff	 adc	 ebx, -1
  0009d	88 08		 mov	 BYTE PTR [eax], cl
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN5@xsgetn:

; 306  : 
; 307  :         while (0 < _Count) {

  000a2	03 c6		 add	 eax, esi
  000a4	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  000a7	85 db		 test	 ebx, ebx
  000a9	7f 85		 jg	 SHORT $LL2@xsgetn
  000ab	7c 08		 jl	 SHORT $LN27@xsgetn
  000ad	85 ff		 test	 edi, edi
  000af	0f 85 7b ff ff
	ff		 jne	 $LL2@xsgetn
$LN27@xsgetn:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000b8	8b 55 f4	 mov	 edx, DWORD PTR __Start_count$2$[ebp]
  000bb	5e		 pop	 esi
$LN24@xsgetn:

; 327  :             }
; 328  :         }
; 329  : 
; 330  :         return _Start_count - _Count;

  000bc	2b c7		 sub	 eax, edi
  000be	5f		 pop	 edi
  000bf	1b d3		 sbb	 edx, ebx
  000c1	5b		 pop	 ebx

; 331  :     }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 300  :     virtual int_type __CLR_OR_THIS_CALL uflow() { // get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 470  :         return _Left == _Right;

  00008	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 301  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 302  :     }

  00010	c3		 ret	 0
$LN3@uflow:

; 222  :         --*_IGcount;

  00011	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00014	ff 08		 dec	 DWORD PTR [eax]

; 223  :         return (*_IGnext)++;

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	5e		 pop	 esi
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 466  :         return static_cast<unsigned char>(_Ch);

  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 302  :     }

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 297  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 298  :     }

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 293  :         return 0;

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 294  :     }

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 288  :         // put a character back to stream (always fail)
; 289  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 290  :     }

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 284  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 285  :     }

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 259  :         return *_IPnext ? *_IPcount : 0;

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 260  :     }

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 259  :         return *_IPnext ? *_IPcount : 0;

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 260  :     }

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 232  :         return *_IGnext ? *_IGcount : 0;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 233  :     }

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 232  :         return *_IGnext ? *_IGcount : 0;

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 233  :     }

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  :     virtual void __CLR_OR_THIS_CALL _Unlock() {} // clear the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 176  :     virtual void __CLR_OR_THIS_CALL _Lock() {} // set the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00000	56		 push	 esi

; 70   :         delete _Plocale;

  00001	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000a	85 f6		 test	 esi, esi
  0000c	74 23		 je	 SHORT $LN6@basic_stre
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  0000e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00011	85 c9		 test	 ecx, ecx
  00013	74 11		 je	 SHORT $LN11@basic_stre

; 352  :             delete _Ptr->_Decref();

  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	ff 50 08	 call	 DWORD PTR [eax+8]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN11@basic_stre
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	6a 01		 push	 1
  00024	ff 12		 call	 DWORD PTR [edx]
$LN11@basic_stre:
  00026	6a 08		 push	 8
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
$LN6@basic_stre:
  00031	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 71   :     }

  00032	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 735  :     virtual ~basic_ostringstream() noexcept {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00006	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  0001d	89 44 32 ac	 mov	 DWORD PTR [edx+esi-84], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 63   :     virtual __CLR_OR_THIS_CALL ~basic_ostream() noexcept {}

  00026	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003d	89 44 31 ac	 mov	 DWORD PTR [ecx+esi-84], eax
  00041	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 735  :     virtual ~basic_ostringstream() noexcept {}

  00042	c3		 ret	 0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 63   :     virtual __CLR_OR_THIS_CALL ~basic_ostream() noexcept {}

  00023	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00026	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00039	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0003c	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00040	51		 push	 ecx
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  0004e	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00053	83 c4 04	 add	 esp, 4
  00056	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005a	74 0b		 je	 SHORT $LN14@scalar
  0005c	6a 50		 push	 80			; 00000050H
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
$LN14@scalar:
  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 155  :     void __CLR_OR_THIS_CALL _Osfx() { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 156  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 157  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  0003e	75 38		 jne	 SHORT $LN19@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN19@Osfx

; 158  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 123  :         return sync();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 158  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN19@Osfx

; 159  :                 _Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 244  :         _State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 245  :         _Mystate             = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0006e	75 1a		 jne	 SHORT $LN32@Osfx
  00070	eb 06		 jmp	 SHORT $LN19@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 163  :         _CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN19@Osfx
  00077	c3		 ret	 0
$LN19@Osfx:

; 164  :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN32@Osfx:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN21@Osfx

; 254  :                 _Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN23@Osfx
$LN21@Osfx:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN23@Osfx:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@Osfx:
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   :     virtual __CLR_OR_THIS_CALL ~basic_ostream() noexcept {}

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax
  0001b	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -48						; size = 20
$T3 = -28						; size = 8
$T4 = -28						; size = 8
_this$ = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
$T6 = 19						; size = 1
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002d	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00038	74 37		 je	 SHORT $LN2@basic_ostr
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 457  :     size_t _Stdstr{0}; // if > 0 index of standard stream to suppress destruction

  00040	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 473  :     }
; 474  : 
; 475  : private:
; 476  :     // STRUCT _Iosarray
; 477  :     struct _Iosarray : _Crt_new_delete { // list element for open-ended sparse array of longs/pointers
; 478  :     public:
; 479  :         __CLR_OR_THIS_CALL _Iosarray(int _Idx, _Iosarray* _Link)
; 480  :             : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr) {} // construct node for index _Idx and link it in
; 481  : 
; 482  :         _Iosarray* _Next; // pointer to next node
; 483  :         int _Index; // index of this node
; 484  :         long _Lo; // stored long value
; 485  :         void* _Vp; // stored pointer value
; 486  :     };
; 487  : 
; 488  :     // STRUCT _Fnarray
; 489  :     struct _Fnarray : _Crt_new_delete { // list element for open-ended sparse array of event handlers
; 490  :         __CLR_OR_THIS_CALL _Fnarray(int _Idx, event_callback _Pnew, _Fnarray* _Link)
; 491  :             : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) {} // construct node for index _Idx and link it in
; 492  : 
; 493  :         _Fnarray* _Next; // pointer to next node
; 494  :         int _Index; // index of this node
; 495  :         event_callback _Pfn; // pointer to event handler
; 496  :     };
; 497  : 
; 498  :     void __CLR_OR_THIS_CALL _Callfns(event _Ev) { // call all event handlers, reporting event
; 499  :         for (_Fnarray* _Pfa = _Calls; _Pfa; _Pfa = _Pfa->_Next) {
; 500  :             (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
; 501  :         }
; 502  :     }
; 503  : 
; 504  :     _Iosarray& __CLR_OR_THIS_CALL _Findarr(int _Idx) { // locate or make a variable array element
; 505  :         _Iosarray* _Ptr1;
; 506  :         _Iosarray* _Ptr2;
; 507  : 
; 508  :         for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1; _Ptr1 = _Ptr1->_Next) {
; 509  :             if (_Ptr1->_Index == _Idx) {
; 510  :                 return *_Ptr1; // found element, return it
; 511  :             } else if (!_Ptr2 && _Ptr1->_Lo == 0 && !_Ptr1->_Vp) {
; 512  :                 _Ptr2 = _Ptr1; // found recycling candidate
; 513  :             }
; 514  :         }
; 515  : 
; 516  :         if (_Ptr2) { // recycle existing element
; 517  :             _Ptr2->_Index = _Idx;
; 518  :             return *_Ptr2;
; 519  :         }
; 520  : 
; 521  :         _Arr = new _Iosarray(_Idx, _Arr); // make a new element
; 522  :         return *_Arr;
; 523  :     }
; 524  : 
; 525  :     void __CLR_OR_THIS_CALL _Tidy() noexcept { // discard storage for an ios_base
; 526  :         _Callfns(erase_event);
; 527  :         _Iosarray* _Ptr1;
; 528  :         _Iosarray* _Ptr2;
; 529  : 
; 530  :         for (_Ptr1 = _Arr; _Ptr1; _Ptr1 = _Ptr2) { // delete array element
; 531  :             _Ptr2 = _Ptr1->_Next;
; 532  :             delete _Ptr1;
; 533  :         }
; 534  :         _Arr = nullptr;
; 535  : 
; 536  :         _Fnarray* _Pfa1;
; 537  :         _Fnarray* _Pfa2;
; 538  :         for (_Pfa1 = _Calls; _Pfa1; _Pfa1 = _Pfa2) { // delete callback element
; 539  :             _Pfa2 = _Pfa1->_Next;
; 540  :             delete _Pfa1;
; 541  :         }
; 542  :         _Calls = nullptr;
; 543  :     }
; 544  : 
; 545  :     iostate _Mystate; // stream state
; 546  :     iostate _Except; // exception mask
; 547  :     fmtflags _Fmtfl; // format flags
; 548  :     streamsize _Prec; // field precision
; 549  :     streamsize _Wide; // field width
; 550  :     _Iosarray* _Arr{nullptr}; // pointer to first node of long/pointer array

  00047	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 551  :     _Fnarray* _Calls{nullptr}; // pointer to first node of call list

  0004e	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 552  :     locale* _Ploc{nullptr}; // pointer to locale

  00055	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 161  :     __CLR_OR_THIS_CALL basic_ios() {}

  0005c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 32   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
$LN2@basic_ostr:
  00071	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 472  :         _Ploc = new locale;

  00073	6a 08		 push	 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 32   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  00075	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00078	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0007f	8b 07		 mov	 eax, DWORD PTR [edi]
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00087	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 33   :         _Myios::init(_Strbuf, _Isstd);

  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00090	03 f7		 add	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 463  :         _Ploc   = nullptr;

  00092	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 464  :         _Stdstr = 0;

  00099	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 465  :         _Except = goodbit;

  000a0	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 466  :         _Fmtfl  = skipws | dec;

  000a7	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H

; 467  :         _Prec   = 6;

  000ae	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  000b5	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 468  :         _Wide   = 0;

  000bc	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  000c3	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 469  :         _Arr    = nullptr;

  000ca	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 470  :         _Calls  = nullptr;

  000d1	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 245  :         _Mystate             = _State;

  000d8	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 472  :         _Ploc = new locale;

  000df	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e4	8b d8		 mov	 ebx, eax
  000e6	83 c4 04	 add	 esp, 4
  000e9	85 db		 test	 ebx, ebx
  000eb	74 16		 je	 SHORT $LN16@basic_ostr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 271  :     locale() noexcept : _Ptr(_Init(true)) {}

  000ed	6a 01		 push	 1
  000ef	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000f6	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000fb	83 c4 04	 add	 esp, 4
  000fe	89 43 04	 mov	 DWORD PTR [ebx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 472  :         _Ploc = new locale;

  00101	eb 02		 jmp	 SHORT $LN17@basic_ostr
$LN16@basic_ostr:
  00103	33 db		 xor	 ebx, ebx
$LN17@basic_ostr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 148  :         _Mystrbuf = _Strbuf;

  00105	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 472  :         _Ploc = new locale;

  00108	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 148  :         _Mystrbuf = _Strbuf;

  0010b	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 149  :         _Tiestr   = nullptr;

  0010e	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00115	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 268  :         _Ptr->_Incref();

  00118	8b cb		 mov	 ecx, ebx
  0011a	89 5d e8	 mov	 DWORD PTR $T4[ebp+4], ebx
  0011d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011f	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00122	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00125	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00132	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2689 :         return do_widen(_Byte);

  00135	8b c8		 mov	 ecx, eax
  00137	8b 10		 mov	 edx, DWORD PTR [eax]
  00139	6a 20		 push	 32			; 00000020H
  0013b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0013e	ff d0		 call	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00140	88 45 13	 mov	 BYTE PTR $T6[ebp], al
  00143	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00147	85 db		 test	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 351  :         if (_Ptr) {

  00149	74 16		 je	 SHORT $LN46@basic_ostr

; 352  :             delete _Ptr->_Decref();

  0014b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0014d	8b cb		 mov	 ecx, ebx
  0014f	ff 52 08	 call	 DWORD PTR [edx+8]
  00152	85 c0		 test	 eax, eax
  00154	74 08		 je	 SHORT $LN64@basic_ostr
  00156	8b 10		 mov	 edx, DWORD PTR [eax]
  00158	8b c8		 mov	 ecx, eax
  0015a	6a 01		 push	 1
  0015c	ff 12		 call	 DWORD PTR [edx]
$LN64@basic_ostr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 150  :         _Fillch   = widen(' ');

  0015e	8a 45 13	 mov	 al, BYTE PTR $T6[ebp]
$LN46@basic_ostr:

; 151  : 
; 152  :         if (!_Mystrbuf) {

  00161	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00165	88 46 40	 mov	 BYTE PTR [esi+64], al
  00168	75 13		 jne	 SHORT $LN53@basic_ostr
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 244  :         _State &= _Statmask;

  0016a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 246  :         const auto _Filtered = _State & _Except;

  0016d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00170	83 e0 13	 and	 eax, 19			; 00000013H
  00173	83 c8 04	 or	 eax, 4
  00176	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00179	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  0017b	75 25		 jne	 SHORT $LN68@basic_ostr
$LN53@basic_ostr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 156  :         if (_Isstd) {

  0017d	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  00181	74 09		 je	 SHORT $LN12@basic_ostr

; 157  :             _Addstd(this); // special handling for standard streams

  00183	56		 push	 esi
  00184	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00189	83 c4 04	 add	 esp, 4
$LN12@basic_ostr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ostream

; 34   :     }

  0018c	8b c7		 mov	 eax, edi
  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 0c 00	 ret	 12			; 0000000cH
$LN68@basic_ostr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 253  :             if (_Filtered & ios_base::badbit) {

  001a2	f6 c1 04	 test	 cl, 4
  001a5	74 07		 je	 SHORT $LN55@basic_ostr

; 254  :                 _Msg = "ios_base::badbit set";

  001a7	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  001ac	eb 10		 jmp	 SHORT $LN57@basic_ostr
$LN55@basic_ostr:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  001ae	f6 c1 02	 test	 cl, 2
  001b1	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  001b6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  001bb	0f 44 f0	 cmove	 esi, eax
$LN57@basic_ostr:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  001be	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  001c1	6a 01		 push	 1
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  001c9	83 c4 08	 add	 esp, 8
  001cc	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  001cf	50		 push	 eax
  001d0	56		 push	 esi
  001d1	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  001d6	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001db	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN66@basic_ostr:
  001e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$2:
  0001c	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 452  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN10@scalar
  00041	6a 48		 push	 72			; 00000048H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 52   :         iostate _State, bool _Reraise = false) { // merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00003	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	b8 04 00 00 00	 mov	 eax, 4
  0000d	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00010	0f 45 c2	 cmovne	 eax, edx
  00013	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00016	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 53   :         clear(rdstate() | _State, _Reraise);
; 54   :     }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 38   :     virtual __CLR_OR_THIS_CALL ~basic_ios() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 452  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00030	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00035	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 38   :     virtual __CLR_OR_THIS_CALL ~basic_ios() noexcept {}

  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp
;	COMDAT ?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_timefmt$ = -492					; size = 152
_exceptionInfo$ = -340					; size = 12
_t$ = -328						; size = 8
_pMiniDumpWriteDump$1$ = -320				; size = 4
_e$GSCopy$1$ = -316					; size = 4
$T2 = -312						; size = 1
$T3 = -312						; size = 1
$T4 = -312						; size = 1
$T5 = -312						; size = 1
__Ptr_shifted_after$1$ = -308				; size = 4
$T6 = -308						; size = 1
$T7 = -308						; size = 4
$T8 = -304						; size = 24
$T9 = -280						; size = 24
$T10 = -256						; size = 24
$T11 = -232						; size = 24
$T12 = -208						; size = 24
$T13 = -184						; size = 24
$T14 = -160						; size = 24
$T15 = -136						; size = 24
$T16 = -112						; size = 24
_folder$ = -88						; size = 24
_filename$ = -64					; size = 24
$T17 = -40						; size = 24
__View$18 = -28						; size = 12
$T19 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_e$ = 8							; size = 4
?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z PROC	; make_minidump, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _e$[ebp]

; 17   : 	auto hDbgHelp = LoadLibraryA("dbghelp");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_07MOMJMPG@dbghelp@
  00035	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _e$GSCopy$1$[ebp], eax
  0003b	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp], 0
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4

; 18   : 	if (hDbgHelp == nullptr)

  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 35 07 00
	00		 je	 $LN746@make_minid

; 19   : 		return;
; 20   : 	auto pMiniDumpWriteDump = (decltype(&MiniDumpWriteDump))GetProcAddress(hDbgHelp, "MiniDumpWriteDump");

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0005f	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _pMiniDumpWriteDump$1$[ebp], eax

; 21   : 	if (pMiniDumpWriteDump == nullptr)

  00065	85 c0		 test	 eax, eax
  00067	0f 84 1b 07 00
	00		 je	 $LN746@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0006d	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _folder$[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00074	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _folder$[ebp+16], 4

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0007b	c7 45 a8 6c 6f
	67 73		 mov	 DWORD PTR _folder$[ebp], 1936158572 ; 73676f6cH

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00082	c6 45 ac 00	 mov	 BYTE PTR _folder$[ebp+4], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 25   : 	CreateDirectoryA(folder.c_str(), nullptr);

  00086	6a 00		 push	 0
  00088	8d 45 a8	 lea	 eax, DWORD PTR _folder$[ebp]
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	50		 push	 eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h

; 522  :             return _time64(_Time);

  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 __time64
  000a0	83 c4 04	 add	 esp, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 27   : 	auto t = std::time(nullptr);

  000a3	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _t$[ebp], eax
  000a9	89 95 bc fe ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 680  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  000af	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp], OFFSET ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 457  :     size_t _Stdstr{0}; // if > 0 index of standard stream to suppress destruction

  000b9	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+88], 0

; 458  : 
; 459  : protected:
; 460  :     __CLR_OR_THIS_CALL ios_base() {}
; 461  : 
; 462  :     void __CLR_OR_THIS_CALL _Init() { // initialize a new ios_base
; 463  :         _Ploc   = nullptr;
; 464  :         _Stdstr = 0;
; 465  :         _Except = goodbit;
; 466  :         _Fmtfl  = skipws | dec;
; 467  :         _Prec   = 6;
; 468  :         _Wide   = 0;
; 469  :         _Arr    = nullptr;
; 470  :         _Calls  = nullptr;
; 471  :         clear(goodbit);
; 472  :         _Ploc = new locale;
; 473  :     }
; 474  : 
; 475  : private:
; 476  :     // STRUCT _Iosarray
; 477  :     struct _Iosarray : _Crt_new_delete { // list element for open-ended sparse array of longs/pointers
; 478  :     public:
; 479  :         __CLR_OR_THIS_CALL _Iosarray(int _Idx, _Iosarray* _Link)
; 480  :             : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr) {} // construct node for index _Idx and link it in
; 481  : 
; 482  :         _Iosarray* _Next; // pointer to next node
; 483  :         int _Index; // index of this node
; 484  :         long _Lo; // stored long value
; 485  :         void* _Vp; // stored pointer value
; 486  :     };
; 487  : 
; 488  :     // STRUCT _Fnarray
; 489  :     struct _Fnarray : _Crt_new_delete { // list element for open-ended sparse array of event handlers
; 490  :         __CLR_OR_THIS_CALL _Fnarray(int _Idx, event_callback _Pnew, _Fnarray* _Link)
; 491  :             : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) {} // construct node for index _Idx and link it in
; 492  : 
; 493  :         _Fnarray* _Next; // pointer to next node
; 494  :         int _Index; // index of this node
; 495  :         event_callback _Pfn; // pointer to event handler
; 496  :     };
; 497  : 
; 498  :     void __CLR_OR_THIS_CALL _Callfns(event _Ev) { // call all event handlers, reporting event
; 499  :         for (_Fnarray* _Pfa = _Calls; _Pfa; _Pfa = _Pfa->_Next) {
; 500  :             (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
; 501  :         }
; 502  :     }
; 503  : 
; 504  :     _Iosarray& __CLR_OR_THIS_CALL _Findarr(int _Idx) { // locate or make a variable array element
; 505  :         _Iosarray* _Ptr1;
; 506  :         _Iosarray* _Ptr2;
; 507  : 
; 508  :         for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1; _Ptr1 = _Ptr1->_Next) {
; 509  :             if (_Ptr1->_Index == _Idx) {
; 510  :                 return *_Ptr1; // found element, return it
; 511  :             } else if (!_Ptr2 && _Ptr1->_Lo == 0 && !_Ptr1->_Vp) {
; 512  :                 _Ptr2 = _Ptr1; // found recycling candidate
; 513  :             }
; 514  :         }
; 515  : 
; 516  :         if (_Ptr2) { // recycle existing element
; 517  :             _Ptr2->_Index = _Idx;
; 518  :             return *_Ptr2;
; 519  :         }
; 520  : 
; 521  :         _Arr = new _Iosarray(_Idx, _Arr); // make a new element
; 522  :         return *_Arr;
; 523  :     }
; 524  : 
; 525  :     void __CLR_OR_THIS_CALL _Tidy() noexcept { // discard storage for an ios_base
; 526  :         _Callfns(erase_event);
; 527  :         _Iosarray* _Ptr1;
; 528  :         _Iosarray* _Ptr2;
; 529  : 
; 530  :         for (_Ptr1 = _Arr; _Ptr1; _Ptr1 = _Ptr2) { // delete array element
; 531  :             _Ptr2 = _Ptr1->_Next;
; 532  :             delete _Ptr1;
; 533  :         }
; 534  :         _Arr = nullptr;
; 535  : 
; 536  :         _Fnarray* _Pfa1;
; 537  :         _Fnarray* _Pfa2;
; 538  :         for (_Pfa1 = _Calls; _Pfa1; _Pfa1 = _Pfa2) { // delete callback element
; 539  :             _Pfa2 = _Pfa1->_Next;
; 540  :             delete _Pfa1;
; 541  :         }
; 542  :         _Calls = nullptr;
; 543  :     }
; 544  : 
; 545  :     iostate _Mystate; // stream state
; 546  :     iostate _Except; // exception mask
; 547  :     fmtflags _Fmtfl; // format flags
; 548  :     streamsize _Prec; // field precision
; 549  :     streamsize _Wide; // field width
; 550  :     _Iosarray* _Arr{nullptr}; // pointer to first node of long/pointer array

  000c3	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+120], 0

; 551  :     _Fnarray* _Calls{nullptr}; // pointer to first node of call list

  000cd	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+124], 0

; 552  :     locale* _Ploc{nullptr}; // pointer to locale

  000d7	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+128], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\ios

; 161  :     __CLR_OR_THIS_CALL basic_ios() {}

  000e1	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+80], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 680  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	8d 85 18 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+4]
  000f5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f9	50		 push	 eax
  000fa	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
  00100	c7 85 cc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T7[ebp], 1
  0010a	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  0010f	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00115	6a 08		 push	 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 680  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  00117	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0011e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00121	c7 84 05 14 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _timefmt$[ebp+eax], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0012c	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp]
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  00138	89 84 0d 10 fe
	ff ff		 mov	 DWORD PTR _timefmt$[ebp+ecx-4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  0013f	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+4], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00149	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0014e	8b f0		 mov	 esi, eax
  00150	83 c4 04	 add	 esp, 4
  00153	85 f6		 test	 esi, esi
  00155	74 13		 je	 SHORT $LN118@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 271  :     locale() noexcept : _Ptr(_Init(true)) {}

  00157	6a 01		 push	 1
  00159	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0015d	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00162	83 c4 04	 add	 esp, 4
  00165	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00168	eb 02		 jmp	 SHORT $LN119@make_minid
$LN118@make_minid:
  0016a	33 f6		 xor	 esi, esi
$LN119@make_minid:

; 263  :         _IGfirst = &_Gfirst;

  0016c	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+8]

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00172	89 b5 4c fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+56], esi

; 263  :         _IGfirst = &_Gfirst;

  00178	89 85 24 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+16], eax

; 264  :         _IPfirst = &_Pfirst;

  0017e	8d 85 20 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+12]
  00184	89 85 28 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+20], eax

; 265  :         _IGnext  = &_Gnext;

  0018a	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+24]
  00190	89 85 34 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+32], eax

; 266  :         _IPnext  = &_Pnext;

  00196	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+28]
  0019c	89 85 38 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+36], eax

; 267  :         _IGcount = &_Gcount;

  001a2	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+40]
  001a8	89 85 44 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+48], eax

; 268  :         _IPcount = &_Pcount;

  001ae	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+44]
  001b4	89 85 48 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+52], eax

; 241  :         *_IPfirst = _First;

  001ba	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+12], 0

; 242  :         *_IPnext  = _First;

  001c4	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+28], 0

; 243  :         *_IPcount = static_cast<int>(_Last - _First);

  001ce	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+44], 0

; 207  :         *_IGfirst = _First;

  001d8	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+8], 0

; 208  :         *_IGnext  = _Next;

  001e2	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+24], 0

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  001ec	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 38   :     explicit basic_stringbuf(ios_base::openmode _Mode) : _Seekhigh(nullptr), _Mystate(_Getstate(_Mode)), _Al() {}

  001f6	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+4], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00200	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+60], 0
  0020a	c7 85 54 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+64], 4
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h

; 499  :             return _localtime64(_Time);

  00214	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _t$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 28   : 	std::ostringstream timefmt;

  0021a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\time.h

; 499  :             return _localtime64(_Time);

  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 __localtime64
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 29   : 	timefmt << std::put_time(std::localtime(&t), "%Y%m%d_%H%M%S");

  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@
  00229	50		 push	 eax
  0022a	8d 45 e4	 lea	 eax, DWORD PTR $T19[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ; std::put_time<char>
  00233	50		 push	 eax
  00234	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@D@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ; std::operator<<<char,std::char_traits<char>,char>
  00240	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 134  :         _Buffer_view _Result{};

  00243	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _timefmt$[ebp+64]
  00249	0f 57 c0	 xorps	 xmm0, xmm0
  0024c	8b c2		 mov	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0024e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp], 0
  00258	24 22		 and	 al, 34			; 00000022H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 747  :         return _Stringbuffer.str();

  0025a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  0025e	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00268	c7 85 74 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00272	c6 85 60 ff ff
	ff 00		 mov	 BYTE PTR $T14[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 162  :         return _Result;

  00279	c7 85 cc fe ff
	ff 05 00 00 00	 mov	 DWORD PTR $T7[ebp], 5

; 134  :         _Buffer_view _Result{};

  00283	66 0f d6 45 e4	 movq	 QWORD PTR __View$18[ebp], xmm0
  00288	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __View$18[ebp+8], 0

; 135  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  0028f	3c 02		 cmp	 al, 2
  00291	74 25		 je	 SHORT $LN160@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 194  :         return *_IPnext;

  00293	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp+36]
  00299	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 135  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  0029b	85 c9		 test	 ecx, ecx
  0029d	74 19		 je	 SHORT $LN160@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 190  :         return *_IPfirst;

  0029f	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 139  :             _Result._Size    = static_cast<_Mysize_type>((_STD max)(_Mysb::pptr(), _Seekhigh) - _Base);

  002a5	3b 8d 50 fe ff
	ff		 cmp	 ecx, DWORD PTR _timefmt$[ebp+60]
  002ab	0f 42 8d 50 fe
	ff ff		 cmovb	 ecx, DWORD PTR _timefmt$[ebp+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 190  :         return *_IPfirst;

  002b2	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 139  :             _Result._Size    = static_cast<_Mysize_type>((_STD max)(_Mysb::pptr(), _Seekhigh) - _Base);

  002b4	2b ca		 sub	 ecx, edx

; 140  :             _Result._Res     = static_cast<_Mysize_type>(_Mysb::epptr() - _Base);

  002b6	eb 2b		 jmp	 SHORT $LN163@make_minid
$LN160@make_minid:

; 141  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  002b8	f6 c2 04	 test	 dl, 4
  002bb	75 20		 jne	 SHORT $LN761@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 186  :         return *_IGnext;

  002bd	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp+32]
  002c3	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 141  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  002c5	85 c9		 test	 ecx, ecx
  002c7	74 14		 je	 SHORT $LN761@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 182  :         return *_IGfirst;

  002c9	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp+16]
  002cf	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 145  :             _Result._Size    = static_cast<_Mysize_type>(_Mysb::egptr() - _Base);

  002d1	2b ca		 sub	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\streambuf

; 198  :         return *_IGnext + *_IGcount;

  002d3	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp+48]
  002d9	03 08		 add	 ecx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\sstream

; 141  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  002db	eb 06		 jmp	 SHORT $LN163@make_minid
$LN761@make_minid:
  002dd	8b 4d e8	 mov	 ecx, DWORD PTR __View$18[ebp+4]
  002e0	8b 55 e4	 mov	 edx, DWORD PTR __View$18[ebp]
$LN163@make_minid:

; 159  :         if (_View._Ptr) {

  002e3	85 d2		 test	 edx, edx
  002e5	74 0d		 je	 SHORT $LN142@make_minid

; 160  :             _Result.assign(_View._Ptr, _View._Size);

  002e7	51		 push	 ecx
  002e8	52		 push	 edx
  002e9	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  002ef	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN142@make_minid:

; 747  :         return _Stringbuffer.str();

  002f4	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  002fb	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00305	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  0030c	c7 45 88 01 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 1

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00313	66 c7 85 78 ff
	ff ff 5f 00	 mov	 WORD PTR $T15[ebp], 95	; 0000005fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string

; 514  :     return _Integral_to_string<char>(_Val);

  0031c	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00322	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string

; 514  :     return _Integral_to_string<char>(_Val);

  00326	68 27 a0 00 00	 push	 40999			; 0000a027H
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 ??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ; std::_Integral_to_string<char,int>
  00331	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00334	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@BMPKPIOH@metin2client_@+8
  00339	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@BMPKPIOH@metin2client_@
  00341	89 45 98	 mov	 DWORD PTR $T16[ebp+8], eax
  00344	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@BMPKPIOH@metin2client_@+12

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00349	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00350	c7 45 a0 0d 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 13 ; 0000000dH

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00357	66 0f d6 45 90	 movq	 QWORD PTR $T16[ebp], xmm0
  0035c	88 45 9c	 mov	 BYTE PTR $T16[ebp+12], al

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0035f	c6 45 9d 00	 mov	 BYTE PTR $T16[ebp+13], 0

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00363	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0036a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00371	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 1

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00378	66 c7 45 d8 5c
	00		 mov	 WORD PTR $T17[ebp], 92	; 0000005cH

; 2306 :         if (_Large_string_engaged()) {

  0037e	83 7d bc 10	 cmp	 DWORD PTR _folder$[ebp+20], 16 ; 00000010H
  00382	8d 75 a8	 lea	 esi, DWORD PTR _folder$[ebp]

; 3307 :         return insert(_Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00385	8b 7d b8	 mov	 edi, DWORD PTR _folder$[ebp+16]

; 3349 :         if (_Check_overlap) {

  00388	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]

; 2306 :         if (_Large_string_engaged()) {

  0038b	0f 43 75 a8	 cmovae	 esi, DWORD PTR _folder$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0038f	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3307 :         return insert(_Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00393	83 ff 0e	 cmp	 edi, 14			; 0000000eH

; 3349 :         if (_Check_overlap) {

  00396	77 71		 ja	 SHORT $LN413@make_minid

; 3350 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00398	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0039b	89 45 e8	 mov	 DWORD PTR $T17[ebp+16], eax
  0039e	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 3351 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3352 :             _Elem* const _Insert_at = _Old_ptr + _Off;
; 3353 :             // the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 3354 :             // while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 3355 :             size_type _Ptr_shifted_after;
; 3356 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  003a1	3b c1		 cmp	 eax, ecx
  003a3	76 24		 jbe	 SHORT $LN416@make_minid
  003a5	8d 45 d9	 lea	 eax, DWORD PTR $T17[ebp+1]
  003a8	3b f0		 cmp	 esi, eax
  003aa	77 1d		 ja	 SHORT $LN416@make_minid

; 3359 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  003ac	8b c1		 mov	 eax, ecx
  003ae	3b c6		 cmp	 eax, esi
  003b0	77 0a		 ja	 SHORT $LN417@make_minid

; 3360 :                 _Ptr_shifted_after = 0;

  003b2	33 c9		 xor	 ecx, ecx
  003b4	89 8d cc fe ff
	ff		 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], ecx

; 3361 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  003ba	eb 15		 jmp	 SHORT $LN418@make_minid
$LN417@make_minid:

; 3362 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  003bc	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  003bf	2b ce		 sub	 ecx, esi
  003c1	89 8d cc fe ff
	ff		 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], ecx
  003c7	eb 08		 jmp	 SHORT $LN418@make_minid
$LN416@make_minid:

; 3357 :                 // inserted content is before the shifted region, or does not alias
; 3358 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  003c9	8b cf		 mov	 ecx, edi
  003cb	89 bd cc fe ff
	ff		 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], edi
$LN418@make_minid:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  003d1	66 8b 45 d8	 mov	 ax, WORD PTR $T17[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003d5	51		 push	 ecx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  003d6	66 89 44 3d d8	 mov	 WORD PTR $T17[ebp+edi], ax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003db	8d 45 d8	 lea	 eax, DWORD PTR $T17[ebp]
  003de	56		 push	 esi
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 _memcpy

; 3367 :             _Traits::copy(

  003e5	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR __Ptr_shifted_after$1$[ebp]
  003eb	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  003ee	8b c7		 mov	 eax, edi
  003f0	03 ca		 add	 ecx, edx
  003f2	2b c2		 sub	 eax, edx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003f4	50		 push	 eax

; 3367 :             _Traits::copy(

  003f5	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  003f8	03 c6		 add	 eax, esi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003fa	50		 push	 eax
  003fb	51		 push	 ecx
  003fc	e8 00 00 00 00	 call	 _memcpy
  00401	83 c4 18	 add	 esp, 24			; 00000018H

; 3369 :             return *this;

  00404	8d 45 d8	 lea	 eax, DWORD PTR $T17[ebp]
  00407	eb 17		 jmp	 SHORT $LN412@make_minid
$LN413@make_minid:

; 3370 :         }
; 3371 : 
; 3372 :         return _Reallocate_grow_by(

  00409	57		 push	 edi
  0040a	56		 push	 esi
  0040b	6a 00		 push	 0
  0040d	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
  00414	ff b5 cc fe ff
	ff		 push	 DWORD PTR $T6[ebp]
  0041a	57		 push	 edi
  0041b	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
$LN412@make_minid:

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00420	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00423	0f 11 85 48 ff
	ff ff		 movups	 XMMWORD PTR $T13[ebp], xmm0
  0042a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0042f	66 0f d6 85 58
	ff ff ff	 movq	 QWORD PTR $T13[ebp+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  00437	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0043e	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00445	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00448	8d 45 90	 lea	 eax, DWORD PTR $T16[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0044b	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0044f	50		 push	 eax
  00450	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00456	50		 push	 eax
  00457	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T5[ebp]
  0045d	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00463	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00468	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0046e	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00472	50		 push	 eax
  00473	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00479	50		 push	 eax
  0047a	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T4[ebp]
  00480	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00486	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0048b	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00491	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00495	50		 push	 eax
  00496	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0049c	50		 push	 eax
  0049d	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  004a3	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  004a9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  004ae	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  004b4	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  004b8	50		 push	 eax
  004b9	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  004bf	50		 push	 eax
  004c0	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T2[ebp]
  004c6	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  004cc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004d1	6a 04		 push	 4
  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_04JMFINIFG@?4dmp@
  004d8	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  004de	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004e2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  004e7	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  004ee	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  004f5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004fc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004ff	0f 11 45 c0	 movups	 XMMWORD PTR _filename$[ebp], xmm0
  00503	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00508	66 0f d6 45 d0	 movq	 QWORD PTR _filename$[ebp+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  0050d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00514	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0051b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0051e	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00524	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00529	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0052f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00534	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0053a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0053f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00545	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0054a	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR $T13[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00550	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00554	83 fa 10	 cmp	 edx, 16			; 00000010H
  00557	72 2f		 jb	 SHORT $LN523@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00559	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0055f	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00560	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00562	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00568	72 14		 jb	 SHORT $LN533@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0056a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0056d	83 c2 23	 add	 edx, 35			; 00000023H
  00570	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00572	83 c0 fc	 add	 eax, -4			; fffffffcH
  00575	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00578	0f 87 25 02 00
	00		 ja	 $LN638@make_minid
$LN533@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0057e	52		 push	 edx
  0057f	51		 push	 ecx
  00580	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00585	83 c4 08	 add	 esp, 8
$LN523@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00588	8b 55 ec	 mov	 edx, DWORD PTR $T17[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0058b	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0058f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00592	72 2c		 jb	 SHORT $LN550@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00594	8b 4d d8	 mov	 ecx, DWORD PTR $T17[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00597	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00598	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0059a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  005a0	72 14		 jb	 SHORT $LN560@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005a2	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  005a5	83 c2 23	 add	 edx, 35			; 00000023H
  005a8	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005aa	83 c0 fc	 add	 eax, -4			; fffffffcH
  005ad	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005b0	0f 87 ed 01 00
	00		 ja	 $LN638@make_minid
$LN560@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  005b6	52		 push	 edx
  005b7	51		 push	 ecx
  005b8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005bd	83 c4 08	 add	 esp, 8
$LN550@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  005c0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  005c7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  005ce	c6 45 d8 00	 mov	 BYTE PTR $T17[ebp], 0

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  005d2	8b 55 a4	 mov	 edx, DWORD PTR $T16[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  005d5	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  005d9	83 fa 10	 cmp	 edx, 16			; 00000010H
  005dc	72 2c		 jb	 SHORT $LN577@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005de	8b 4d 90	 mov	 ecx, DWORD PTR $T16[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  005e1	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005e2	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005e4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  005ea	72 14		 jb	 SHORT $LN587@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005ec	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  005ef	83 c2 23	 add	 edx, 35			; 00000023H
  005f2	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005f4	83 c0 fc	 add	 eax, -4			; fffffffcH
  005f7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005fa	0f 87 a3 01 00
	00		 ja	 $LN638@make_minid
$LN587@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00600	52		 push	 edx
  00601	51		 push	 ecx
  00602	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00607	83 c4 08	 add	 esp, 8
$LN577@make_minid:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0060a	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00610	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00615	8b 55 8c	 mov	 edx, DWORD PTR $T15[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00618	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0061c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0061f	72 2f		 jb	 SHORT $LN604@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00621	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T15[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00627	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00628	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0062a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00630	72 14		 jb	 SHORT $LN614@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00632	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00635	83 c2 23	 add	 edx, 35			; 00000023H
  00638	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0063a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0063d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00640	0f 87 5d 01 00
	00		 ja	 $LN638@make_minid
$LN614@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00646	52		 push	 edx
  00647	51		 push	 ecx
  00648	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0064d	83 c4 08	 add	 esp, 8
$LN604@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00650	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR $T14[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00656	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0065a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0065d	72 2f		 jb	 SHORT $LN631@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0065f	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00665	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00666	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00668	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0066e	72 14		 jb	 SHORT $LN641@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00670	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00673	83 c2 23	 add	 edx, 35			; 00000023H
  00676	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00678	83 c0 fc	 add	 eax, -4			; fffffffcH
  0067b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0067e	0f 87 1f 01 00
	00		 ja	 $LN638@make_minid
$LN641@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00684	52		 push	 edx
  00685	51		 push	 ecx
  00686	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0068b	83 c4 08	 add	 esp, 8
$LN631@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0068e	83 7d d4 10	 cmp	 DWORD PTR _filename$[ebp+20], 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00692	8d 45 c0	 lea	 eax, DWORD PTR _filename$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 33   : 	auto hFile = CreateFileA(filename.c_str(), GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

  00695	6a 00		 push	 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00697	0f 43 45 c0	 cmovae	 eax, DWORD PTR _filename$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 33   : 	auto hFile = CreateFileA(filename.c_str(), GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

  0069b	68 80 00 00 00	 push	 128			; 00000080H
  006a0	6a 02		 push	 2
  006a2	6a 00		 push	 0
  006a4	6a 01		 push	 1
  006a6	68 00 00 00 40	 push	 1073741824		; 40000000H
  006ab	50		 push	 eax
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  006b2	8b f0		 mov	 esi, eax

; 34   : 	if (hFile == INVALID_HANDLE_VALUE)

  006b4	83 fe ff	 cmp	 esi, -1
  006b7	74 52		 je	 SHORT $LN19@make_minid

; 35   : 		return;
; 36   : 
; 37   : 	MINIDUMP_EXCEPTION_INFORMATION exceptionInfo;
; 38   : 	exceptionInfo.ThreadId = GetCurrentThreadId();

  006b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0

; 39   : 	exceptionInfo.ExceptionPointers = e;

  006bf	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$GSCopy$1$[ebp]

; 40   : 	exceptionInfo.ClientPointers = FALSE;
; 41   : 
; 42   : 	auto dumped = pMiniDumpWriteDump(

  006c5	33 d2		 xor	 edx, edx
  006c7	6a 00		 push	 0
  006c9	89 85 ac fe ff
	ff		 mov	 DWORD PTR _exceptionInfo$[ebp], eax
  006cf	85 c9		 test	 ecx, ecx
  006d1	6a 00		 push	 0
  006d3	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _exceptionInfo$[ebp]
  006d9	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _exceptionInfo$[ebp+4], ecx
  006df	0f 44 c2	 cmove	 eax, edx
  006e2	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _exceptionInfo$[ebp+8], 0
  006ec	50		 push	 eax
  006ed	6a 50		 push	 80			; 00000050H
  006ef	56		 push	 esi
  006f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  006f6	50		 push	 eax
  006f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  006fd	50		 push	 eax
  006fe	ff 95 c0 fe ff
	ff		 call	 DWORD PTR _pMiniDumpWriteDump$1$[ebp]

; 43   : 		GetCurrentProcess(),
; 44   : 		GetCurrentProcessId(),
; 45   : 		hFile,
; 46   : 		MINIDUMP_TYPE(MiniDumpWithIndirectlyReferencedMemory | MiniDumpScanMemory),
; 47   : 		e ? &exceptionInfo : nullptr,
; 48   : 		nullptr,
; 49   : 		nullptr);
; 50   : 
; 51   : 	CloseHandle(hFile);

  00704	56		 push	 esi
  00705	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN19@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0070b	8b 55 d4	 mov	 edx, DWORD PTR _filename$[ebp+20]
  0070e	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00711	72 28		 jb	 SHORT $LN719@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00713	8b 4d c0	 mov	 ecx, DWORD PTR _filename$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00716	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00717	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00719	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0071f	72 10		 jb	 SHORT $LN729@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00721	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00724	83 c2 23	 add	 edx, 35			; 00000023H
  00727	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00729	83 c0 fc	 add	 eax, -4			; fffffffcH
  0072c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0072f	77 77		 ja	 SHORT $LN753@make_minid
$LN729@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00731	52		 push	 edx
  00732	51		 push	 ecx
  00733	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00738	83 c4 08	 add	 esp, 8
$LN719@make_minid:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 56   : 	return;

  0073b	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00741	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00748	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _filename$[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0074f	c6 45 c0 00	 mov	 BYTE PTR _filename$[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 56   : 	return;

  00753	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00758	8b 55 bc	 mov	 edx, DWORD PTR _folder$[ebp+20]
  0075b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0075e	72 28		 jb	 SHORT $LN746@make_minid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00760	8b 4d a8	 mov	 ecx, DWORD PTR _folder$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00763	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00764	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00766	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0076c	72 10		 jb	 SHORT $LN756@make_minid

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0076e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00771	83 c2 23	 add	 edx, 35			; 00000023H
  00774	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00776	83 c0 fc	 add	 eax, -4			; fffffffcH
  00779	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0077c	77 2a		 ja	 SHORT $LN753@make_minid
$LN756@make_minid:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0077e	52		 push	 edx
  0077f	51		 push	 ecx
  00780	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00785	83 c4 08	 add	 esp, 8
$LN746@make_minid:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterBase\error.cpp

; 57   : }

  00788	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0078b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00792	59		 pop	 ecx
  00793	5f		 pop	 edi
  00794	5e		 pop	 esi
  00795	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00798	33 cd		 xor	 ecx, ebp
  0079a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0079f	8b e5		 mov	 esp, ebp
  007a1	5d		 pop	 ebp
  007a2	c3		 ret	 0
$LN638@make_minid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007a3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN753@make_minid:
  007a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN763@make_minid:
  007ad	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _folder$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$15:
  00008	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0f 84 12 00 00
	00		 je	 $LN106@make_minid
  00017	83 a5 cc fe ff
	ff fe		 and	 DWORD PTR $T7[ebp], -2	; fffffffeH
  0001e	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+80]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN106@make_minid:
  00029	c3		 ret	 0
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$16:
  0002a	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+8]
  00030	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$1:
  00035	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$21:
  00040	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00046	83 e0 04	 and	 eax, 4
  00049	0f 84 12 00 00
	00		 je	 $LN145@make_minid
  0004f	83 a5 cc fe ff
	ff fb		 and	 DWORD PTR $T7[ebp], -5	; fffffffbH
  00056	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  0005c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN145@make_minid:
  00061	c3		 ret	 0
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$2:
  00062	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$3:
  0006d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00073	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$4:
  00078	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$5:
  00083	8d 4d 90	 lea	 ecx, DWORD PTR $T16[ebp]
  00086	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$6:
  0008b	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  0008e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$7:
  00093	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00099	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$8:
  0009e	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  000a4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$9:
  000a9	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  000af	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$10:
  000b4	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000ba	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$11:
  000bf	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  000c5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12:
  000ca	8d 4d c0	 lea	 ecx, DWORD PTR _filename$[ebp]
  000cd	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d2	cc		 int	 3
  000d3	cc		 int	 3
  000d4	cc		 int	 3
  000d5	cc		 int	 3
  000d6	cc		 int	 3
__ehhandler$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z:
  000d7	90		 npad	 1
  000d8	90		 npad	 1
  000d9	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000dd	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000e0	8b 8a 14 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-492]
  000e6	33 c8		 xor	 ecx, eax
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000f0	33 c8		 xor	 ecx, eax
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
  000fc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z ENDP	; make_minidump
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 452  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN7@scalar
  00041	6a 38		 push	 56			; 00000038H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gios_base@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 451  :     virtual __CLR_OR_THIS_CALL ~ios_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 452  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002e	83 c4 04	 add	 esp, 4

; 453  :     }

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
  00040	cc		 int	 3
  00041	cc		 int	 3
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 20
$T2 = -8						; size = 8
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 243  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :         _State &= _Statmask;

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	83 e0 17	 and	 eax, 23			; 00000017H

; 245  :         _Mystate             = _State;

  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 246  :         const auto _Filtered = _State & _Except;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	56		 push	 esi
  00013	23 c8		 and	 ecx, eax

; 247  :         if (_Filtered) {

  00015	74 08		 je	 SHORT $LN2@clear

; 248  :             if (_Reraise) {

  00017	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001b	74 12		 je	 SHORT $LN3@clear
  0001d	eb 07		 jmp	 SHORT $LN11@clear
$LN2@clear:

; 262  :         }
; 263  :     }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN11@clear:

; 249  :                 _RERAISE;

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 250  :             }
; 251  : 
; 252  :             const char* _Msg;
; 253  :             if (_Filtered & ios_base::badbit) {

  0002f	f6 c1 04	 test	 cl, 4
  00032	74 07		 je	 SHORT $LN4@clear

; 254  :                 _Msg = "ios_base::badbit set";

  00034	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00039	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  0003b	f6 c1 02	 test	 cl, 2
  0003e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00043	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00048	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 256  :                 _Msg = "ios_base::failbit set";
; 257  :             } else {
; 258  :                 _Msg = "ios_base::eofbit set";
; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  0004b	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0004e	6a 01		 push	 1
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00056	83 c4 08	 add	 esp, 8
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00063	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00068	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@clear:
  00071	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
tv317 = -44						; size = 4
_this$GSCopy$ = -44					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00033	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00036	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

  00038	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0003b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  00042	8b 38		 mov	 edi, DWORD PTR [eax]
  00044	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4596 :         _My_data._Mysize = 0;

  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00051	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00058	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0005c	89 45 d4	 mov	 DWORD PTR tv317[ebp], eax
  0005f	90		 npad	 1
$LL53@failure:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL53@failure
  00067	2b 4d d4	 sub	 ecx, DWORD PTR tv317[ebp]

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	52		 push	 edx
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 467  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

  00074	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	50		 push	 eax
  0007f	53		 push	 ebx
  00080	57		 push	 edi
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00088	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  0008b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0008e	72 28		 jb	 SHORT $LN36@failure
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00090	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00093	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00094	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00096	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0009c	72 10		 jb	 SHORT $LN46@failure

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0009e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000a1	83 c2 23	 add	 edx, 35			; 00000023H
  000a4	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ac	77 30		 ja	 SHORT $LN57@failure
$LN46@failure:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000ae	52		 push	 edx
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b5	83 c4 08	 add	 esp, 8
$LN36@failure:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  000b8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  000be	8b c6		 mov	 eax, esi
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
$LN57@failure:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000de	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@failure:
  000e3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 52
$T3 = -44						; size = 16
__Lock$4 = -28						; size = 4
__Psave$1$ = -24					; size = 4
$T5 = -24						; size = 4
__Lock$6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$8 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 428  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 429  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 430  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 109  :                 }
; 110  :                 _END_LOCK()

  00072	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00083	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00086	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00089	73 10		 jae	 SHORT $LN19@use_facet
  0008b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008e	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  00091	85 f6		 test	 esi, esi
  00093	0f 85 c1 00 00
	00		 jne	 $LN63@use_facet
  00099	eb 02		 jmp	 SHORT $LN66@use_facet
$LN19@use_facet:

; 371  :     }
; 372  : 
; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009b	33 f6		 xor	 esi, esi
$LN66@use_facet:

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  0009d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a1	74 10		 je	 SHORT $LN14@use_facet

; 376  :             return _Facptr; // found facet or not transparent
; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a3	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  000a8	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000ab	73 0e		 jae	 SHORT $LN67@use_facet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ad	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b0	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN14@use_facet:

; 431  : 
; 432  :     const size_t _Id         = _Facet::id;
; 433  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 434  : 
; 435  :     if (!_Pf) {

  000b3	85 f6		 test	 esi, esi
  000b5	0f 85 9f 00 00
	00		 jne	 $LN63@use_facet
$LN67@use_facet:

; 436  :         if (_Psave) {

  000bb	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	74 07		 je	 SHORT $LN3@use_facet

; 437  :             _Pf = _Psave; // lazy facet already allocated

  000c2	8b f0		 mov	 esi, eax

; 438  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c4	e9 91 00 00 00	 jmp	 $LN63@use_facet
$LN3@use_facet:

; 2731 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  000c9	6a 18		 push	 24			; 00000018H
  000cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d0	8b f0		 mov	 esi, eax
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000dc	85 f6		 test	 esi, esi
  000de	74 4d		 je	 SHORT $LN24@use_facet

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000e0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 109  :         return _Myptr ? _Myptr : &_Nul;

  000ea	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000ed	85 c0		 test	 eax, eax
  000ef	75 0a		 jne	 SHORT $LN33@use_facet
  000f1	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f4	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  000f6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2731 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  000fb	50		 push	 eax
  000fc	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  000ff	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 199  :         return ::_Getctype();

  00104	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2731 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  00107	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 199  :         return ::_Getctype();

  0010e	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0010f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2725 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  00116	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo

; 199  :         return ::_Getctype();

  0011c	e8 00 00 00 00	 call	 __Getctype
  00121	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 2753 :         _Ctype = _Lobj._Getctype();

  00124	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00127	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2731 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  0012b	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  0012d	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0012f	f6 45 f0 01	 test	 BYTE PTR $T7[ebp], 1
  00133	74 08		 je	 SHORT $LN29@use_facet
  00135	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00138	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1390 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0013d	89 75 08	 mov	 DWORD PTR __Psave_guard$8[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale

; 451  :             _Facet_Register(_Pfmod);

  00140	56		 push	 esi
  00141	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00145	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 452  : #endif // defined(_M_CEE)
; 453  : 
; 454  :             _Pfmod->_Incref();

  0014a	8b 16		 mov	 edx, DWORD PTR [esi]
  0014c	83 c4 04	 add	 esp, 4
  0014f	8b ce		 mov	 ecx, esi
  00151	ff 52 04	 call	 DWORD PTR [edx+4]

; 455  :             _Facetptr<_Facet>::_Psave = _Psave;

  00154	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN63@use_facet:

; 456  :             _Pf                       = _Psave;
; 457  : 
; 458  :             (void) _Psave_guard.release();
; 459  :         }
; 460  :     }
; 461  : 
; 462  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0015a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0015d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00162	8b c6		 mov	 eax, esi

; 463  :     _END_LOCK()
; 464  : } // end of use_facet body

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2748 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2757 :         if (0 < _Ctype._Delfl) {

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2748 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2757 :         if (0 < _Ctype._Delfl) {

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN13@scalar

; 2758 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN14@scalar
$LN13@scalar:

; 2759 :         } else if (_Ctype._Delfl < 0) {

  0001d	79 0b		 jns	 SHORT $LN10@scalar

; 2760 :             delete[] _Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN14@scalar:

; 2761 :         }
; 2762 : 
; 2763 :         _CSTD free(_Ctype._LocaleName);

  00027	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4

; 2750 :     }

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN12@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2810 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2811 :         _Adl_verify_range(_First, _Last);
; 2812 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2813 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2814 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2805 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2806 :         return _Ch;

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2807 :     }

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2799 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2800 :         _Adl_verify_range(_First, _Last);
; 2801 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2802 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2803 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2794 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2795 :         return _Byte;

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2796 :     }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2785 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2786 :         _Adl_verify_range(_First, _Last);
; 2787 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2788 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_toupper

; 2789 :         }
; 2790 : 
; 2791 :         return _First;

  00027	5b		 pop	 ebx
$LN10@do_toupper:
  00028	5f		 pop	 edi

; 2792 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2780 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2781 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2782 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2771 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2772 :         _Adl_verify_range(_First, _Last);
; 2773 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2774 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_tolower

; 2775 :         }
; 2776 : 
; 2777 :         return _First;

  00027	5b		 pop	 ebx
$LN10@do_tolower:
  00028	5f		 pop	 edi

; 2778 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2766 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2767 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2768 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2748 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2757 :         if (0 < _Ctype._Delfl) {

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2748 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2757 :         if (0 < _Ctype._Delfl) {

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN8@ctype

; 2758 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN9@ctype
$LN8@ctype:

; 2759 :         } else if (_Ctype._Delfl < 0) {

  0001a	79 0b		 jns	 SHORT $LN6@ctype

; 2760 :             delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN9@ctype:

; 2761 :         }
; 2762 : 
; 2763 :         _CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN6@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2749 :         _Tidy();
; 2750 :     }

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 351  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 352  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 353  :         }
; 354  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 155  :         virtual __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 140  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 141  :                 return this;
; 142  :             }
; 143  : 
; 144  :             return nullptr;
; 145  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 136  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 137  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 101  :         _Tidy();
; 102  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 101  :         _Tidy();
; 102  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 178  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 179  :         _Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 122  :         if (_Myptr) {

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 179  :         _Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4

; 122  :         if (_Myptr) {

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN6@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN6@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 122  :         if (_Myptr) {

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN11@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN11@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 122  :         if (_Myptr) {

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN16@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN16@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 122  :         if (_Myptr) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN21@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN21@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 122  :         if (_Myptr) {

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN26@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN26@Locinfo:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 122  :         if (_Myptr) {

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN31@Locinfo

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN31@Locinfo:

; 180  :     }

  000b1	8b ce		 mov	 ecx, esi

; 130  :         _Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 180  :     }

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 155  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 60   : 
; 61   :     __CLR_OR_THIS_CALL _Yarn(const _Yarn& _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 62   :         *this = _Right;
; 63   :     }
; 64   : 
; 65   :     __CLR_OR_THIS_CALL _Yarn(const _Elem* _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 66   :         *this = _Right;
; 67   :     }
; 68   : 
; 69   :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Yarn& _Right) noexcept {
; 70   :         return *this = _Right._Myptr;
; 71   :     }
; 72   : 
; 73   :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Elem* _Right) noexcept {
; 74   :         if (_Myptr != _Right) { // new value, discard old and copy new
; 75   :             _Tidy();
; 76   : 
; 77   :             if (_Right) { // new is not empty, copy it
; 78   :                 const _Elem* _Ptr = _Right;
; 79   :                 while (*_Ptr != _Elem{}) {
; 80   :                     ++_Ptr;
; 81   :                 }
; 82   : 
; 83   :                 const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);
; 84   : 
; 85   : #ifdef _DEBUG
; 86   :                 _Myptr = static_cast<_Elem*>(_malloc_dbg(_Count, _CRT_BLOCK, __FILE__, __LINE__));
; 87   : #else // _DEBUG
; 88   :                 _Myptr = static_cast<_Elem*>(_CSTD malloc(_Count));
; 89   : #endif // _DEBUG
; 90   : 
; 91   :                 if (_Myptr) {
; 92   :                     _CSTD memcpy(_Myptr, _Right, _Count);
; 93   :                 }
; 94   :             }
; 95   :         }
; 96   : 
; 97   :         return *this;
; 98   :     }
; 99   : 
; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {
; 101  :         _Tidy();
; 102  :     }
; 103  : 
; 104  :     _NODISCARD bool __CLR_OR_THIS_CALL empty() const noexcept {
; 105  :         return _Myptr == nullptr;
; 106  :     }
; 107  : 
; 108  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {
; 109  :         return _Myptr ? _Myptr : &_Nul;
; 110  :     }
; 111  : 
; 112  :     _NODISCARD bool __CLR_OR_THIS_CALL _Empty() const noexcept {
; 113  :         return _Myptr == nullptr;
; 114  :     }
; 115  : 
; 116  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL _C_str() const noexcept {
; 117  :         return _Myptr ? _Myptr : &_Nul;
; 118  :     }
; 119  : 
; 120  : private:
; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {
; 122  :         if (_Myptr) {
; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);
; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;
; 131  :     }
; 132  : 
; 133  :     _Elem* _Myptr; // pointer to allocated string
; 134  :     _Elem _Nul; // nul terminator for unallocated string
; 135  : };
; 136  : 
; 137  : // CLASS _Locinfo
; 138  : class _CRTIMP2_PURE_IMPORT _Locinfo { // summary of all stuff specific to a locale used by standard facets
; 139  : public:
; 140  :     using _Collvec  = ::_Collvec;
; 141  :     using _Ctypevec = ::_Ctypevec;
; 142  :     using _Cvtvec   = ::_Cvtvec;
; 143  :     using _Timevec  = _STD _Timevec;
; 144  : 
; 145  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, const char*);
; 146  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, int, const char*);
; 147  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_dtor(_Locinfo*);
; 148  :     static _Locinfo& __CLRCALL_PURE_OR_CDECL _Locinfo_Addcats(_Locinfo*, int, const char*);
; 149  : 
; 150  :     __CLR_OR_THIS_CALL _Locinfo(const char* _Pch = "C")
; 151  : #ifndef _M_CEE
; 152  :         : _Lock(_LOCK_LOCALE)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00061	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00064	88 46 28	 mov	 BYTE PTR [esi+40], al
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 156  :         if (_Pch) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	85 c0		 test	 eax, eax
  00076	74 1e		 je	 SHORT $LN2@Locinfo

; 157  :             _Locinfo_ctor(this, _Pch);

  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0007f	83 c4 08	 add	 esp, 8

; 162  :     }

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN2@Locinfo:

; 158  :             return;
; 159  :         }
; 160  : 
; 161  :         _Xruntime_error("bad locale name");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009b	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN24@Locinfo:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 28   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 640  :     static _Constexpr_immortalize_impl<_Ty> _Static;
; 641  :     return _Static._Storage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static

; 642  : }

  00005	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category2@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN4@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT
; _this$ = ecx

; 532  :     _NODISCARD virtual string message(int _Errcode) const override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00006	56		 push	 esi
  00007	83 f8 01	 cmp	 eax, 1
  0000a	75 2f		 jne	 SHORT $LN2@message
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2503 :         assign(_Ptr, _Count);

  0000f	8b ce		 mov	 ecx, esi
  00011	6a 15		 push	 21			; 00000015H
  00013	68 00 00 00 00	 push	 OFFSET ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4596 :         _My_data._Mysize = 0;

  0001e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00025	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2503 :         assign(_Ptr, _Count);

  0002f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 540  :     }

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN2@message:
  0003b	57		 push	 edi

; 538  :             return _Syserror_map(_Errcode);

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00042	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 538  :             return _Syserror_map(_Errcode);

  00045	8b d0		 mov	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 538  :             return _Syserror_map(_Errcode);

  00049	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0004c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4596 :         _My_data._Mysize = 0;

  00052	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00059	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0005c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00063	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL35@message:

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00066	8a 01		 mov	 al, BYTE PTR [ecx]
  00068	41		 inc	 ecx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL35@message
  0006d	2b cf		 sub	 ecx, edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006f	51		 push	 ecx
  00070	52		 push	 edx
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 538  :             return _Syserror_map(_Errcode);

  00078	5f		 pop	 edi

; 540  :     }

  00079	8b c6		 mov	 eax, esi
  0007b	5e		 pop	 esi
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category2@std@@UBEPBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT
; _this$ = ecx

; 529  :         return "iostream";

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 530  :     }

  00005	c3		 ret	 0
?name@_Iostream_error_category2@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN15@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 71   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\stdexcept
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 24
__InitData$3 = -76					; size = 8
__Errcode$2$ = -72					; size = 4
__New_capacity$1$ = -72					; size = 4
_this$GSCopy$ = -72					; size = 4
_this$ = -72						; size = 4
__Errcode$1$ = -68					; size = 4
__Result$1$ = -68					; size = 4
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 452  :     _System_error(error_code _Errcode, const string& _Message)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 b8	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	89 75 b8	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00035	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00038	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0003c	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 2306 :         if (_Large_string_engaged()) {

  0003f	72 05		 jb	 SHORT $LN20@System_err

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00041	8b 00		 mov	 eax, DWORD PTR [eax]
  00043	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN20@System_err:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00046	83 ff 10	 cmp	 edi, 16			; 00000010H
  00049	73 10		 jae	 SHORT $LN17@System_err

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004e	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00055	0f 11 45 9c	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 2937 :             return;

  00059	eb 53		 jmp	 SHORT $LN183@System_err
$LN17@System_err:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0005b	8b c7		 mov	 eax, edi
  0005d	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00062	83 c8 0f	 or	 eax, 15			; 0000000fH
  00065	3b c1		 cmp	 eax, ecx
  00067	0f 47 c1	 cmova	 eax, ecx
  0006a	89 45 b8	 mov	 DWORD PTR __New_capacity$1$[ebp], eax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0006d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00073	72 0d		 jb	 SHORT $LN31@System_err

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b c8		 mov	 ecx, eax
  00080	eb 13		 jmp	 SHORT $LN30@System_err
$LN31@System_err:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00082	85 c0		 test	 eax, eax
  00084	74 0d		 je	 SHORT $LN32@System_err

; 85   :         return ::operator new(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008c	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0008f	8b c8		 mov	 ecx, eax
  00091	eb 02		 jmp	 SHORT $LN30@System_err
$LN32@System_err:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00093	33 c9		 xor	 ecx, ecx
$LN30@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00095	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00098	89 4d 9c	 mov	 DWORD PTR $T2[ebp], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	50		 push	 eax
  0009c	ff 75 bc	 push	 DWORD PTR __Result$1$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _memcpy

; 2952 :         _My_data._Myres  = _New_capacity;

  000a5	8b 45 b8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2952 :         _My_data._Myres  = _New_capacity;

  000ab	89 45 b0	 mov	 DWORD PTR $T2[ebp+20], eax
$LN183@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 453  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  000ae	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  000b4	89 7d ac	 mov	 DWORD PTR $T2[ebp+16], edi
  000b7	89 45 bc	 mov	 DWORD PTR __Errcode$1$[ebp], eax
  000ba	89 4d b8	 mov	 DWORD PTR __Errcode$2$[ebp], ecx

; 442  :     static string _Makestr(error_code _Errcode, string _Message) { // compose error message

  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 443  :         if (!_Message.empty()) {

  000c4	85 ff		 test	 edi, edi
  000c6	74 12		 je	 SHORT $LN39@System_err
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c8	6a 02		 push	 2
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  000cf	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  000d2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000d7	8b 4d b8	 mov	 ecx, DWORD PTR __Errcode$2$[ebp]
$LN39@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 173  :         return category().message(value());

  000da	ff 75 bc	 push	 DWORD PTR __Errcode$1$[ebp]
  000dd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000df	8d 55 d8	 lea	 edx, DWORD PTR $T5[ebp]
  000e2	52		 push	 edx
  000e3	ff 50 08	 call	 DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e6	83 7d ec 10	 cmp	 DWORD PTR $T5[ebp+20], 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  000ea	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]

; 3124 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000ed	ff 75 e8	 push	 DWORD PTR $T5[ebp+16]

; 2306 :         if (_Large_string_engaged()) {

  000f0	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T5[ebp]

; 3124 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000f4	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  000f7	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 447  :         _Message.append(_Errcode.message());

  000f8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3124 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2319 :         return _BUF_SIZE <= _Myres;

  00101	8b 55 ec	 mov	 edx, DWORD PTR $T5[ebp+20]
  00104	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00107	72 2c		 jb	 SHORT $LN74@System_err
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00109	8b 4d d8	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0010c	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010d	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0010f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00115	72 14		 jb	 SHORT $LN84@System_err

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00117	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0011a	83 c2 23	 add	 edx, 35			; 00000023H
  0011d	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00122	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00125	0f 87 b6 00 00
	00		 ja	 $LN185@System_err
$LN84@System_err:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0012b	52		 push	 edx
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00132	83 c4 08	 add	 esp, 8
$LN74@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00135	0f 10 4d 9c	 movups	 xmm1, XMMWORD PTR $T2[ebp]

; 2305 :         const value_type* _Result = _Bx._Buf;

  00139	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  0013c	83 7d b0 10	 cmp	 DWORD PTR $T2[ebp+20], 16 ; 00000010H

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00140	f3 0f 7e 45 ac	 movq	 xmm0, QWORD PTR $T2[ebp+16]

; 2306 :         if (_Large_string_engaged()) {

  00145	66 0f 7e c8	 movd	 eax, xmm1

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00149	66 0f d6 45 d0	 movq	 QWORD PTR $T4[ebp+16], xmm0
  0014e	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h

; 59   :     {

  00151	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00157	0f 43 c8	 cmovae	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h

; 58   :         : _Data()

  0015a	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
  0015f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 60   :         __std_exception_data _InitData = { _Message, true };

  00162	89 4d b4	 mov	 DWORD PTR __InitData$3[ebp], ecx

; 61   :         __std_exception_copy(&_InitData, &_Data);

  00165	50		 push	 eax
  00166	8d 45 b4	 lea	 eax, DWORD PTR __InitData$3[ebp]
  00169	c6 45 b8 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  0016d	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0016e	0f 11 4d c0	 movups	 XMMWORD PTR $T4[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h

; 61   :         __std_exception_copy(&_InitData, &_Data);

  00172	e8 00 00 00 00	 call	 ___std_exception_copy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00177	8b 55 d4	 mov	 edx, DWORD PTR $T4[ebp+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h

; 61   :         __std_exception_copy(&_InitData, &_Data);

  0017a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\stdexcept

; 111  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

  0017d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00183	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00186	72 28		 jb	 SHORT $LN166@System_err
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8b 4d c0	 mov	 ecx, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0018b	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018c	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0018e	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00194	72 10		 jb	 SHORT $LN176@System_err

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00196	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00199	83 c2 23	 add	 edx, 35			; 00000023H
  0019c	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019e	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a4	77 40		 ja	 SHORT $LN186@System_err
$LN176@System_err:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001a6	52		 push	 edx
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ad	83 c4 08	 add	 esp, 8
$LN166@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error

; 453  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  001b0	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  001b3	8b c6		 mov	 eax, esi
  001b5	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  001b8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_System_error@std@@6B@
  001be	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  001c1	89 56 10	 mov	 DWORD PTR [esi+16], edx
  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d4	33 cd		 xor	 ecx, ebp
  001d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 0c 00	 ret	 12			; 0000000cH
$LN185@System_err:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN186@System_err:
  001e6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN182@System_err:
  001eb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 390  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   :         return _Addr == _Right._Addr;

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 390  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00006	56		 push	 esi

; 94   :         return _Addr == _Right._Addr;

  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 391  :     return *this == _Code.category() && _Code.value() == _Errval;

  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 392  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 391  :     return *this == _Code.category() && _Code.value() == _Errval;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 392  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 386  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return default_error_condition(_Errval) == _Cond;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]

; 94   :         return _Addr == _Right._Addr;

  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 273  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00022	75 0f		 jne	 SHORT $LN5@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN5@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 388  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN5@equivalent:

; 273  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 388  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 381  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 382  :     // make error_condition for error code
; 383  :     return error_condition(_Errval, *this);
; 384  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 81   :         virtual ~error_category() noexcept = default;

  00000	c2 00 00	 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 405  : _NODISCARD inline error_code make_error_code(io_errc _Errno) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 139  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Errno$[ebp]

; 405  : _NODISCARD inline error_code make_error_code(io_errc _Errno) noexcept {

  00006	56		 push	 esi

; 139  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 0e		 mov	 DWORD PTR [esi], ecx

; 669  :     return _Immortalize_memcpy_image<_Iostream_error_category2>();

  0000c	e8 00 00 00 00	 call	 ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>

; 139  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 406  :     return error_code(static_cast<int>(_Errno), _STD iostream_category());

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi

; 407  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string
;	COMDAT ??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -32				; size = 4
__Buff$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z PROC ; std::_Integral_to_string<char,int>, COMDAT

; 484  : basic_string<_Elem> _Integral_to_string(const _Ty _Val) { // convert _Val to string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 485  :     static_assert(is_integral_v<_Ty>, "_Ty must be integral");
; 486  :     using _UTy = make_unsigned_t<_Ty>;
; 487  :     _Elem _Buff[21]; // can hold -2^63 and 2^64 - 1, plus NUL
; 488  :     _Elem* const _Buff_end = _STD end(_Buff);
; 489  :     _Elem* _RNext          = _Buff_end;
; 490  :     const auto _UVal       = static_cast<_UTy>(_Val);
; 491  :     if (_Val < 0) {

  00010	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00017	89 75 e0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0001a	85 c0		 test	 eax, eax
  0001c	79 16		 jns	 SHORT $LN2@Integral_t

; 492  :         _RNext    = _UIntegral_to_buff(_RNext, 0 - _UVal);

  0001e	f7 d8		 neg	 eax
  00020	50		 push	 eax
  00021	8d 45 f9	 lea	 eax, DWORD PTR __Buff$[ebp+21]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ; std::_UIntegral_to_buff<char,unsigned int>
  0002a	83 c4 08	 add	 esp, 8

; 493  :         *--_RNext = '-';

  0002d	c6 40 ff 2d	 mov	 BYTE PTR [eax-1], 45	; 0000002dH
  00031	48		 dec	 eax

; 494  :     } else {

  00032	eb 0d		 jmp	 SHORT $LN3@Integral_t
$LN2@Integral_t:

; 495  :         _RNext = _UIntegral_to_buff(_RNext, _UVal);

  00034	50		 push	 eax
  00035	8d 45 f9	 lea	 eax, DWORD PTR __Buff$[ebp+21]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ; std::_UIntegral_to_buff<char,unsigned int>
  0003e	83 c4 08	 add	 esp, 8
$LN3@Integral_t:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2591 :         if (_First != _Last) {

  00041	8d 4d f9	 lea	 ecx, DWORD PTR __Buff$[ebp+21]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00044	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4596 :         _My_data._Mysize = 0;

  0004a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00051	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00058	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2591 :         if (_First != _Last) {

  0005b	3b c1		 cmp	 eax, ecx
  0005d	74 0b		 je	 SHORT $LN22@Integral_t

; 2592 :             assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));

  0005f	2b c8		 sub	 ecx, eax
  00061	51		 push	 ecx
  00062	50		 push	 eax
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN22@Integral_t:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\string

; 499  : }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	8b c6		 mov	 eax, esi
  0006f	33 cd		 xor	 ecx, ebp
  00071	5e		 pop	 esi
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ENDP ; std::_Integral_to_string<char,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv533 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv534 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv537 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3152 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3153 :         // append [_Ptr, _Ptr + _Count)
; 3154 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3155 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3156 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2319 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3157 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3158 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3159 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3172 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4490 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv537[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv537[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4494 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv537[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 85   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv534[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv533[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv534[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3163 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4544 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$1$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2672 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00011	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00017	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2680 : 
; 2681 :         const auto _Left_capacity  = _Left_data._Myres;
; 2682 :         const auto _Right_capacity = _Right_data._Myres;
; 2683 :         // overflow is OK due to max_size() checks:
; 2684 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2685 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2686 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0004b	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  0004e	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00053	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  00058	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0005f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2296 :         value_type* _Result = _Bx._Buf;

  00069	8b f3		 mov	 esi, ebx

; 2319 :         return _BUF_SIZE <= _Myres;

  0006b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN29@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN29@basic_stri:

; 2319 :         return _BUF_SIZE <= _Myres;

  00073	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN34@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN34@basic_stri:

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	57		 push	 edi
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2692 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00092	8b c3		 mov	 eax, ebx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2693 :             return;
; 2694 :         }
; 2695 : 
; 2696 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2697 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000ad	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000b2	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000b7	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000be	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2698 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2699 :             // At this point, we have tested:
; 2700 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2701 :             // therefore: (by De Morgan's Laws)
; 2702 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2703 :             // therefore: (by the distributive property)
; 2704 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2705 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2706 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2707 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2708 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2709 :             _Take_contents(_Right);
; 2710 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	57		 push	 edi

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  000d7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN57@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 36		 mov	 esi, DWORD PTR [esi]
$LN57@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2712 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2713 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000f3	8b c3		 mov	 eax, ebx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2714 :             return;
; 2715 :         }
; 2716 : 
; 2717 :         // can't use either buffer, reallocate
; 2718 :         const auto _Max = max_size();
; 2719 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN64@basic_stri

; 4490 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$1$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN64@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2726 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN72@basic_stri
$LN94@basic_stri:

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN72@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN73@basic_stri

; 85   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 85   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN71@basic_stri
$LN73@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN71@basic_stri:

; 2734 :         _My_data._Mysize = _New_size;

  00172	8b 7d 0c	 mov	 edi, DWORD PTR __New_size$1$[ebp]
  00175	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2297 :         if (_Large_string_engaged()) {

  00178	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 13		 mov	 DWORD PTR [ebx], edx

; 2735 :         _My_data._Myres  = _New_capacity;

  0017d	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 2319 :         return _BUF_SIZE <= _Myres;

  00180	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN78@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 36		 mov	 esi, DWORD PTR [esi]
$LN78@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	56		 push	 esi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  00193	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN85@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	57		 push	 edi
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 2739 :         _Proxy._Release();
; 2740 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c3		 mov	 eax, ebx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2720 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00009	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000f	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00011	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00014	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00021	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	51		 push	 ecx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8

; 836  :     }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00036	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
