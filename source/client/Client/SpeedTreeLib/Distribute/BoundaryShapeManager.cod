; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\Distribute\BoundaryShapeManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
PUBLIC	?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy
PUBLIC	?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
PUBLIC	??1SBoundaryShape@@QAE@XZ			; SBoundaryShape::~SBoundaryShape
PUBLIC	??0CBoundaryShapeManager@@QAE@XZ		; CBoundaryShapeManager::CBoundaryShapeManager
PUBLIC	??1CBoundaryShapeManager@@UAE@XZ		; CBoundaryShapeManager::~CBoundaryShapeManager
PUBLIC	?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z	; CBoundaryShapeManager::LoadBsfFile
PUBLIC	?PointInside@CBoundaryShapeManager@@QAE_NMM@Z	; CBoundaryShapeManager::PointInside
PUBLIC	?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z	; CBoundaryShapeManager::RandomPoint
PUBLIC	?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
PUBLIC	?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate
PUBLIC	??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
PUBLIC	?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy
PUBLIC	?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
PUBLIC	??_GCBoundaryShapeManager@@UAEPAXI@Z		; CBoundaryShapeManager::`scalar deleting destructor'
PUBLIC	??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
PUBLIC	??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
PUBLIC	?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
PUBLIC	?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
PUBLIC	??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
PUBLIC	??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
PUBLIC	??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
PUBLIC	??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
PUBLIC	??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`vftable'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBoundaryShapeManager@@@8		; CBoundaryShapeManager `RTTI Type Descriptor'
PUBLIC	??_R3CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBoundaryShapeManager@@8		; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	??_ECBoundaryShapeManager@@UAEPAXI@Z:PROC	; CBoundaryShapeManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBoundaryShapeManager@@8 DD FLAT:??_R0?AVCBoundaryShapeManager@@@8 ; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R2CBoundaryShapeManager@@8 DD FLAT:??_R1A@?0A@EA@CBoundaryShapeManager@@8 ; CBoundaryShapeManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R3CBoundaryShapeManager@@8 DD 00H			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBoundaryShapeManager@@@8
data$rs	SEGMENT
??_R0?AVCBoundaryShapeManager@@@8 DD FLAT:??_7type_info@@6B@ ; CBoundaryShapeManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBoundaryShapeManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBoundaryShapeManager@@6B@
rdata$r	SEGMENT
??_R4CBoundaryShapeManager@@6B@ DD 00H			; CBoundaryShapeManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBoundaryShapeManager@@@8
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Could not open ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of bou'
	DB	'ndaries', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of con'
	DB	'tours', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of poi'
	DB	'nts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CBoundaryShapeManager@@6B@
CONST	SEGMENT
??_7CBoundaryShapeManager@@6B@ DD FLAT:??_R4CBoundaryShapeManager@@6B@ ; CBoundaryShapeManager::`vftable'
	DD	FLAT:??_ECBoundaryShapeManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@PAV21@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@PAV21@00@Z$0
__ehfuncinfo$??$_Ucopy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@PAV21@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Ucopy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@PAV21@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$3
__ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2
__ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0
__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17
__ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$2
__ehfuncinfo$??0SBoundaryShape@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 1625 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout_al() {

  00000	56		 push	 esi

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 949  :         for (; _First != _Last; ++_First) {

  00007	3b f7		 cmp	 esi, edi
  00009	74 13		 je	 SHORT $LN5@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL6@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00017	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Uninitiali
$LN5@Uninitiali:
  0001e	5f		 pop	 edi

; 1627 :     }

  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z PROC ; std::_Copy_memmove<SPoint *,SPoint *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPoint *,SPoint *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >, COMDAT
; _this$ = ecx

; 35   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy

; 36   :             _Target->_Tidy();
; 37   :         }
; 38   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	57		 push	 edi

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000d	74 3f		 je	 SHORT $LN49@Uninitiali

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000f	53		 push	 ebx
  00010	8b df		 mov	 ebx, edi
  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00015	56		 push	 esi
  00016	2b d8		 sub	 ebx, eax
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  0001a	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001d	8b 71 f8	 mov	 esi, DWORD PTR [ecx-8]
  00020	8b 41 f0	 mov	 eax, DWORD PTR [ecx-16]

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	c7 41 f8 00 00
	00 00		 mov	 DWORD PTR [ecx-8], 0
  0002a	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00031	c7 41 f0 00 00
	00 00		 mov	 DWORD PTR [ecx-16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00038	89 54 0b f4	 mov	 DWORD PTR [ebx+ecx-12], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003c	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0003f	89 07		 mov	 DWORD PTR [edi], eax
  00041	89 77 08	 mov	 DWORD PTR [edi+8], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00044	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00047	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0004a	75 cc		 jne	 SHORT $LL4@Uninitiali

; 1732 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1733 :     }
; 1734 : 
; 1735 :     return _Backout._Release();

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
$LN49@Uninitiali:

; 1736 : }

  0004e	8b c7		 mov	 eax, edi
  00050	5f		 pop	 edi
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
tv593 = 16						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >, COMDAT

; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	57		 push	 edi

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000d	74 6d		 je	 SHORT $LN55@Uninitiali

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000f	8b d7		 mov	 edx, edi
  00011	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00014	53		 push	 ebx
  00015	2b d0		 sub	 edx, eax
  00017	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
  0001a	56		 push	 esi
  0001b	89 55 10	 mov	 DWORD PTR tv593[ebp], edx
  0001e	66 90		 npad	 2
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00022	8d 49 24	 lea	 ecx, DWORD PTR [ecx+36]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 41 d8	 mov	 eax, DWORD PTR [ecx-40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00028	8d 5b 24	 lea	 ebx, DWORD PTR [ebx+36]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002b	8b 71 e0	 mov	 esi, DWORD PTR [ecx-32]

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0002e	c7 41 e0 00 00
	00 00		 mov	 DWORD PTR [ecx-32], 0
  00035	c7 41 dc 00 00
	00 00		 mov	 DWORD PTR [ecx-36], 0
  0003c	c7 41 d8 00 00
	00 00		 mov	 DWORD PTR [ecx-40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00043	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00045	83 c7 24	 add	 edi, 36			; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00048	8b 45 10	 mov	 eax, DWORD PTR tv593[ebp]
  0004b	89 73 d8	 mov	 DWORD PTR [ebx-40], esi
  0004e	89 54 08 dc	 mov	 DWORD PTR [eax+ecx-36], edx
  00052	f3 0f 7e 41 e4	 movq	 xmm0, QWORD PTR [ecx-28]
  00057	66 0f d6 43 dc	 movq	 QWORD PTR [ebx-36], xmm0
  0005c	8b 41 ec	 mov	 eax, DWORD PTR [ecx-20]
  0005f	89 43 e4	 mov	 DWORD PTR [ebx-28], eax
  00062	f3 0f 7e 41 f0	 movq	 xmm0, QWORD PTR [ecx-16]
  00067	66 0f d6 43 e8	 movq	 QWORD PTR [ebx-24], xmm0
  0006c	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  0006f	89 53 f0	 mov	 DWORD PTR [ebx-16], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00072	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
  00075	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  00078	75 a6		 jne	 SHORT $LL4@Uninitiali

; 1732 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1733 :     }
; 1734 : 
; 1735 :     return _Backout._Release();

  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
$LN55@Uninitiali:

; 1736 : }

  0007c	8b c7		 mov	 eax, edi
  0007e	5f		 pop	 edi
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
__Constructed_last$ = -40				; size = 4
__Newsize$1$ = -36					; size = 4
tv509 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv513 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d4	 mov	 DWORD PTR _this$[ebp], edi

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	d1 fa		 sar	 edx, 1
  00045	8b c2		 mov	 eax, edx
  00047	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004a	03 c2		 add	 eax, edx
  0004c	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00054	f7 e9		 imul	 ecx
  00056	d1 fa		 sar	 edx, 1
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  0005f	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00064	0f 84 97 01 00
	00		 je	 $LN86@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b ce		 sub	 ecx, esi

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00072	89 5d dc	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007a	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007c	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	d1 fa		 sar	 edx, 1
  00083	8b ca		 mov	 ecx, edx
  00085	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00088	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008a	8b d1		 mov	 edx, ecx
  0008c	d1 ea		 shr	 edx, 1
  0008e	2b c2		 sub	 eax, edx
  00090	3b c8		 cmp	 ecx, eax
  00092	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00094	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00099	c7 45 ec 55 55
	55 15		 mov	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1689 :             return _Max; // geometric growth would overflow

  000a1	89 45 e4	 mov	 DWORD PTR tv513[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	83 c4 04	 add	 esp, 4
  000ac	8b d8		 mov	 ebx, eax
  000ae	eb 4c		 jmp	 SHORT $LN83@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000b3	8b f3		 mov	 esi, ebx
  000b5	3b c3		 cmp	 eax, ebx
  000b7	0f 43 f0	 cmovae	 esi, eax
  000ba	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  000c0	0f 87 40 01 00
	00		 ja	 $LN87@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000c6	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c9	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cc	c1 e0 02	 shl	 eax, 2
  000cf	89 45 e4	 mov	 DWORD PTR tv513[ebp], eax

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d7	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000df	83 c4 04	 add	 esp, 4
  000e2	8b d8		 mov	 ebx, eax
  000e4	eb 16		 jmp	 SHORT $LN83@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000e6	85 c0		 test	 eax, eax
  000e8	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f0	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000f3	8b d8		 mov	 ebx, eax
  000f5	eb 02		 jmp	 SHORT $LN84@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000f7	33 db		 xor	 ebx, ebx
$LN84@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f9	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN83@Emplace_re:
  000fc	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000ff	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00102	89 5d e8	 mov	 DWORD PTR $T2[ebp], ebx

; 786  :         pointer _Constructed_first      = _Constructed_last;
; 787  : 
; 788  :         _TRY_BEGIN

  00105	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010f	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00112	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
  00115	89 45 e0	 mov	 DWORD PTR tv509[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00118	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0011a	89 75 d8	 mov	 DWORD PTR __Constructed_last$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0011d	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00122	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00125	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00128	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0012a	3b d0		 cmp	 edx, eax
  0012c	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0012e	8b f3		 mov	 esi, ebx

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  00130	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00132	57		 push	 edi
  00133	53		 push	 ebx
  00134	52		 push	 edx
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0013e	83 c4 10	 add	 esp, 16			; 00000010H
  00141	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00144	57		 push	 edi
  00145	56		 push	 esi
  00146	50		 push	 eax
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  0014d	8b 37		 mov	 esi, DWORD PTR [edi]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00152	85 f6		 test	 esi, esi
  00154	74 5a		 je	 SHORT $LN61@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);

  00156	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00159	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0015c	3b f0		 cmp	 esi, eax
  0015e	74 11		 je	 SHORT $LN47@Emplace_re
$LL48@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00167	83 c6 0c	 add	 esi, 12			; 0000000cH
  0016a	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  0016d	75 f1		 jne	 SHORT $LL48@Emplace_re
  0016f	8b 37		 mov	 esi, DWORD PTR [edi]
$LN47@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00171	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00174	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00179	2b ce		 sub	 ecx, esi
  0017b	f7 e9		 imul	 ecx
  0017d	d1 fa		 sar	 edx, 1
  0017f	8b c2		 mov	 eax, edx
  00181	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00184	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00186	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00189	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0018c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00192	72 12		 jb	 SHORT $LN71@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00194	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00197	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0019a	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0019f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a2	77 67		 ja	 SHORT $LN68@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a4	8b f2		 mov	 esi, edx
$LN71@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001a6	51		 push	 ecx
  001a7	56		 push	 esi
  001a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ad	83 c4 08	 add	 esp, 8
$LN61@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001b0	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  001b3	89 1f		 mov	 DWORD PTR [edi], ebx
  001b5	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001b8	8b 45 e0	 mov	 eax, DWORD PTR tv509[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001bb	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001be	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001c1	8b 4d e4	 mov	 ecx, DWORD PTR tv513[ebp]
  001c4	03 cb		 add	 ecx, ebx
  001c6	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 807  :     }

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d3	59		 pop	 ecx
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0:

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);

  001dd	8b 45 d8	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001e0	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e3	50		 push	 eax
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy

; 801  :         _Al.deallocate(_Newvec, _Newcapacity);

  001ea	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001ed	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001f3	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate

; 802  :         _RERAISE;

  001f8	6a 00		 push	 0
  001fa	6a 00		 push	 0
  001fc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN86@Emplace_re:

; 778  :             _Xlength();

  00201	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN87@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00206	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN68@Emplace_re:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0020b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@Emplace_re:
  00210	cc		 int	 3
  00211	cc		 int	 3
  00212	cc		 int	 3
  00213	cc		 int	 3
  00214	cc		 int	 3
  00215	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
__Constructed_last$ = -40				; size = 4
__Newsize$1$ = -36					; size = 4
tv509 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv513 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d4	 mov	 DWORD PTR _this$[ebp], edi

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 03	 sar	 edx, 3
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 03	 sar	 edx, 3
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00061	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  00066	0f 84 9c 01 00
	00		 je	 $LN87@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0006f	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00072	2b ce		 sub	 ecx, esi

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00074	89 5d dc	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00077	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0007c	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 03	 sar	 edx, 3
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00097	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0009c	c7 45 ec c7 71
	1c 07		 mov	 DWORD PTR __Newcapacity$[ebp], 119304647 ; 071c71c7H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1689 :             return _Max; // geometric growth would overflow

  000a4	89 45 e4	 mov	 DWORD PTR tv513[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ac	83 c4 04	 add	 esp, 4
  000af	8b d8		 mov	 ebx, eax
  000b1	eb 4c		 jmp	 SHORT $LN84@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000b6	8b f3		 mov	 esi, ebx
  000b8	3b c3		 cmp	 eax, ebx
  000ba	0f 43 f0	 cmovae	 esi, eax
  000bd	81 fe c7 71 1c
	07		 cmp	 esi, 119304647		; 071c71c7H
  000c3	0f 87 44 01 00
	00		 ja	 $LN88@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000c9	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  000cc	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cf	c1 e0 02	 shl	 eax, 2
  000d2	89 45 e4	 mov	 DWORD PTR tv513[ebp], eax

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000da	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e2	83 c4 04	 add	 esp, 4
  000e5	8b d8		 mov	 ebx, eax
  000e7	eb 16		 jmp	 SHORT $LN84@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000e9	85 c0		 test	 eax, eax
  000eb	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f3	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000f6	8b d8		 mov	 ebx, eax
  000f8	eb 02		 jmp	 SHORT $LN85@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000fa	33 db		 xor	 ebx, ebx
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000fc	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN84@Emplace_re:
  000ff	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 786  :         pointer _Constructed_first      = _Constructed_last;
; 787  : 
; 788  :         _TRY_BEGIN
; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00102	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00105	89 5d e8	 mov	 DWORD PTR $T2[ebp], ebx
  00108	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010f	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00112	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00115	50		 push	 eax
  00116	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  00119	89 45 e0	 mov	 DWORD PTR tv509[ebp], eax
  0011c	57		 push	 edi
  0011d	89 75 d8	 mov	 DWORD PTR __Constructed_last$[ebp], esi
  00120	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00125	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0012e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00130	3b d0		 cmp	 edx, eax
  00132	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00134	8b f3		 mov	 esi, ebx

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  00136	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00138	57		 push	 edi
  00139	53		 push	 ebx
  0013a	52		 push	 edx
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
  00141	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0014a	57		 push	 edi
  0014b	56		 push	 esi
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00153	8b 37		 mov	 esi, DWORD PTR [edi]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00155	83 c4 10	 add	 esp, 16			; 00000010H

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00158	85 f6		 test	 esi, esi
  0015a	74 5b		 je	 SHORT $LN62@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);

  0015c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0015f	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00162	3b f0		 cmp	 esi, eax
  00164	74 11		 je	 SHORT $LN45@Emplace_re
$LL46@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0016d	83 c6 24	 add	 esi, 36			; 00000024H
  00170	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00173	75 f1		 jne	 SHORT $LL46@Emplace_re
  00175	8b 37		 mov	 esi, DWORD PTR [edi]
$LN45@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00177	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0017a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0017f	2b ce		 sub	 ecx, esi
  00181	f7 e9		 imul	 ecx
  00183	c1 fa 03	 sar	 edx, 3
  00186	8b c2		 mov	 eax, edx
  00188	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018b	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00190	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00193	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00199	72 12		 jb	 SHORT $LN72@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019e	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a1	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a3	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a9	77 67		 ja	 SHORT $LN69@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ab	8b f2		 mov	 esi, edx
$LN72@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001ad	51		 push	 ecx
  001ae	56		 push	 esi
  001af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b4	83 c4 08	 add	 esp, 8
$LN62@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001b7	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  001ba	89 1f		 mov	 DWORD PTR [edi], ebx
  001bc	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]

; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001bf	8b 45 e0	 mov	 eax, DWORD PTR tv509[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001c2	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001c5	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001c8	8b 4d e4	 mov	 ecx, DWORD PTR tv513[ebp]
  001cb	03 cb		 add	 ecx, ebx
  001cd	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 807  :     }

  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0:

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);

  001e4	8b 45 d8	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001e7	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001ea	50		 push	 eax
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy

; 801  :         _Al.deallocate(_Newvec, _Newcapacity);

  001f1	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001f4	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f7	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001fa	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate

; 802  :         _RERAISE;

  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN87@Emplace_re:

; 778  :             _Xlength();

  00208	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
$LN88@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0020d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN69@Emplace_re:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00212	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN83@Emplace_re:
  00217	cc		 int	 3
  00218	cc		 int	 3
  00219	cc		 int	 3
  0021a	cc		 int	 3
  0021b	cc		 int	 3
  0021c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
_TEXT	SEGMENT
__Backout$2 = -32					; size = 12
__Rightlast$1$ = -20					; size = 4
tv480 = -16						; size = 4
__Guard$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00028	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]

; 559  :         const pointer _Rightfirst = _Right_data._Myfirst;

  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00034	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  0003b	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 560  :         const pointer _Rightlast  = _Right_data._Mylast;

  00042	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00045	8b 39		 mov	 edi, DWORD PTR [ecx]
  00047	89 45 ec	 mov	 DWORD PTR __Rightlast$1$[ebp], eax

; 561  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 562  :         if (_Rightfirst != _Rightlast) {

  0004a	3b f8		 cmp	 edi, eax
  0004c	0f 84 9c 00 00
	00		 je	 $LN61@construct

; 563  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  00052	8b c8		 mov	 ecx, eax
  00054	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00059	2b cf		 sub	 ecx, edi
  0005b	f7 e9		 imul	 ecx
  0005d	d1 fa		 sar	 edx, 1
  0005f	8b c2		 mov	 eax, edx
  00061	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00064	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00066	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0006b	0f 87 af 00 00
	00		 ja	 $LN76@construct

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00071	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00074	c1 e6 02	 shl	 esi, 2
  00077	89 75 f0	 mov	 DWORD PTR tv480[ebp], esi

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00080	72 0d		 jb	 SHORT $LN23@construct

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	83 c4 04	 add	 esp, 4
  0008b	8b f0		 mov	 esi, eax
  0008d	eb 13		 jmp	 SHORT $LN22@construct
$LN23@construct:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0008f	85 f6		 test	 esi, esi
  00091	74 0d		 je	 SHORT $LN24@construct

; 85   :         return ::operator new(_Bytes);

  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00099	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0009c	8b f0		 mov	 esi, eax
  0009e	eb 02		 jmp	 SHORT $LN22@construct
$LN24@construct:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000a0	33 f6		 xor	 esi, esi
$LN22@construct:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR tv480[ebp]
  000a5	89 33		 mov	 DWORD PTR [ebx], esi
  000a7	03 c6		 add	 eax, esi
  000a9	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000ac	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 564  :             _Tidy_guard<vector> _Guard{this};

  000af	89 5d f0	 mov	 DWORD PTR __Guard$3[ebp], ebx
  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000b9	89 75 e0	 mov	 DWORD PTR __Backout$2[ebp], esi
  000bc	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi
  000bf	89 5d e8	 mov	 DWORD PTR __Backout$2[ebp+8], ebx
  000c2	8b 5d ec	 mov	 ebx, DWORD PTR __Rightlast$1$[ebp]

; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000c5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL35@construct:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d0	57		 push	 edi
  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >

; 1632 :         ++_Last;

  000d8	83 c6 0c	 add	 esi, 12			; 0000000cH

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000db	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1632 :         ++_Last;

  000de	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e1	3b fb		 cmp	 edi, ebx
  000e3	75 eb		 jne	 SHORT $LL35@construct
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 565  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  000e5	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  000e8	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000eb	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN61@construct:
  000ee	f3 0f 7e 41 0c	 movq	 xmm0, QWORD PTR [ecx+12]
  000f3	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0
  000f8	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000fb	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000fe	f3 0f 7e 41 18	 movq	 xmm0, QWORD PTR [ecx+24]
  00103	66 0f d6 43 18	 movq	 QWORD PTR [ebx+24], xmm0
  00108	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0010b	89 43 20	 mov	 DWORD PTR [ebx+32], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 716  :     }

  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN76@construct:

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00120	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@construct:
  00125	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv615 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  00016	8b 3e		 mov	 edi, DWORD PTR [esi]
  00018	2b d7		 sub	 edx, edi

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	f7 ea		 imul	 edx
  0001f	2b cf		 sub	 ecx, edi
  00021	d1 fa		 sar	 edx, 1
  00023	8b c2		 mov	 eax, edx
  00025	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00028	03 c2		 add	 eax, edx
  0002a	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00032	f7 e9		 imul	 ecx
  00034	d1 fa		 sar	 edx, 1
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
  0003d	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00040	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00045	0f 84 3f 01 00
	00		 je	 $LN104@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0004e	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00051	2b cf		 sub	 ecx, edi
  00053	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00058	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005a	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005f	d1 fa		 sar	 edx, 1
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00072	bf fc ff ff ff	 mov	 edi, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b d8		 mov	 ebx, eax
  00082	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00087	8b cb		 mov	 ecx, ebx
  00089	3b c3		 cmp	 eax, ebx
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00094	0f 87 f5 00 00
	00		 ja	 $LN105@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0009a	8d 3c 49	 lea	 edi, DWORD PTR [ecx+ecx*2]
  0009d	c1 e7 02	 shl	 edi, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a0	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  000a6	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b d8		 mov	 ebx, eax
  000b3	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000b5	85 ff		 test	 edi, edi
  000b7	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bf	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000c2	8b d8		 mov	 ebx, eax
  000c4	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000c6	33 db		 xor	 ebx, ebx
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c8	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000cb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ce	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d4	89 4d f8	 mov	 DWORD PTR tv615[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d7	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000db	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  000df	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e2	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000e5	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000e8	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	3b c2		 cmp	 eax, edx
  000ef	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f1	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000f3	eb 17		 jmp	 SHORT $LN66@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f5	53		 push	 ebx
  000f6	50		 push	 eax
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fd	8b 45 f8	 mov	 eax, DWORD PTR tv615[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00106	83 c0 0c	 add	 eax, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00109	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
$LN66@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0010c	50		 push	 eax
  0010d	52		 push	 edx
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00114	8b 36		 mov	 esi, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00116	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00119	85 f6		 test	 esi, esi
  0011b	74 42		 je	 SHORT $LN86@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00120	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00125	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00128	2b ce		 sub	 ecx, esi
  0012a	f7 e9		 imul	 ecx
  0012c	d1 fa		 sar	 edx, 1
  0012e	8b c2		 mov	 eax, edx
  00130	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00133	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00135	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00138	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0013b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00141	72 12		 jb	 SHORT $LN96@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00143	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00146	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00149	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014b	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0014e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00151	77 32		 ja	 SHORT $LN93@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00153	8b f2		 mov	 esi, edx
$LN96@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00155	51		 push	 ecx
  00156	56		 push	 esi
  00157	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015c	83 c4 08	 add	 esp, 8
$LN86@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0015f	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00165	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00168	8d 49 03	 lea	 ecx, DWORD PTR [ecx+3]
  0016b	89 18		 mov	 DWORD PTR [eax], ebx
  0016d	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00170	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00173	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00176	5f		 pop	 edi
  00177	5e		 pop	 esi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00178	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  0017b	8b 45 f8	 mov	 eax, DWORD PTR tv615[ebp]
  0017e	5b		 pop	 ebx

; 807  :     }

  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN93@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00185	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  0018a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN105@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0018f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN102@Emplace_re:
  00194	cc		 int	 3
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1756 :         auto& _My_data    = _Mypair._Myval2;
; 1757 :         pointer& _Myfirst = _My_data._Myfirst;
; 1758 :         pointer& _Mylast  = _My_data._Mylast;
; 1759 :         pointer& _Myend   = _My_data._Myend;
; 1760 : 
; 1761 :         _My_data._Orphan_all();
; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN2@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN18@Tidy

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN15@Tidy

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN18@Tidy:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1769 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 1771 :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Tidy:
  00065	cc		 int	 3
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 712  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Rightfirst$1$ = -4					; size = 4
__Rightlast$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 555  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 556  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 557  :         auto& _My_data            = _Mypair._Myval2;
; 558  :         const auto& _Right_data   = _Right._Mypair._Myval2;
; 559  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00004	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 556  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 557  :         auto& _My_data            = _Mypair._Myval2;
; 558  :         const auto& _Right_data   = _Right._Mypair._Myval2;
; 559  :         const pointer _Rightfirst = _Right_data._Myfirst;

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]

; 560  :         const pointer _Rightlast  = _Right_data._Mylast;

  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	89 55 fc	 mov	 DWORD PTR __Rightfirst$1$[ebp], edx
  00026	89 45 08	 mov	 DWORD PTR __Rightlast$1$[ebp], eax

; 561  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 562  :         if (_Rightfirst != _Rightlast) {

  00029	3b d0		 cmp	 edx, eax
  0002b	74 6d		 je	 SHORT $LN41@vector

; 563  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  0002d	8b c8		 mov	 ecx, eax
  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	2b ca		 sub	 ecx, edx
  00036	f7 e9		 imul	 ecx
  00038	d1 fa		 sar	 edx, 1
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00041	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00046	77 5b		 ja	 SHORT $LN45@vector
  00048	53		 push	 ebx
  00049	57		 push	 edi

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0004a	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0004d	c1 e7 02	 shl	 edi, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00056	72 0d		 jb	 SHORT $LN18@vector

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005e	83 c4 04	 add	 esp, 4
  00061	8b d8		 mov	 ebx, eax
  00063	eb 13		 jmp	 SHORT $LN17@vector
$LN18@vector:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00065	85 ff		 test	 edi, edi
  00067	74 0d		 je	 SHORT $LN19@vector

; 85   :         return ::operator new(_Bytes);

  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006f	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00072	8b d8		 mov	 ebx, eax
  00074	eb 02		 jmp	 SHORT $LN17@vector
$LN19@vector:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00076	33 db		 xor	 ebx, ebx
$LN17@vector:

; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00078	53		 push	 ebx
  00079	ff 75 08	 push	 DWORD PTR __Rightlast$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1712 :         _Myfirst           = _Newvec;

  0007c	89 1e		 mov	 DWORD PTR [esi], ebx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  0007e	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00081	ff 75 fc	 push	 DWORD PTR __Rightfirst$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1713 :         _Mylast            = _Newvec;

  00084	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  00087	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0008a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1664 :             _Dest += _ULast - _UFirst;

  00092	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 565  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  00095	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00098	5f		 pop	 edi
  00099	5b		 pop	 ebx
$LN41@vector:

; 570  :     }

  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN45@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  000a3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN43@vector:
  000a8	cc		 int	 3
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBoundaryShapeManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBoundaryShapeManager@@UAEPAXI@Z PROC		; CBoundaryShapeManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBoundaryShapeManager@@UAE@XZ ; CBoundaryShapeManager::~CBoundaryShapeManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBoundaryShapeManager@@UAEPAXI@Z ENDP		; CBoundaryShapeManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN5@Destroy
  0000f	90		 npad	 1
$LL6@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00017	83 c6 24	 add	 esi, 36			; 00000024H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Destroy
$LN5@Destroy:
  0001e	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1681 :     }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6c		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 10		 je	 SHORT $LN10@vector
$LL11@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00019	83 c6 24	 add	 esi, 36			; 00000024H
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL11@vector
  00020	8b 37		 mov	 esi, DWORD PTR [edi]
$LN10@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00022	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00025	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	c1 fa 03	 sar	 edx, 3
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  0003c	c1 e0 02	 shl	 eax, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN37@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00049	83 c0 23	 add	 eax, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b f1		 sub	 esi, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c6 fc	 add	 esi, -4			; fffffffcH
  00051	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00054	77 23		 ja	 SHORT $LN34@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b f1		 mov	 esi, ecx
$LN37@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0005f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00065	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00068	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1769 :             _Myend   = nullptr;

  0006f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00076	5f		 pop	 edi

; 717  :     }

  00077	5e		 pop	 esi
  00078	c3		 ret	 0
$LN34@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00079	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@vector:
  0007e	cc		 int	 3
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z PROC ; std::allocator<SBoundaryShape>::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 836  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ENDP ; std::allocator<SBoundaryShape>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
tv796 = 8						; size = 4
_sShape$ = 8						; size = 4
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z PROC ; CBoundaryShapeManager::PointInShape, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 45 08	 mov	 eax, DWORD PTR _sShape$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 171  : {

  00007	53		 push	 ebx
  00008	57		 push	 edi

; 172  : 	bool bInside = false;

  00009	32 db		 xor	 bl, bl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 38		 mov	 edi, DWORD PTR [eax]
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00015	2b cf		 sub	 ecx, edi
  00017	89 7d 08	 mov	 DWORD PTR tv796[ebp], edi
  0001a	f7 e9		 imul	 ecx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  00028	0f 84 a8 00 00
	00		 je	 $LN94@PointInSha
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0002e	f3 0f 10 65 10	 movss	 xmm4, DWORD PTR _fY$[ebp]
  00033	f3 0f 10 75 0c	 movss	 xmm6, DWORD PTR _fX$[ebp]
  00038	56		 push	 esi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@PointInSha:

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00040	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00043	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00048	8b 37		 mov	 esi, DWORD PTR [edi]
  0004a	2b ce		 sub	 ecx, esi
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b fa		 mov	 edi, edx
  00052	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00055	03 fa		 add	 edi, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  00057	74 69		 je	 SHORT $LN2@PointInSha
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00059	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0005c	33 c9		 xor	 ecx, ecx
  0005e	8d 04 85 f4 ff
	ff ff		 lea	 eax, DWORD PTR [eax*4-12]
$LL7@PointInSha:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  00065	f3 0f 10 6c 31
	04		 movss	 xmm5, DWORD PTR [ecx+esi+4]
  0006b	0f 2f e5	 comiss	 xmm4, xmm5
  0006e	72 0b		 jb	 SHORT $LN93@PointInSha
  00070	f3 0f 10 5c 30
	04		 movss	 xmm3, DWORD PTR [eax+esi+4]
  00076	0f 2f dc	 comiss	 xmm3, xmm4
  00079	77 10		 ja	 SHORT $LN92@PointInSha
$LN93@PointInSha:
  0007b	f3 0f 10 5c 30
	04		 movss	 xmm3, DWORD PTR [eax+esi+4]
  00081	0f 2f e3	 comiss	 xmm4, xmm3
  00084	72 32		 jb	 SHORT $LN5@PointInSha
  00086	0f 2f ec	 comiss	 xmm5, xmm4
  00089	76 2d		 jbe	 SHORT $LN5@PointInSha
$LN92@PointInSha:
  0008b	f3 0f 10 14 31	 movss	 xmm2, DWORD PTR [ecx+esi]
  00090	f3 0f 5c dd	 subss	 xmm3, xmm5
  00094	0f 28 cc	 movaps	 xmm1, xmm4
  00097	0f 28 c2	 movaps	 xmm0, xmm2
  0009a	f3 0f 5c cd	 subss	 xmm1, xmm5
  0009e	f3 0f 5c c2	 subss	 xmm0, xmm2
  000a2	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000a6	f3 0f 5e cb	 divss	 xmm1, xmm3
  000aa	f3 0f 58 ca	 addss	 xmm1, xmm2
  000ae	0f 2f ce	 comiss	 xmm1, xmm6
  000b1	76 05		 jbe	 SHORT $LN5@PointInSha

; 180  : 				  (fX < (sShape.m_vContours[k][i][0] - sShape.m_vContours[k][i][0]) * (fY - sShape.m_vContours[k][i][1]) / (sShape.m_vContours[k][j][1] - sShape.m_vContours[k][i][1]) + sShape.m_vContours[k][i][0]))
; 181  : 			{
; 182  : 				bInside = !bInside;

  000b3	84 db		 test	 bl, bl
  000b5	0f 94 c3	 sete	 bl
$LN5@PointInSha:

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  000b8	8b c1		 mov	 eax, ecx
  000ba	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000bd	83 ef 01	 sub	 edi, 1
  000c0	75 a3		 jne	 SHORT $LL7@PointInSha
$LN2@PointInSha:

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  000c2	8b 7d 08	 mov	 edi, DWORD PTR tv796[ebp]
  000c5	83 c7 0c	 add	 edi, 12			; 0000000cH
  000c8	83 6d fc 01	 sub	 DWORD PTR $T1[ebp], 1
  000cc	89 7d 08	 mov	 DWORD PTR tv796[ebp], edi
  000cf	0f 85 6b ff ff
	ff		 jne	 $LL4@PointInSha

; 183  : 			}
; 184  : 		}
; 185  : 	}
; 186  : 
; 187  : 	return bInside;

  000d5	5e		 pop	 esi
$LN94@PointInSha:
  000d6	5f		 pop	 edi

; 188  : }

  000d7	8a c3		 mov	 al, bl
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ENDP ; CBoundaryShapeManager::PointInShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z
_TEXT	SEGMENT
tv88 = 8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z PROC	; CBoundaryShapeManager::RandomPoint, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 196  : 	bool bSuccess = false;

  0000b	32 c9		 xor	 cl, cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00010	2b 53 04	 sub	 edx, DWORD PTR [ebx+4]
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 198  : 	if (m_vBoundaries.size() > 0)

  0001f	74 7b		 je	 SHORT $LN10@RandomPoin

; 199  : 	{
; 200  : 		// pick a random boundary shape
; 201  : 		int nIndex = random_range(0, m_vBoundaries.size() - 1);

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	48		 dec	 eax
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0002c	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0002f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 205  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  00032	f3 0f 10 44 88
	18		 movss	 xmm0, DWORD PTR [eax+ecx*4+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00038	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 205  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  0003b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00041	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00050	8b 75 08	 mov	 esi, DWORD PTR _fX$[ebp]
  00053	d9 1e		 fstp	 DWORD PTR [esi]

; 206  : 		fY = frandom(sShape.m_afMin[1], sShape.m_afMax[1]);

  00055	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  0005a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00060	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _fY$[ebp]

; 207  : 
; 208  : 		// try it
; 209  : 		bSuccess = PointInShape(sShape, fX, fY);

  00072	8b cb		 mov	 ecx, ebx
  00074	d9 5d 08	 fstp	 DWORD PTR tv88[ebp]
  00077	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv88[ebp]
  0007c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00082	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00086	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape

; 210  : 	}
; 211  : 
; 212  : 	return bSuccess;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 213  : }

  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
$LN10@RandomPoin:

; 210  : 	}
; 211  : 
; 212  : 	return bSuccess;

  0009c	8a c1		 mov	 al, cl
  0009e	5b		 pop	 ebx

; 213  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z ENDP	; CBoundaryShapeManager::RandomPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInside@CBoundaryShapeManager@@QAE_NMM@Z
_TEXT	SEGMENT
tv186 = -8						; size = 4
_i$1$ = -4						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z PROC	; CBoundaryShapeManager::PointInside, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  0000f	33 c9		 xor	 ecx, ecx
  00011	32 db		 xor	 bl, bl
  00013	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00019	2b 57 04	 sub	 edx, DWORD PTR [edi+4]
  0001c	f7 ea		 imul	 edx
  0001e	c1 fa 03	 sar	 edx, 3
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00028	74 60		 je	 SHORT $LN14@PointInsid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1563 :         auto& _My_data = _Mypair._Myval2;

  0002a	33 c0		 xor	 eax, eax
  0002c	89 45 f8	 mov	 DWORD PTR tv186[ebp], eax
  0002f	56		 push	 esi
$LL4@PointInsid:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00030	84 db		 test	 bl, bl
  00032	75 4b		 jne	 SHORT $LN15@PointInsid

; 161  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00039	83 ec 08	 sub	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0003c	03 47 04	 add	 eax, DWORD PTR [edi+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 161  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  0003f	8b cf		 mov	 ecx, edi
  00041	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00047	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00057	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 161  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  0005a	8a d8		 mov	 bl, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005c	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0005f	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00064	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
  00067	83 45 f8 24	 add	 DWORD PTR tv186[ebp], 36 ; 00000024H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006b	f7 e9		 imul	 ecx
  0006d	c1 fa 03	 sar	 edx, 3
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00077	39 45 fc	 cmp	 DWORD PTR _i$1$[ebp], eax
  0007a	8b 45 f8	 mov	 eax, DWORD PTR tv186[ebp]
  0007d	72 b1		 jb	 SHORT $LL4@PointInsid
$LN15@PointInsid:
  0007f	5e		 pop	 esi
  00080	5f		 pop	 edi

; 162  : 
; 163  : 	return bInside;

  00081	8a c3		 mov	 al, bl

; 164  : }

  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
$LN14@PointInsid:
  0008a	5f		 pop	 edi

; 162  : 
; 163  : 	return bInside;

  0008b	8a c3		 mov	 al, bl

; 164  : }

  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z ENDP	; CBoundaryShapeManager::PointInside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_nNumPoints$2 = -140					; size = 4
_nNumContours$3 = -136					; size = 4
_nNumBoundaries$4 = -132				; size = 4
$T5 = -128						; size = 1
_this$GSCopy$ = -128					; size = 4
_i$1$ = -124						; size = 4
_j$1$ = -120						; size = 4
_pFile$1$ = -116					; size = 4
_this$GSCopy$1$ = -112					; size = 4
_bSuccess$ = -106					; size = 1
_bSuccess$1$ = -105					; size = 1
$T6 = -104						; size = 24
_sPoint$7 = -92						; size = 12
$T8 = -80						; size = 24
_vPoints$9 = -68					; size = 12
_sShape$10 = -56					; size = 36
$T11 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pszFilename$ = 8					; size = 4
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z PROC	; CBoundaryShapeManager::LoadBsfFile, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b f9		 mov	 edi, ecx
  00033	89 7d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00036	8b 75 08	 mov	 esi, DWORD PTR _pszFilename$[ebp]

; 52   : 	bool bSuccess = true;

  00039	b0 01		 mov	 al, 1

; 53   : 	try
; 54   : 	{
; 55   : 		FILE* pFile = fopen(pszFilename, "rb");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00040	56		 push	 esi
  00041	89 7d 80	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00044	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  00047	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00051	e8 00 00 00 00	 call	 _fopen
  00056	83 c4 08	 add	 esp, 8
  00059	89 45 8c	 mov	 DWORD PTR _pFile$1$[ebp], eax

; 56   : 		if (pFile)

  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 5e 03 00
	00		 je	 $LN15@LoadBsfFil

; 57   : 		{
; 58   : 			// number of boundary shapes
; 59   : 			unsigned int nNumBoundaries;
; 60   : 			if (fread(&nNumBoundaries, sizeof(unsigned int), 1, pFile) == 1)

  00064	8b f0		 mov	 esi, eax
  00066	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _nNumBoundaries$4[ebp]
  0006c	56		 push	 esi
  0006d	6a 01		 push	 1
  0006f	6a 04		 push	 4
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _fread
  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	83 f8 01	 cmp	 eax, 1
  0007d	0f 85 1b 03 00
	00		 jne	 $LN17@LoadBsfFil

; 62   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  00083	33 c0		 xor	 eax, eax
$LN369@LoadBsfFil:
  00085	89 45 84	 mov	 DWORD PTR _i$1$[ebp], eax
  00088	3b 85 7c ff ff
	ff		 cmp	 eax, DWORD PTR _nNumBoundaries$4[ebp]
  0008e	0f 83 1d 03 00
	00		 jae	 $LN18@LoadBsfFil
  00094	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  00098	0f 84 13 03 00
	00		 je	 $LN18@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0009e	33 ff		 xor	 edi, edi
  000a0	89 7d c8	 mov	 DWORD PTR _sShape$10[ebp], edi
  000a3	89 7d cc	 mov	 DWORD PTR _sShape$10[ebp+4], edi
  000a6	89 7d d0	 mov	 DWORD PTR _sShape$10[ebp+8], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 68   : 					if (fread(&nNumContours, sizeof(unsigned int), 1, pFile) == 1)

  000a9	56		 push	 esi
  000aa	6a 01		 push	 1
  000ac	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _nNumContours$3[ebp]
  000b2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000b6	6a 04		 push	 4
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _fread
  000be	83 c4 10	 add	 esp, 16			; 00000010H
  000c1	83 f8 01	 cmp	 eax, 1
  000c4	0f 85 49 02 00
	00		 jne	 $LN19@LoadBsfFil

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  000ca	33 c0		 xor	 eax, eax
$LN368@LoadBsfFil:
  000cc	89 45 88	 mov	 DWORD PTR _j$1$[ebp], eax
  000cf	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _nNumContours$3[ebp]
  000d5	0f 83 07 02 00
	00		 jae	 $LN6@LoadBsfFil
  000db	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  000df	0f 84 fd 01 00
	00		 je	 $LN6@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000e5	33 f6		 xor	 esi, esi
  000e7	33 ff		 xor	 edi, edi
  000e9	89 7d bc	 mov	 DWORD PTR _vPoints$9[ebp], edi
  000ec	89 75 c0	 mov	 DWORD PTR _vPoints$9[ebp+4], esi
  000ef	89 75 c4	 mov	 DWORD PTR _vPoints$9[ebp+8], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 75   : 							if (fread(&nNumPoints, sizeof(unsigned int), 1, pFile) == 1)

  000f2	ff 75 8c	 push	 DWORD PTR _pFile$1$[ebp]
  000f5	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _nNumPoints$2[ebp]
  000fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000ff	6a 01		 push	 1
  00101	6a 04		 push	 4
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _fread
  00109	83 c4 10	 add	 esp, 16			; 00000010H
  0010c	83 f8 01	 cmp	 eax, 1
  0010f	0f 85 4a 01 00
	00		 jne	 $LN21@LoadBsfFil
  00115	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL10@LoadBsfFil:

; 76   : 							{
; 77   : 								// read the points
; 78   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  00120	3b bd 74 ff ff
	ff		 cmp	 edi, DWORD PTR _nNumPoints$2[ebp]
  00126	0f 83 07 01 00
	00		 jae	 $LN9@LoadBsfFil
  0012c	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  00130	0f 84 fd 00 00
	00		 je	 $LN9@LoadBsfFil

; 79   : 								{
; 80   : 									SPoint sPoint;
; 81   : 
; 82   : 									if (fread(sPoint.m_afData, sizeof(float), 3, pFile) == 3)

  00136	ff 75 8c	 push	 DWORD PTR _pFile$1$[ebp]
  00139	8d 45 a4	 lea	 eax, DWORD PTR _sPoint$7[ebp]
  0013c	6a 03		 push	 3
  0013e	6a 04		 push	 4
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _fread
  00146	83 c4 10	 add	 esp, 16			; 00000010H
  00149	83 f8 03	 cmp	 eax, 3
  0014c	0f 85 c1 00 00
	00		 jne	 $LN23@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00152	3b 75 c4	 cmp	 esi, DWORD PTR _vPoints$9[ebp+8]
  00155	74 17		 je	 SHORT $LN58@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00157	f3 0f 7e 45 a4	 movq	 xmm0, QWORD PTR _sPoint$7[ebp]
  0015c	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00160	8b 45 ac	 mov	 eax, DWORD PTR _sPoint$7[ebp+8]
  00163	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00166	83 c6 0c	 add	 esi, 12			; 0000000cH
  00169	89 75 c0	 mov	 DWORD PTR _vPoints$9[ebp+4], esi

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016c	eb 10		 jmp	 SHORT $LN57@LoadBsfFil
$LN58@LoadBsfFil:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0016e	8d 45 a4	 lea	 eax, DWORD PTR _sPoint$7[ebp]
  00171	50		 push	 eax
  00172	56		 push	 esi
  00173	8d 4d bc	 lea	 ecx, DWORD PTR _vPoints$9[ebp]
  00176	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
  0017b	8b 75 c0	 mov	 esi, DWORD PTR _vPoints$9[ebp+4]
$LN57@LoadBsfFil:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 87   : 										if (j == 0 && k == 0)

  0017e	83 7d 88 00	 cmp	 DWORD PTR _j$1$[ebp], 0
  00182	75 22		 jne	 SHORT $LN25@LoadBsfFil
  00184	85 ff		 test	 edi, edi
  00186	75 1e		 jne	 SHORT $LN25@LoadBsfFil

; 88   : 										{
; 89   : 											// first point of this shape
; 90   : 											memcpy(sShape.m_afMin, sPoint.m_afData, 3 * sizeof(float));

  00188	f3 0f 7e 45 a4	 movq	 xmm0, QWORD PTR _sPoint$7[ebp]
  0018d	47		 inc	 edi
  0018e	8b 45 ac	 mov	 eax, DWORD PTR _sPoint$7[ebp+8]
  00191	66 0f d6 45 d4	 movq	 QWORD PTR _sShape$10[ebp+12], xmm0
  00196	89 45 dc	 mov	 DWORD PTR _sShape$10[ebp+20], eax

; 91   : 											memcpy(sShape.m_afMax, sPoint.m_afData, 3 * sizeof(float));

  00199	66 0f d6 45 e0	 movq	 QWORD PTR _sShape$10[ebp+24], xmm0
  0019e	89 45 e8	 mov	 DWORD PTR _sShape$10[ebp+32], eax
  001a1	e9 7a ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN25@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001a6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sShape$10[ebp+12]
  001ab	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _sPoint$7[ebp]
  001b0	0f 2f c1	 comiss	 xmm0, xmm1
  001b3	76 07		 jbe	 SHORT $LN27@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001b5	f3 0f 11 4d d4	 movss	 DWORD PTR _sShape$10[ebp+12], xmm1
  001ba	eb 0b		 jmp	 SHORT $LN11@LoadBsfFil
$LN27@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001bc	0f 2f 4d e0	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+24]
  001c0	76 05		 jbe	 SHORT $LN11@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001c2	f3 0f 11 4d e0	 movss	 DWORD PTR _sShape$10[ebp+24], xmm1
$LN11@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001c7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _sShape$10[ebp+16]
  001cc	f3 0f 10 4d a8	 movss	 xmm1, DWORD PTR _sPoint$7[ebp+4]
  001d1	0f 2f c1	 comiss	 xmm0, xmm1
  001d4	76 07		 jbe	 SHORT $LN355@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001d6	f3 0f 11 4d d8	 movss	 DWORD PTR _sShape$10[ebp+16], xmm1
  001db	eb 0b		 jmp	 SHORT $LN356@LoadBsfFil
$LN355@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001dd	0f 2f 4d e4	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+28]
  001e1	76 05		 jbe	 SHORT $LN356@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001e3	f3 0f 11 4d e4	 movss	 DWORD PTR _sShape$10[ebp+28], xmm1
$LN356@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001e8	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sShape$10[ebp+20]
  001ed	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _sPoint$7[ebp+8]
  001f2	0f 2f c1	 comiss	 xmm0, xmm1
  001f5	76 0b		 jbe	 SHORT $LN358@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001f7	f3 0f 11 4d dc	 movss	 DWORD PTR _sShape$10[ebp+20], xmm1
  001fc	47		 inc	 edi
  001fd	e9 1e ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN358@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  00202	0f 2f 4d e8	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+32]
  00206	76 25		 jbe	 SHORT $LN8@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  00208	f3 0f 11 4d e8	 movss	 DWORD PTR _sShape$10[ebp+32], xmm1
  0020d	47		 inc	 edi
  0020e	e9 0d ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN23@LoadBsfFil:

; 107  : 										m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read point";

  00213	8b 45 90	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00216	6a 43		 push	 67			; 00000043H
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 107  : 										m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read point";

  0021d	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00220	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 108  : 										bSuccess = false;

  00225	32 c0		 xor	 al, al
  00227	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  0022a	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN8@LoadBsfFil:

; 76   : 							{
; 77   : 								// read the points
; 78   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  0022d	47		 inc	 edi
  0022e	e9 ed fe ff ff	 jmp	 $LL10@LoadBsfFil
$LN9@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00233	8b 75 cc	 mov	 esi, DWORD PTR _sShape$10[ebp+4]
  00236	8d 45 bc	 lea	 eax, DWORD PTR _vPoints$9[ebp]
  00239	50		 push	 eax
  0023a	3b 75 d0	 cmp	 esi, DWORD PTR _sShape$10[ebp+8]
  0023d	74 12		 je	 SHORT $LN73@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0023f	8b ce		 mov	 ecx, esi
  00241	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00246	8b 7d bc	 mov	 edi, DWORD PTR _vPoints$9[ebp]

; 729  :         ++_Mylast;

  00249	83 c6 0c	 add	 esi, 12			; 0000000cH
  0024c	89 75 cc	 mov	 DWORD PTR _sShape$10[ebp+4], esi

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0024f	eb 28		 jmp	 SHORT $LN22@LoadBsfFil
$LN73@LoadBsfFil:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00251	56		 push	 esi
  00252	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
  00255	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 113  : 							}

  0025a	8b 7d bc	 mov	 edi, DWORD PTR _vPoints$9[ebp]
  0025d	eb 1a		 jmp	 SHORT $LN22@LoadBsfFil
$LN21@LoadBsfFil:

; 116  : 								m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of points";

  0025f	8b 45 90	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00262	6a 4e		 push	 78			; 0000004eH
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 116  : 								m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of points";

  00269	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0026c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 117  : 								bSuccess = false;

  00271	32 c0		 xor	 al, al
  00273	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  00276	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN22@LoadBsfFil:

; 118  : 							}
; 119  : 
; 120  : 						}

  00279	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  0027d	85 ff		 test	 edi, edi
  0027f	74 58		 je	 SHORT $LN5@LoadBsfFil

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00281	8b 4d c4	 mov	 ecx, DWORD PTR _vPoints$9[ebp+8]
  00284	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00289	2b cf		 sub	 ecx, edi
  0028b	f7 e9		 imul	 ecx
  0028d	d1 fa		 sar	 edx, 1
  0028f	8b c2		 mov	 eax, edx
  00291	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00294	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00296	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00299	8b c7		 mov	 eax, edi
  0029b	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0029e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002a4	72 14		 jb	 SHORT $LN104@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a6	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]
  002a9	83 c1 23	 add	 ecx, 35			; 00000023H
  002ac	2b c7		 sub	 eax, edi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ae	83 c0 fc	 add	 eax, -4			; fffffffcH
  002b1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b4	0f 87 af 02 00
	00		 ja	 $LN371@LoadBsfFil
$LN104@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002ba	51		 push	 ecx
  002bb	57		 push	 edi
  002bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002c1	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  002c4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vPoints$9[ebp], 0

; 1768 :             _Mylast  = nullptr;

  002cb	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _vPoints$9[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  002d2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vPoints$9[ebp+8], 0
$LN5@LoadBsfFil:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  002d9	8b 45 88	 mov	 eax, DWORD PTR _j$1$[ebp]
  002dc	40		 inc	 eax
  002dd	e9 ea fd ff ff	 jmp	 $LN368@LoadBsfFil
$LN6@LoadBsfFil:

; 121  : 						m_vBoundaries.push_back(sShape);

  002e2	8b 75 90	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  002e5	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 121  : 						m_vBoundaries.push_back(sShape);

  002e8	83 c6 04	 add	 esi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  002eb	51		 push	 ecx
  002ec	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  002ef	50		 push	 eax
  002f0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  002f3	74 12		 je	 SHORT $LN113@LoadBsfFil

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  002f5	56		 push	 esi
  002f6	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  002fb	8b 7d c8	 mov	 edi, DWORD PTR _sShape$10[ebp]

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  002fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 729  :         ++_Mylast;

  00301	83 46 04 24	 add	 DWORD PTR [esi+4], 36	; 00000024H

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00305	eb 26		 jmp	 SHORT $LN20@LoadBsfFil
$LN113@LoadBsfFil:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00307	8b ce		 mov	 ecx, esi
  00309	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 122  : 					}

  0030e	8b 7d c8	 mov	 edi, DWORD PTR _sShape$10[ebp]
  00311	eb 1a		 jmp	 SHORT $LN20@LoadBsfFil
$LN19@LoadBsfFil:

; 125  : 						m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of contours";

  00313	8b 45 90	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00316	6a 50		 push	 80			; 00000050H
  00318	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 125  : 						m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of contours";

  0031d	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00320	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 126  : 						bSuccess = false;

  00325	32 c0		 xor	 al, al
  00327	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  0032a	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN20@LoadBsfFil:

; 127  : 					}
; 128  : 				}

  0032d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00331	85 ff		 test	 edi, edi
  00333	74 5d		 je	 SHORT $LN2@LoadBsfFil

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00335	8b f7		 mov	 esi, edi
  00337	3b 75 cc	 cmp	 esi, DWORD PTR _sShape$10[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0033a	74 13		 je	 SHORT $LN135@LoadBsfFil
  0033c	0f 1f 40 00	 npad	 4
$LL136@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00340	8b ce		 mov	 ecx, esi
  00342	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00347	83 c6 0c	 add	 esi, 12			; 0000000cH
  0034a	3b 75 cc	 cmp	 esi, DWORD PTR _sShape$10[ebp+4]
  0034d	75 f1		 jne	 SHORT $LL136@LoadBsfFil
$LN135@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0034f	8b 4d d0	 mov	 ecx, DWORD PTR _sShape$10[ebp+8]
  00352	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00357	2b cf		 sub	 ecx, edi
  00359	f7 e9		 imul	 ecx
  0035b	d1 fa		 sar	 edx, 1
  0035d	8b c2		 mov	 eax, edx
  0035f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00362	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00364	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00367	8b c7		 mov	 eax, edi
  00369	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0036c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00372	72 14		 jb	 SHORT $LN159@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00374	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]
  00377	83 c1 23	 add	 ecx, 35			; 00000023H
  0037a	2b c7		 sub	 eax, edi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0037c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0037f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00382	0f 87 e6 01 00
	00		 ja	 $LN372@LoadBsfFil
$LN159@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00388	51		 push	 ecx
  00389	57		 push	 edi
  0038a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0038f	83 c4 08	 add	 esp, 8
$LN2@LoadBsfFil:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 62   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  00392	8b 45 84	 mov	 eax, DWORD PTR _i$1$[ebp]
  00395	8b 75 8c	 mov	 esi, DWORD PTR _pFile$1$[ebp]
  00398	40		 inc	 eax
  00399	e9 e7 fc ff ff	 jmp	 $LN369@LoadBsfFil
$LN17@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0039e	6a 52		 push	 82			; 00000052H
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 132  : 				m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of boundaries";

  003a5	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003a8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 133  : 				bSuccess = false;

  003ad	c6 45 97 00	 mov	 BYTE PTR _bSuccess$1$[ebp], 0
$LN18@LoadBsfFil:

; 134  : 			}
; 135  : 			fclose(pFile);

  003b1	56		 push	 esi
  003b2	e8 00 00 00 00	 call	 _fclose

; 136  : 		}

  003b7	8a 45 97	 mov	 al, BYTE PTR _bSuccess$1$[ebp]
  003ba	83 c4 04	 add	 esp, 4
  003bd	e9 89 01 00 00	 jmp	 $LN109@LoadBsfFil
$LN15@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003c2	8b ce		 mov	 ecx, esi

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  003c4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  003cb	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  003d2	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003d9	c6 45 b0 00	 mov	 BYTE PTR $T8[ebp], 0

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003dd	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL364@LoadBsfFil:
  003e0	8a 01		 mov	 al, BYTE PTR [ecx]
  003e2	41		 inc	 ecx
  003e3	84 c0		 test	 al, al
  003e5	75 f9		 jne	 SHORT $LL364@LoadBsfFil
  003e7	2b ca		 sub	 ecx, edx

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003e9	51		 push	 ecx
  003ea	56		 push	 esi
  003eb	8d 4d b0	 lea	 ecx, DWORD PTR $T8[ebp]
  003ee	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003f3	6a 3e		 push	 62			; 0000003eH

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  003f5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003fc	8d 4d 98	 lea	 ecx, DWORD PTR $T6[ebp]
  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  00404	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00408	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0040f	c7 45 ac 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00416	c6 45 98 00	 mov	 BYTE PTR $T6[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0041a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0041f	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  00422	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4766 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00426	50		 push	 eax
  00427	8d 45 98	 lea	 eax, DWORD PTR $T6[ebp]
  0042a	50		 push	 eax
  0042b	ff 75 80	 push	 DWORD PTR $T5[ebp]
  0042e	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
  00431	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  00436	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2850 :         if (this != _STD addressof(_Right)) {

  00439	8d 45 d4	 lea	 eax, DWORD PTR $T11[ebp]
  0043c	3b f0		 cmp	 esi, eax
  0043e	74 54		 je	 SHORT $LN249@LoadBsfFil

; 2319 :         return _BUF_SIZE <= _Myres;

  00440	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00443	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00446	72 2b		 jb	 SHORT $LN221@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00448	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0044a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0044b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00451	72 16		 jb	 SHORT $LN231@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00453	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00456	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00459	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0045b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0045e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00461	0f 87 0c 01 00
	00		 ja	 $LN324@LoadBsfFil

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00467	8b c2		 mov	 eax, edx
$LN231@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00469	51		 push	 ecx
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00470	83 c4 08	 add	 esp, 8
$LN221@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00473	0f 10 45 d4	 movups	 xmm0, XMMWORD PTR $T11[ebp]

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00477	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0047e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00485	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00488	f3 0f 7e 45 e4	 movq	 xmm0, QWORD PTR $T11[ebp+16]
  0048d	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 2319 :         return _BUF_SIZE <= _Myres;

  00492	eb 34		 jmp	 SHORT $LN263@LoadBsfFil
$LN249@LoadBsfFil:
  00494	8b 55 e8	 mov	 edx, DWORD PTR $T11[ebp+20]
  00497	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0049a	72 2c		 jb	 SHORT $LN263@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0049c	8b 4d d4	 mov	 ecx, DWORD PTR $T11[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0049f	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004a0	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004a2	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004a8	72 14		 jb	 SHORT $LN273@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004aa	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004ad	83 c2 23	 add	 edx, 35			; 00000023H
  004b0	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  004b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004b8	0f 87 b5 00 00
	00		 ja	 $LN324@LoadBsfFil
$LN273@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  004be	52		 push	 edx
  004bf	51		 push	 ecx
  004c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004c5	83 c4 08	 add	 esp, 8
$LN263@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  004c8	8b 55 ac	 mov	 edx, DWORD PTR $T6[ebp+20]
  004cb	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004ce	72 2c		 jb	 SHORT $LN290@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004d0	8b 4d 98	 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004d3	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004d4	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004d6	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004dc	72 14		 jb	 SHORT $LN300@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004de	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004e1	83 c2 23	 add	 edx, 35			; 00000023H
  004e4	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004e6	83 c0 fc	 add	 eax, -4			; fffffffcH
  004e9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004ec	0f 87 81 00 00
	00		 ja	 $LN324@LoadBsfFil
$LN300@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  004f2	52		 push	 edx
  004f3	51		 push	 ecx
  004f4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004f9	83 c4 08	 add	 esp, 8
$LN290@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  004fc	8b 55 c4	 mov	 edx, DWORD PTR $T8[ebp+20]
  004ff	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00502	72 28		 jb	 SHORT $LN317@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00504	8b 4d b0	 mov	 ecx, DWORD PTR $T8[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00507	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00508	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0050a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00510	72 10		 jb	 SHORT $LN327@LoadBsfFil

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00512	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00515	83 c2 23	 add	 edx, 35			; 00000023H
  00518	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0051a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0051d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00520	77 51		 ja	 SHORT $LN324@LoadBsfFil
$LN327@LoadBsfFil:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00522	52		 push	 edx
  00523	51		 push	 ecx
  00524	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00529	83 c4 08	 add	 esp, 8
$LN317@LoadBsfFil:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 140  : 			bSuccess = false;

  0052c	32 c0		 xor	 al, al

; 141  : 		}
; 142  : 	}

  0052e	eb 1b		 jmp	 SHORT $LN109@LoadBsfFil
__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0:

; 146  : 		m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Unknown exception";

  00530	8b 4d 80	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00533	6a 40		 push	 64			; 00000040H
  00535	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 146  : 		m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Unknown exception";

  0053a	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0053d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 147  : 	}

  00542	b8 00 00 00 00	 mov	 eax, $LN365@LoadBsfFil
  00547	c3		 ret	 0
$LN365@LoadBsfFil:
  00548	8a 45 96	 mov	 al, BYTE PTR _bSuccess$[ebp]
$LN109@LoadBsfFil:

; 150  : }

  0054b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0054e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00555	59		 pop	 ecx
  00556	5f		 pop	 edi
  00557	5e		 pop	 esi
  00558	5b		 pop	 ebx
  00559	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0055c	33 cd		 xor	 ecx, ebp
  0055e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00563	8b e5		 mov	 esp, ebp
  00565	5d		 pop	 ebp
  00566	c2 04 00	 ret	 4
$LN371@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00569	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN372@LoadBsfFil:
  0056e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN324@LoadBsfFil:
  00573	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN367@LoadBsfFil:
  00578	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SBoundaryShape@@QAE@XZ
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR _vPoints$9[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T8[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5:
  00018	8d 4d 98	 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z ENDP	; CBoundaryShapeManager::LoadBsfFile
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??1CBoundaryShapeManager@@UAE@XZ
_TEXT	SEGMENT
??1CBoundaryShapeManager@@UAE@XZ PROC			; CBoundaryShapeManager::~CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 43   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBoundaryShapeManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00009	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 28		 jb	 SHORT $LN15@CBoundaryS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN25@CBoundaryS

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 27		 ja	 SHORT $LN22@CBoundaryS

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN25@CBoundaryS:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN15@CBoundaryS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00039	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  00040	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00043	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004a	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  0004e	5e		 pop	 esi
  0004f	e9 00 00 00 00	 jmp	 ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
$LN22@CBoundaryS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@CBoundaryS:
  00059	cc		 int	 3
??1CBoundaryShapeManager@@UAE@XZ ENDP			; CBoundaryShapeManager::~CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??0CBoundaryShapeManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBoundaryShapeManager@@QAE@XZ PROC			; CBoundaryShapeManager::CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBoundaryShapeManager@@6B@

; 36   : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00021	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 35   : {

  00028	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  0002b	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00032	c7 41 24 0f 00
	00 00		 mov	 DWORD PTR [ecx+36], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00039	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 36   : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0CBoundaryShapeManager@@QAE@XZ ENDP			; CBoundaryShapeManager::CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1SBoundaryShape@@QAE@XZ
_TEXT	SEGMENT
??1SBoundaryShape@@QAE@XZ PROC				; SBoundaryShape::~SBoundaryShape, COMDAT
; _this$ = ecx

; 712  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
??1SBoundaryShape@@QAE@XZ ENDP				; SBoundaryShape::~SBoundaryShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1756 :         auto& _My_data    = _Mypair._Myval2;
; 1757 :         pointer& _Myfirst = _My_data._Myfirst;
; 1758 :         pointer& _Mylast  = _My_data._Mylast;
; 1759 :         pointer& _Myend   = _My_data._Myend;
; 1760 : 
; 1761 :         _My_data._Orphan_all();
; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6b		 je	 SHORT $LN2@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 10		 je	 SHORT $LN8@Tidy
$LL9@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00019	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL9@Tidy
  00020	8b 37		 mov	 esi, DWORD PTR [edi]
$LN8@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00022	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00025	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	d1 fa		 sar	 edx, 1
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00038	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0003b	c1 e0 02	 shl	 eax, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00043	72 12		 jb	 SHORT $LN32@Tidy

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00045	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00048	83 c0 23	 add	 eax, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004b	2b f1		 sub	 esi, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	83 c6 fc	 add	 esi, -4			; fffffffcH
  00050	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00053	77 23		 ja	 SHORT $LN29@Tidy

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00055	8b f1		 mov	 esi, ecx
$LN32@Tidy:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0005e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00064	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00067	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1769 :             _Myend   = nullptr;

  0006e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 1771 :     }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	c3		 ret	 0
$LN29@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00078	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN40@Tidy:
  0007d	cc		 int	 3
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN5@Destroy
  0000f	90		 npad	 1
$LL6@Destroy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00017	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Destroy
$LN5@Destroy:
  0001e	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1681 :     }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z PROC ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 836  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ENDP ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$1$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2672 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00011	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00017	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2673 :         auto& _My_data    = _Mypair._Myval2;
; 2674 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2675 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2676 :         _Left_data._Orphan_all();
; 2677 :         _Right_data._Orphan_all();
; 2678 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 2679 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2680 : 
; 2681 :         const auto _Left_capacity  = _Left_data._Myres;
; 2682 :         const auto _Right_capacity = _Right_data._Myres;
; 2683 :         // overflow is OK due to max_size() checks:
; 2684 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2685 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2686 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0004b	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  0004e	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00053	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  00058	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0005f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2296 :         value_type* _Result = _Bx._Buf;

  00069	8b f3		 mov	 esi, ebx

; 2319 :         return _BUF_SIZE <= _Myres;

  0006b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN29@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN29@basic_stri:

; 2319 :         return _BUF_SIZE <= _Myres;

  00073	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN34@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN34@basic_stri:

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2687 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2688 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2689 :             _Take_contents(_Left);
; 2690 :             const auto _Ptr = _My_data._Myptr();
; 2691 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	57		 push	 edi
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2692 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00092	8b c3		 mov	 eax, ebx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2693 :             return;
; 2694 :         }
; 2695 : 
; 2696 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2697 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000ad	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000b2	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  000b7	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  000be	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2698 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2699 :             // At this point, we have tested:
; 2700 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2701 :             // therefore: (by De Morgan's Laws)
; 2702 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2703 :             // therefore: (by the distributive property)
; 2704 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2705 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2706 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2707 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2708 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2709 :             _Take_contents(_Right);
; 2710 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	57		 push	 edi

; 2711 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  000d7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN57@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 36		 mov	 esi, DWORD PTR [esi]
$LN57@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2712 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2713 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 2739 :         _Proxy._Release();
; 2740 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000f3	8b c3		 mov	 eax, ebx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2714 :             return;
; 2715 :         }
; 2716 : 
; 2717 :         // can't use either buffer, reallocate
; 2718 :         const auto _Max = max_size();
; 2719 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN64@basic_stri

; 4490 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$1$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN64@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2726 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN72@basic_stri
$LN94@basic_stri:

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN72@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN73@basic_stri

; 85   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 85   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN71@basic_stri
$LN73@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN71@basic_stri:

; 2734 :         _My_data._Mysize = _New_size;

  00172	8b 7d 0c	 mov	 edi, DWORD PTR __New_size$1$[ebp]
  00175	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2297 :         if (_Large_string_engaged()) {

  00178	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 2733 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 13		 mov	 DWORD PTR [ebx], edx

; 2735 :         _My_data._Myres  = _New_capacity;

  0017d	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 2319 :         return _BUF_SIZE <= _Myres;

  00180	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN78@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 36		 mov	 esi, DWORD PTR [esi]
$LN78@basic_stri:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	56		 push	 esi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2319 :         return _BUF_SIZE <= _Myres;

  00193	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN85@basic_stri

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 2736 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 2737 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2738 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	57		 push	 edi
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 2739 :         _Proxy._Release();
; 2740 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c3		 mov	 eax, ebx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2720 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
