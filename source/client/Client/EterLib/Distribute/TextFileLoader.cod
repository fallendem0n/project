; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Distribute\TextFileLoader.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_isCacheMode@CTextFileLoader@@1_NA		; CTextFileLoader::ms_isCacheMode
PUBLIC	??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`vftable'
PUBLIC	??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z:PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
?ms_isCacheMode@CTextFileLoader@@1_NA DB 01H DUP (?)	; CTextFileLoader::ms_isCacheMode
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD 00H ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ DD 00H ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
PUBLIC	?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::SetGroupName
PUBLIC	?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ; CTextFileLoader::SGroupNode::IsGroupNameKey
PUBLIC	?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CTextFileLoader::SGroupNode::GetGroupName
PUBLIC	?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ; CTextFileLoader::SGroupNode::GetTokenVector
PUBLIC	?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::IsExistTokenVector
PUBLIC	?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
PUBLIC	??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
PUBLIC	?_Reallocate_exactly@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXI@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
PUBLIC	?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ	; CTextFileLoader::SGroupNode::New
PUBLIC	?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z	; CTextFileLoader::SGroupNode::Delete
PUBLIC	?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ; CTextFileLoader::SGroupNode::DestroySystem
PUBLIC	??0SGroupNode@CTextFileLoader@@QAE@XZ		; CTextFileLoader::SGroupNode::SGroupNode
PUBLIC	??1SGroupNode@CTextFileLoader@@QAE@XZ		; CTextFileLoader::SGroupNode::~SGroupNode
PUBLIC	?DestroySystem@CTextFileLoader@@SAXXZ		; CTextFileLoader::DestroySystem
PUBLIC	?SetCacheMode@CTextFileLoader@@SAXXZ		; CTextFileLoader::SetCacheMode
PUBLIC	?Cache@CTextFileLoader@@SAPAV1@PBD@Z		; CTextFileLoader::Cache
PUBLIC	??0CTextFileLoader@@QAE@XZ			; CTextFileLoader::CTextFileLoader
PUBLIC	??1CTextFileLoader@@UAE@XZ			; CTextFileLoader::~CTextFileLoader
PUBLIC	?Destroy@CTextFileLoader@@QAEXXZ		; CTextFileLoader::Destroy
PUBLIC	?Load@CTextFileLoader@@QAE_NPBD@Z		; CTextFileLoader::Load
PUBLIC	?GetFileName@CTextFileLoader@@QAEPBDXZ		; CTextFileLoader::GetFileName
PUBLIC	?IsEmpty@CTextFileLoader@@QAE_NXZ		; CTextFileLoader::IsEmpty
PUBLIC	?SetTop@CTextFileLoader@@QAEXXZ			; CTextFileLoader::SetTop
PUBLIC	?GetChildNodeCount@CTextFileLoader@@QAEKXZ	; CTextFileLoader::GetChildNodeCount
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHPBD@Z	; CTextFileLoader::SetChildNode
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CTextFileLoader::SetChildNode
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHK@Z		; CTextFileLoader::SetChildNode
PUBLIC	?SetParentNode@CTextFileLoader@@QAEHXZ		; CTextFileLoader::SetParentNode
PUBLIC	?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::GetCurrentNodeName
PUBLIC	?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::IsToken
PUBLIC	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
PUBLIC	?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
PUBLIC	?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z ; CTextFileLoader::GetTokenByte
PUBLIC	?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CTextFileLoader::GetTokenWord
PUBLIC	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
PUBLIC	?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ; CTextFileLoader::GetTokenDoubleWord
PUBLIC	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
PUBLIC	?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z ; CTextFileLoader::GetTokenVector2
PUBLIC	?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
PUBLIC	?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z ; CTextFileLoader::GetTokenVector4
PUBLIC	?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenPosition
PUBLIC	?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z ; CTextFileLoader::GetTokenQuaternion
PUBLIC	?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z ; CTextFileLoader::GetTokenDirection
PUBLIC	?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z ; CTextFileLoader::GetTokenColor
PUBLIC	?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z ; CTextFileLoader::GetTokenColor
PUBLIC	?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
PUBLIC	?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ; CTextFileLoader::__DestroyGroupNodeVector
PUBLIC	?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
PUBLIC	??_GCTextFileLoader@@UAEPAXI@Z			; CTextFileLoader::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
PUBLIC	??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
PUBLIC	?Delete@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@KAXPAUSGroupNode@CTextFileLoader@@@Z ; CDynamicPool<CTextFileLoader::SGroupNode>::Delete
PUBLIC	??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A ; CTextFileLoader::SGroupNode::ms_kPool
PUBLIC	?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
PUBLIC	??_7CTextFileLoader@@6B@			; CTextFileLoader::`vftable'
PUBLIC	??_C@_06FJKEMHGD@global@			; `string'
PUBLIC	??_C@_02OJDBNLEE@?5?7@				; `string'
PUBLIC	??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@ ; `string'
PUBLIC	??_C@_05MGJOOGAJ@group@				; `string'
PUBLIC	??_C@_04DONFEANM@list@				; `string'
PUBLIC	??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@ ; `string'
PUBLIC	??_C@_06POANKNEN@?$CFs?$CF02u@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_R4CTextFileLoader@@6B@			; CTextFileLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTextFileLoader@@@8			; CTextFileLoader `RTTI Type Descriptor'
PUBLIC	??_R3CTextFileLoader@@8				; CTextFileLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTextFileLoader@@8				; CTextFileLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTextFileLoader@@8		; CTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine
EXTRN	?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine2
EXTRN	??_ECTextFileLoader@@UAEPAXI@Z:PROC		; CTextFileLoader::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A DQ 01H DUP (?) ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kMap_dwNameKey_pkTextFileLoader$initializer$@CTextFileLoader@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ; ??ms_kMap_dwNameKey_pkTextFileLoader$initializer$@CTextFileLoader@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CTextFileLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTextFileLoader@@8 DD FLAT:??_R0?AVCTextFileLoader@@@8 ; CTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CTextFileLoader@@8
rdata$r	SEGMENT
??_R2CTextFileLoader@@8 DD FLAT:??_R1A@?0A@EA@CTextFileLoader@@8 ; CTextFileLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTextFileLoader@@8
rdata$r	SEGMENT
??_R3CTextFileLoader@@8 DD 00H				; CTextFileLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTextFileLoader@@@8
data$rs	SEGMENT
??_R0?AVCTextFileLoader@@@8 DD FLAT:??_7type_info@@6B@	; CTextFileLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTextFileLoader@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTextFileLoader@@6B@
rdata$r	SEGMENT
??_R4CTextFileLoader@@6B@ DD 00H			; CTextFileLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTextFileLoader@@@8
	DD	FLAT:??_R3CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06POANKNEN@?$CFs?$CF02u@
CONST	SEGMENT
??_C@_06POANKNEN@?$CFs?$CF02u@ DB '%s%02u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@
CONST	SEGMENT
??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@ DB 'CTextFileLoa'
	DB	'der::LoadGroup : must have a value (filename: %s line: %d key'
	DB	': %s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list@
CONST	SEGMENT
??_C@_04DONFEANM@list@ DB 'list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGJOOGAJ@group@
CONST	SEGMENT
??_C@_05MGJOOGAJ@group@ DB 'group', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@
CONST	SEGMENT
??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@ DB 'cannot find'
	DB	' " in %s:%lu', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJDBNLEE@?5?7@
CONST	SEGMENT
??_C@_02OJDBNLEE@?5?7@ DB ' ', 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global@
CONST	SEGMENT
??_C@_06FJKEMHGD@global@ DB 'global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTextFileLoader@@6B@
CONST	SEGMENT
??_7CTextFileLoader@@6B@ DD FLAT:??_R4CTextFileLoader@@6B@ ; CTextFileLoader::`vftable'
	DD	FLAT:??_ECTextFileLoader@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A DD FLAT:??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CTextFileLoader::SGroupNode::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Ucopy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z$0
__ehfuncinfo$??$_Ucopy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Ucopy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCTextFileLoader@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$2
__ehfuncinfo$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$3
__ehfuncinfo$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CTextFileLoader@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CTextFileLoader@@QAE_NPBD@Z$0
__ehfuncinfo$?Load@CTextFileLoader@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CTextFileLoader@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTextFileLoader@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTextFileLoader@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$3
__ehfuncinfo$??0CTextFileLoader@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CTextFileLoader@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Cache@CTextFileLoader@@SAPAV1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$4
__ehfuncinfo$?Cache@CTextFileLoader@@SAPAV1@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SGroupNode@CTextFileLoader@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SGroupNode@CTextFileLoader@@QAE@XZ$0
__ehfuncinfo$??0SGroupNode@CTextFileLoader@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SGroupNode@CTextFileLoader@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ$0
__ehfuncinfo$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$0
	DD	02H
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$7
__ehfuncinfo$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@SGroupNode@CTextFileLoader@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ; ??ms_kPool$initializer$@SGroupNode@CTextFileLoader@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1627 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 1024 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 264  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 20		 push	 32			; 00000020H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1025 :             _Al.deallocate(_Ptr, 1);
; 1026 :         }
; 1027 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 35   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 36   :             _Target->_Tidy();
; 37   :         }
; 38   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);
; 1718 :     const auto _ULast = _Get_unwrapped(_Last);
; 1719 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1720 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1721 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1722 :         if (!_STD is_constant_evaluated())
; 1723 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1724 :         {
; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1726 :             return _Dest + (_ULast - _UFirst);
; 1727 :         }
; 1728 :     }
; 1729 : 
; 1730 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1733 :     }
; 1734 : 
; 1735 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1736 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1603 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         const auto _Scary = _Get_scary();
; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1612 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1616 :             }
; 1617 :         }
; 1618 : 
; 1619 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1620 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1603 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         const auto _Scary = _Get_scary();
; 1605 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1608 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1609 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1610 :                 _Result._Location._Child = _Tree_child::_Right;
; 1611 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1612 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1613 :                 _Result._Location._Child = _Tree_child::_Left;
; 1614 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1615 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1606 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1607 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1616 :             }
; 1617 :         }
; 1618 : 
; 1619 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1620 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 949  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
__Oldsize$1$ = -36					; size = 4
tv464 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv475 = -28						; size = 4
__Constructed_last$ = -28				; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx
  00061	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00064	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00069	0f 84 8e 01 00
	00		 je	 $LN70@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00072	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	2b ce		 sub	 ecx, esi
  00077	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007c	f7 e9		 imul	 ecx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 02	 sar	 edx, 2
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 19		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00097	bb f0 ff ff ff	 mov	 ebx, -16		; fffffff0H
  0009c	c7 45 ec aa aa
	aa 0a		 mov	 DWORD PTR __Newcapacity$[ebp], 178956970 ; 0aaaaaaaH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	53		 push	 ebx
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	83 c4 04	 add	 esp, 4
  000ac	8b f0		 mov	 esi, eax
  000ae	eb 53		 jmp	 SHORT $LN68@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000b3	8b cb		 mov	 ecx, ebx
  000b5	3b c3		 cmp	 eax, ebx
  000b7	0f 43 c8	 cmovae	 ecx, eax
  000ba	89 4d e4	 mov	 DWORD PTR tv475[ebp], ecx
  000bd	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  000c3	0f 87 39 01 00
	00		 ja	 $LN71@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000c9	8d 1c 49	 lea	 ebx, DWORD PTR [ecx+ecx*2]
  000cc	89 4d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ecx
  000cf	c1 e3 03	 shl	 ebx, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d2	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  000d8	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000da	53		 push	 ebx
  000db	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e0	83 c4 04	 add	 esp, 4
  000e3	8b f0		 mov	 esi, eax
  000e5	eb 1c		 jmp	 SHORT $LN68@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000e7	85 db		 test	 ebx, ebx
  000e9	74 13		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  000eb	53		 push	 ebx
  000ec	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000f1	8b f0		 mov	 esi, eax

; 85   :         return ::operator new(_Bytes);

  000f3	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000f6	8b 45 e4	 mov	 eax, DWORD PTR tv475[ebp]
  000f9	89 45 ec	 mov	 DWORD PTR __Newcapacity$[ebp], eax
  000fc	eb 05		 jmp	 SHORT $LN68@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000fe	33 f6		 xor	 esi, esi
  00100	89 4d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ecx
$LN68@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00103	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00106	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00109	89 75 e8	 mov	 DWORD PTR $T2[ebp], esi

; 786  :         pointer _Constructed_first      = _Constructed_last;
; 787  : 
; 788  :         _TRY_BEGIN

  0010c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00113	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00116	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00119	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0011c	89 4d e0	 mov	 DWORD PTR tv464[ebp], ecx
  0011f	89 45 e4	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00122	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00127	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0012a	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0012d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0012f	3b d0		 cmp	 edx, eax
  00131	75 04		 jne	 SHORT $LN4@Emplace_re

; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00133	8b d6		 mov	 edx, esi

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 794  :         } else { // provide basic guarantee

  00135	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00137	57		 push	 edi
  00138	56		 push	 esi
  00139	52		 push	 edx
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00140	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00143	83 c4 10	 add	 esp, 16			; 00000010H
  00146	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00149	8b 55 e4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0014c	57		 push	 edi
  0014d	52		 push	 edx
  0014e	50		 push	 eax
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00155	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00157	83 c4 10	 add	 esp, 16			; 00000010H

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  0015a	85 c9		 test	 ecx, ecx
  0015c	74 4f		 je	 SHORT $LN49@Emplace_re

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0015e	57		 push	 edi
  0015f	ff 77 04	 push	 DWORD PTR [edi+4]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00168	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00170	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00172	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00175	f7 e9		 imul	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	8b c2		 mov	 eax, edx
  0017c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0017f	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00181	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00184	8b 07		 mov	 eax, DWORD PTR [edi]

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00186	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00189	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0018f	72 12		 jb	 SHORT $LN59@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00191	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00194	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00197	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00199	83 c0 fc	 add	 eax, -4			; fffffffcH
  0019c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0019f	77 66		 ja	 SHORT $LN56@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a1	8b c2		 mov	 eax, edx
$LN59@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001a3	51		 push	 ecx
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001aa	83 c4 08	 add	 esp, 8
$LN49@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001ad	8b 45 dc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  001b0	40		 inc	 eax
  001b1	89 37		 mov	 DWORD PTR [edi], esi
  001b3	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  001b6	8b 45 e0	 mov	 eax, DWORD PTR tv464[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  001b9	8d 0c ce	 lea	 ecx, DWORD PTR [esi+ecx*8]
  001bc	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  001bf	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  001c2	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 807  :     }

  001c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cf	59		 pop	 ecx
  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);

  001d9	8b 45 e4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001dc	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001df	50		 push	 eax
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 801  :         _Al.deallocate(_Newvec, _Newcapacity);

  001e6	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001e9	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ec	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001ef	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 802  :         _RERAISE;

  001f4	6a 00		 push	 0
  001f6	6a 00		 push	 0
  001f8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN70@Emplace_re:

; 778  :             _Xlength();

  001fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN71@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00202	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN56@Emplace_re:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00207	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@Emplace_re:
  0020c	cc		 int	 3
  0020d	cc		 int	 3
  0020e	cc		 int	 3
  0020f	cc		 int	 3
  00210	cc		 int	 3
  00211	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 385  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 712  :         _Tidy();

  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 20		 push	 32			; 00000020H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 751  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 752  :         }
; 753  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv505 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN74@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN75@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv505[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array

; 806  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 807  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 778  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
$LN75@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >, COMDAT
; _this$ = ecx

; 748  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 751  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 752  :         }
; 753  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 712  :         _Tidy();

  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A ; CTextFileLoader::SGroupNode::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CTextFileLoader::SGroupNode::ms_kPool'', COMDAT

; 12   : CDynamicPool<CTextFileLoader::SGroupNode>	CTextFileLoader::SGroupNode::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CTextFileLoader::SGroupNode::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z ENDP ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@KAXPAUSGroupNode@CTextFileLoader@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@KAXPAUSGroupNode@CTextFileLoader@@@Z PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 110  : 			delete pkData;

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkData$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 12		 je	 SHORT $LN6@Delete
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
  00012	6a 34		 push	 52			; 00000034H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN6@Delete:
  0001d	5e		 pop	 esi

; 111  : 		}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?Delete@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@KAXPAUSGroupNode@CTextFileLoader@@@Z ENDP ; CDynamicPool<CTextFileLoader::SGroupNode>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1769 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ENDP ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader'', COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 9    : std::map<DWORD, CTextFileLoader*> CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader;

  00007	68 00 00 00 00	 push	 OFFSET ??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 350  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000c	89 00		 mov	 DWORD PTR [eax], eax

; 351  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 352  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00011	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 353  :         _Pnode->_Color = _Black;

  00014	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1925 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 9    : std::map<DWORD, CTextFileLoader*> CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader;

  0001f	e8 00 00 00 00	 call	 _atexit
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >, COMDAT
; _this$ = ecx

; 1092 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 758  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1099 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCTextFileLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTextFileLoader@@UAEPAXI@Z PROC			; CTextFileLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 80 00 00 00	 push	 128			; 00000080H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCTextFileLoader@@UAEPAXI@Z ENDP			; CTextFileLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
_TEXT	SEGMENT
tv2739 = -92						; size = 4
_pGroupNode$GSCopy$1$ = -88				; size = 4
_stSubTokenVector$2 = -84				; size = 12
_nLocalGroupDepth$1$ = -72				; size = 4
tv2715 = -68						; size = 4
_pNewNode$3 = -68					; size = 4
_this$GSCopy$1$ = -64					; size = 4
__Last$1$ = -60						; size = 4
_j$1$ = -60						; size = 4
_stTokenVector$ = -56					; size = 12
$T4 = -41						; size = 1
_key$5 = -40						; size = 24
_key$6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pGroupNode$ = 8					; size = 4
?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z PROC ; CTextFileLoader::LoadGroup, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pGroupNode$[ebp]
  00032	89 45 a8	 mov	 DWORD PTR _pGroupNode$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00035	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp], 0
  0003c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp+4], 0
  00043	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 212  : 	for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  0004a	8d 46 2c	 lea	 eax, DWORD PTR [esi+44]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	33 ff		 xor	 edi, edi
  00056	89 45 a4	 mov	 DWORD PTR tv2739[ebp], eax
  00059	8b c8		 mov	 ecx, eax
  0005b	89 7d b8	 mov	 DWORD PTR _nLocalGroupDepth$1$[ebp], edi
  0005e	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00063	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00066	3b c8		 cmp	 ecx, eax
  00068	0f 83 82 05 00
	00		 jae	 $LN598@LoadGroup
  0006e	66 90		 npad	 2
$LL4@LoadGroup:

; 213  : 	{
; 214  : 		int iRet;
; 215  : 
; 216  : 		if ((iRet = m_textFileLoader.SplitLine2(m_dwcurLineIndex, &stTokenVector)) != 0)

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02OJDBNLEE@?5?7@
  00075	8d 45 c8	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0007d	e8 00 00 00 00	 call	 ?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine2
  00082	85 c0		 test	 eax, eax
  00084	74 2a		 je	 SHORT $LN11@LoadGroup

; 217  : 		{
; 218  : 			if (iRet == -2)

  00086	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00089	0f 85 42 05 00
	00		 jne	 $LN2@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0008f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00093	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 2306 :         if (_Large_string_engaged()) {

  00096	72 02		 jb	 SHORT $LN41@LoadGroup

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00098	8b 00		 mov	 eax, DWORD PTR [eax]
$LN41@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 219  : 				TraceError("cannot find \" in %s:%lu", m_strFileName.c_str(), m_dwcurLineIndex);

  0009a	ff 76 28	 push	 DWORD PTR [esi+40]
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@
  000a3	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 			continue;

  000ab	e9 21 05 00 00	 jmp	 $LN2@LoadGroup
$LN11@LoadGroup:

; 223  : 		stl_lowers(stTokenVector[0]);

  000b0	ff 75 c8	 push	 DWORD PTR _stTokenVector$[ebp]
  000b3	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  000b8	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 223  : 		stl_lowers(stTokenVector[0]);

  000bb	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  000be	8b ce		 mov	 ecx, esi
  000c0	8b f9		 mov	 edi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  000c2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 2297 :         if (_Large_string_engaged()) {

  000c5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000c8	72 02		 jb	 SHORT $LN52@LoadGroup

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000ca	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN52@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 225  : 		if ('{' == stTokenVector[0][0])

  000cc	80 39 7b	 cmp	 BYTE PTR [ecx], 123	; 0000007bH
  000cf	75 08		 jne	 SHORT $LN13@LoadGroup

; 226  : 		{
; 227  : 			nLocalGroupDepth++;

  000d1	ff 45 b8	 inc	 DWORD PTR _nLocalGroupDepth$1$[ebp]

; 228  : 			continue;

  000d4	e9 f8 04 00 00	 jmp	 $LN2@LoadGroup
$LN13@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  000d9	8b cf		 mov	 ecx, edi

; 2297 :         if (_Large_string_engaged()) {

  000db	83 f8 10	 cmp	 eax, 16			; 00000010H
  000de	72 02		 jb	 SHORT $LN61@LoadGroup

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000e0	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN61@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 231  : 		if ('}' == stTokenVector[0][0]) {

  000e2	80 39 7d	 cmp	 BYTE PTR [ecx], 125	; 0000007dH
  000e5	0f 84 db 05 00
	00		 je	 $LN573@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  000eb	8b cf		 mov	 ecx, edi

; 2306 :         if (_Large_string_engaged()) {

  000ed	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f0	72 02		 jb	 SHORT $LN72@LoadGroup

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000f2	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN72@LoadGroup:

; 4436 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000f4	6a 05		 push	 5
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group@
  000fb	ff 76 10	 push	 DWORD PTR [esi+16]
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00104	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 237  : 		if (0 == stTokenVector[0].compare("group"))

  00107	85 c0		 test	 eax, eax
  00109	0f 85 8d 00 00
	00		 jne	 $LN15@LoadGroup

; 238  : 		{
; 239  : 			if (2 != stTokenVector.size())

  0010f	8b 45 cc	 mov	 eax, DWORD PTR _stTokenVector$[ebp+4]
  00112	2b c7		 sub	 eax, edi
  00114	83 e8 30	 sub	 eax, 48			; 00000030H
  00117	83 f8 18	 cmp	 eax, 24			; 00000018H
  0011a	0f 83 b1 04 00
	00		 jae	 $LN2@LoadGroup

; 240  : 			{
; 241  : 				assert(!"There is no group name!");
; 242  : 				continue;
; 243  : 			}
; 244  : 
; 245  : 			TGroupNode * pNewNode = TGroupNode::New();

  00120	e8 00 00 00 00	 call	 ?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ ; CTextFileLoader::SGroupNode::New

; 246  : 			m_kVct_pkNode.push_back(pNewNode);

  00125	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00128	8b f0		 mov	 esi, eax
  0012a	83 c1 74	 add	 ecx, 116		; 00000074H
  0012d	89 75 bc	 mov	 DWORD PTR _pNewNode$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00130	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00133	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00136	74 08		 je	 SHORT $LN81@LoadGroup

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00138	89 30		 mov	 DWORD PTR [eax], esi

; 729  :         ++_Mylast;

  0013a	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0013e	eb 0a		 jmp	 SHORT $LN80@LoadGroup
$LN81@LoadGroup:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00140	8d 55 bc	 lea	 edx, DWORD PTR _pNewNode$3[ebp]
  00143	52		 push	 edx
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
$LN80@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 248  : 			pNewNode->pParentNode = pGroupNode;

  0014a	8b 7d a8	 mov	 edi, DWORD PTR _pGroupNode$GSCopy$1$[ebp]

; 249  : 			pNewNode->SetGroupName(stTokenVector[1]);

  0014d	8b ce		 mov	 ecx, esi
  0014f	89 7e 24	 mov	 DWORD PTR [esi+36], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00152	8b 45 c8	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
  00155	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 249  : 			pNewNode->SetGroupName(stTokenVector[1]);

  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::SetGroupName
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0015e	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 250  : 			pGroupNode->ChildNodeVector.push_back(pNewNode);

  00161	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00164	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00167	74 08		 je	 SHORT $LN90@LoadGroup

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00169	89 30		 mov	 DWORD PTR [eax], esi

; 729  :         ++_Mylast;

  0016b	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016f	eb 0a		 jmp	 SHORT $LN89@LoadGroup
$LN90@LoadGroup:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00171	8d 55 bc	 lea	 edx, DWORD PTR _pNewNode$3[ebp]
  00174	52		 push	 edx
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
$LN89@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 252  : 			++m_dwcurLineIndex;

  0017b	8b 45 c0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 253  : 
; 254  : 			if( false == LoadGroup(pNewNode) )

  0017e	8b c8		 mov	 ecx, eax
  00180	56		 push	 esi
  00181	ff 40 28	 inc	 DWORD PTR [eax+40]
  00184	e8 00 00 00 00	 call	 ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
  00189	84 c0		 test	 al, al
  0018b	0f 85 40 04 00
	00		 jne	 $LN2@LoadGroup
  00191	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
  00194	88 45 d7	 mov	 BYTE PTR $T4[ebp], al
  00197	e9 5d 04 00 00	 jmp	 $LN31@LoadGroup
$LN15@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0019c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  001a0	8b c7		 mov	 eax, edi
  001a2	72 02		 jb	 SHORT $LN169@LoadGroup

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001a4	8b 06		 mov	 eax, DWORD PTR [esi]
$LN169@LoadGroup:

; 4436 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  001a6	6a 04		 push	 4
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_04DONFEANM@list@
  001ad	ff 76 10	 push	 DWORD PTR [esi+16]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  001b6	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 258  : 		else if (0 == stTokenVector[0].compare("list"))

  001b9	85 c0		 test	 eax, eax
  001bb	0f 85 bf 02 00
	00		 jne	 $LN19@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001c1	8b 4d cc	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
  001c4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001c9	2b cf		 sub	 ecx, edi
  001cb	f7 e9		 imul	 ecx
  001cd	c1 fa 02	 sar	 edx, 2
  001d0	8b c2		 mov	 eax, edx
  001d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d5	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 260  : 			if (2 != stTokenVector.size())

  001d7	83 f8 02	 cmp	 eax, 2
  001da	0f 85 f1 03 00
	00		 jne	 $LN2@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  001e0	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp], 0
  001e7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+4], 0
  001ee	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 266  : 			CTokenVector stSubTokenVector;

  001f5	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  001f8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 267  : 
; 268  : 			stl_lowers(stTokenVector[1]);

  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00202	8b 45 c8	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  00205	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]
  00208	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  0020b	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1455 :         _Destroy(_Myfirst, _Mylast);

  00214	8b 7d cc	 mov	 edi, DWORD PTR _stTokenVector$[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00217	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  0021a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0021e	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00220	74 4e		 je	 SHORT $LN191@LoadGroup
$LL192@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00222	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00225	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00228	72 2b		 jb	 SHORT $LN211@LoadGroup

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0022a	8b 06		 mov	 eax, DWORD PTR [esi]

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0022c	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0022d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00233	72 16		 jb	 SHORT $LN221@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00235	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00238	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0023b	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0023d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00240	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00243	0f 87 b0 04 00
	00		 ja	 $LN558@LoadGroup

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00249	8b c2		 mov	 eax, edx
$LN221@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0024b	51		 push	 ecx
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00252	83 c4 08	 add	 esp, 8
$LN211@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00255	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0025c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00263	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00266	83 c6 18	 add	 esi, 24			; 00000018H
  00269	3b f7		 cmp	 esi, edi
  0026b	75 b5		 jne	 SHORT $LL192@LoadGroup
  0026d	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
$LN191@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1456 :         _Mylast = _Myfirst;

  00270	89 75 cc	 mov	 DWORD PTR _stTokenVector$[ebp+4], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 273  : 			++m_dwcurLineIndex;

  00273	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00276	ff 46 28	 inc	 DWORD PTR [esi+40]

; 274  : 			for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  00279	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0027c	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00281	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00284	3b c8		 cmp	 ecx, eax
  00286	0f 83 db 00 00
	00		 jae	 $LN572@LoadGroup
  0028c	0f 1f 40 00	 npad	 4
$LL7@LoadGroup:

; 275  : 			{
; 276  : 				if (!m_textFileLoader.SplitLine(m_dwcurLineIndex, &stSubTokenVector))

  00290	68 00 00 00 00	 push	 OFFSET ??_C@_02OJDBNLEE@?5?7@
  00295	8d 45 ac	 lea	 eax, DWORD PTR _stSubTokenVector$2[ebp]
  00298	50		 push	 eax
  00299	51		 push	 ecx
  0029a	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0029d	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  002a2	84 c0		 test	 al, al
  002a4	0f 84 a7 00 00
	00		 je	 $LN5@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  002aa	8b 7d ac	 mov	 edi, DWORD PTR _stSubTokenVector$2[ebp]
  002ad	8b c7		 mov	 eax, edi
  002af	8b d0		 mov	 edx, eax

; 2319 :         return _BUF_SIZE <= _Myres;

  002b1	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 2297 :         if (_Large_string_engaged()) {

  002b4	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002b7	72 02		 jb	 SHORT $LN236@LoadGroup

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  002b9	8b 07		 mov	 eax, DWORD PTR [edi]
$LN236@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 279  : 				if ('{' == stSubTokenVector[0][0])

  002bb	80 38 7b	 cmp	 BYTE PTR [eax], 123	; 0000007bH
  002be	0f 84 8d 00 00
	00		 je	 $LN5@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  002c4	8b c2		 mov	 eax, edx

; 2297 :         if (_Large_string_engaged()) {

  002c6	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002c9	72 02		 jb	 SHORT $LN245@LoadGroup

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  002cb	8b 07		 mov	 eax, DWORD PTR [edi]
$LN245@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 282  : 				if ('}' == stSubTokenVector[0][0])

  002cd	80 38 7d	 cmp	 BYTE PTR [eax], 125	; 0000007dH
  002d0	0f 84 91 00 00
	00		 je	 $LN572@LoadGroup

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  002d6	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002d8	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  002dd	89 4d c4	 mov	 DWORD PTR _j$1$[ebp], ecx
  002e0	8b 4d b0	 mov	 ecx, DWORD PTR _stSubTokenVector$2[ebp+4]
  002e3	2b ca		 sub	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002e5	f7 e9		 imul	 ecx
  002e7	c1 fa 02	 sar	 edx, 2
  002ea	8b c2		 mov	 eax, edx
  002ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ef	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  002f1	74 5e		 je	 SHORT $LN5@LoadGroup
  002f3	8b 75 cc	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
  002f6	33 c0		 xor	 eax, eax
  002f8	89 45 bc	 mov	 DWORD PTR tv2715[ebp], eax
  002fb	0f 1f 44 00 00	 npad	 5
$LL10@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1569 :         return _My_data._Myfirst[_Pos];

  00300	03 c7		 add	 eax, edi

; 743  :         if (_Mylast != _My_data._Myend) {

  00302	50		 push	 eax
  00303	3b 75 d0	 cmp	 esi, DWORD PTR _stTokenVector$[ebp+8]
  00306	74 12		 je	 SHORT $LN256@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00308	8b ce		 mov	 ecx, esi
  0030a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  0030f	8b 75 cc	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
  00312	83 c6 18	 add	 esi, 24			; 00000018H
  00315	89 75 cc	 mov	 DWORD PTR _stTokenVector$[ebp+4], esi

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00318	eb 0c		 jmp	 SHORT $LN8@LoadGroup
$LN256@LoadGroup:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0031a	56		 push	 esi
  0031b	8d 4d c8	 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  0031e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00323	8b 75 cc	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
$LN8@LoadGroup:

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00326	8b 4d b0	 mov	 ecx, DWORD PTR _stSubTokenVector$2[ebp+4]
  00329	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0032e	8b 7d ac	 mov	 edi, DWORD PTR _stSubTokenVector$2[ebp]
  00331	2b cf		 sub	 ecx, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  00333	ff 45 c4	 inc	 DWORD PTR _j$1$[ebp]
  00336	83 45 bc 18	 add	 DWORD PTR tv2715[ebp], 24 ; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0033a	f7 e9		 imul	 ecx
  0033c	c1 fa 02	 sar	 edx, 2
  0033f	8b c2		 mov	 eax, edx
  00341	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00344	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  00346	39 45 c4	 cmp	 DWORD PTR _j$1$[ebp], eax
  00349	8b 45 bc	 mov	 eax, DWORD PTR tv2715[ebp]
  0034c	72 b2		 jb	 SHORT $LL10@LoadGroup
  0034e	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN5@LoadGroup:

; 274  : 			for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  00351	ff 46 28	 inc	 DWORD PTR [esi+40]
  00354	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00357	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  0035c	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0035f	3b c8		 cmp	 ecx, eax
  00361	0f 82 29 ff ff
	ff		 jb	 $LL7@LoadGroup
$LN572@LoadGroup:

; 286  : 				{
; 287  : 					stTokenVector.push_back(stSubTokenVector[j]);
; 288  : 				}
; 289  : 			}
; 290  : 
; 291  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  00367	8b 4d a8	 mov	 ecx, DWORD PTR _pGroupNode$GSCopy$1$[ebp]
  0036a	8d 45 c8	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
  0036d	50		 push	 eax
  0036e	8d 45 d8	 lea	 eax, DWORD PTR _key$6[ebp]
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00377	8b 55 ec	 mov	 edx, DWORD PTR _key$6[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  0037a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0037e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00381	72 2c		 jb	 SHORT $LN274@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00383	8b 4d d8	 mov	 ecx, DWORD PTR _key$6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00386	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00387	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00389	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0038f	72 14		 jb	 SHORT $LN284@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00391	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00394	83 c2 23	 add	 edx, 35			; 00000023H
  00397	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00399	83 c0 fc	 add	 eax, -4			; fffffffcH
  0039c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0039f	0f 87 54 03 00
	00		 ja	 $LN558@LoadGroup
$LN284@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  003a5	52		 push	 edx
  003a6	51		 push	 ecx
  003a7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003ac	83 c4 08	 add	 esp, 8
$LN274@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  003af	8b 75 ac	 mov	 esi, DWORD PTR _stSubTokenVector$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  003b2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _key$6[ebp+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  003b9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _key$6[ebp+20], 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  003c0	c6 45 d8 00	 mov	 BYTE PTR _key$6[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  003c4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  003c8	85 f6		 test	 esi, esi
  003ca	0f 84 01 02 00
	00		 je	 $LN2@LoadGroup

; 1764 :             _Destroy(_Myfirst, _Mylast);

  003d0	8b 7d b0	 mov	 edi, DWORD PTR _stSubTokenVector$2[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  003d3	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  003d5	74 4e		 je	 SHORT $LN298@LoadGroup
$LL299@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  003d7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  003da	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003dd	72 2b		 jb	 SHORT $LN318@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003df	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003e1	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003e2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003e8	72 16		 jb	 SHORT $LN328@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003ea	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ed	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  003f0	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003f2	83 c0 fc	 add	 eax, -4			; fffffffcH
  003f5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003f8	0f 87 fb 02 00
	00		 ja	 $LN558@LoadGroup

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  003fe	8b c2		 mov	 eax, edx
$LN328@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00400	51		 push	 ecx
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00407	83 c4 08	 add	 esp, 8
$LN318@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0040a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00411	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00418	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0041b	83 c6 18	 add	 esi, 24			; 00000018H
  0041e	3b f7		 cmp	 esi, edi
  00420	75 b5		 jne	 SHORT $LL299@LoadGroup
  00422	8b 75 ac	 mov	 esi, DWORD PTR _stSubTokenVector$2[ebp]
$LN298@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00425	8b 4d b4	 mov	 ecx, DWORD PTR _stSubTokenVector$2[ebp+8]
  00428	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0042d	2b ce		 sub	 ecx, esi
  0042f	f7 e9		 imul	 ecx
  00431	c1 fa 02	 sar	 edx, 2
  00434	8b c2		 mov	 eax, edx
  00436	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00439	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0043b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0043e	8b c6		 mov	 eax, esi
  00440	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00443	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00449	72 14		 jb	 SHORT $LN352@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0044b	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0044e	83 c1 23	 add	 ecx, 35			; 00000023H
  00451	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00453	83 c0 fc	 add	 eax, -4			; fffffffcH
  00456	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00459	0f 87 9a 02 00
	00		 ja	 $LN558@LoadGroup
$LN352@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0045f	51		 push	 ecx
  00460	56		 push	 esi
  00461	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00466	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp], 0

; 1768 :             _Mylast  = nullptr;

  0046d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+4], 0

; 1769 :             _Myend   = nullptr;

  00474	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  0047b	e9 4e 01 00 00	 jmp	 $LN603@LoadGroup
$LN19@LoadGroup:

; 296  : 			std::string key = stTokenVector[0];

  00480	56		 push	 esi
  00481	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]
  00484	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00489	8b 4d cc	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
  0048c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00491	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
  00494	89 4d c4	 mov	 DWORD PTR __Last$1$[ebp], ecx
  00497	2b ce		 sub	 ecx, esi
  00499	f7 e9		 imul	 ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 296  : 			std::string key = stTokenVector[0];

  0049b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0049f	c1 fa 02	 sar	 edx, 2
  004a2	8b c2		 mov	 eax, edx
  004a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004a7	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 298  : 			if (1 == stTokenVector.size())

  004a9	83 f8 01	 cmp	 eax, 1
  004ac	0f 84 dc 01 00
	00		 je	 $LN575@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1419 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  004b2	8b 45 c4	 mov	 eax, DWORD PTR __Last$1$[ebp]
  004b5	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  004b8	3b f8		 cmp	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4429 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  004ba	0f 84 7c 00 00
	00		 je	 $LN384@LoadGroup
$LL385@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2850 :         if (this != _STD addressof(_Right)) {

  004c0	3b f7		 cmp	 esi, edi
  004c2	74 68		 je	 SHORT $LN383@LoadGroup

; 2319 :         return _BUF_SIZE <= _Myres;

  004c4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004c7	83 f9 10	 cmp	 ecx, 16			; 00000010H
  004ca	72 2e		 jb	 SHORT $LN401@LoadGroup

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  004cc	8b 06		 mov	 eax, DWORD PTR [esi]

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004ce	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004cf	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004d5	72 16		 jb	 SHORT $LN411@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004da	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  004dd	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004df	83 c0 fc	 add	 eax, -4			; fffffffcH
  004e2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004e5	0f 87 0e 02 00
	00		 ja	 $LN558@LoadGroup

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  004eb	8b c2		 mov	 eax, edx
$LN411@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  004ed	51		 push	 ecx
  004ee	50		 push	 eax
  004ef	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004f4	8b 45 c4	 mov	 eax, DWORD PTR __Last$1$[ebp]
  004f7	83 c4 08	 add	 esp, 8
$LN401@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  004fa	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00501	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00508	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0050b	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0050e	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00511	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00516	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4596 :         _My_data._Mysize = 0;

  0051b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00522	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00529	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN383@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4429 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0052c	83 c7 18	 add	 edi, 24			; 00000018H
  0052f	83 c6 18	 add	 esi, 24			; 00000018H
  00532	3b f8		 cmp	 edi, eax
  00534	75 8a		 jne	 SHORT $LL385@LoadGroup
  00536	8b 45 cc	 mov	 eax, DWORD PTR _stTokenVector$[ebp+4]
  00539	89 45 c4	 mov	 DWORD PTR __Last$1$[ebp], eax
$LN384@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0053c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0053f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00542	72 2f		 jb	 SHORT $LN450@LoadGroup

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00544	8b 40 e8	 mov	 eax, DWORD PTR [eax-24]

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00547	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00548	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0054e	72 16		 jb	 SHORT $LN460@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00550	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00553	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00556	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00558	83 c0 fc	 add	 eax, -4			; fffffffcH
  0055b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0055e	0f 87 95 01 00
	00		 ja	 $LN558@LoadGroup

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00564	8b c2		 mov	 eax, edx
$LN460@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00566	51		 push	 ecx
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0056d	8b 45 c4	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00570	83 c4 08	 add	 esp, 8
$LN450@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  00573	8b 4d a8	 mov	 ecx, DWORD PTR _pGroupNode$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00576	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0057d	c7 40 fc 0f 00
	00 00		 mov	 DWORD PTR [eax-4], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00584	c6 40 e8 00	 mov	 BYTE PTR [eax-24], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  00588	8d 45 c8	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1421 :         --_Mylast;

  0058b	83 6d cc 18	 sub	 DWORD PTR _stTokenVector$[ebp+4], 24 ; 00000018H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  0058f	50		 push	 eax
  00590	8d 45 d8	 lea	 eax, DWORD PTR _key$5[ebp]
  00593	50		 push	 eax
  00594	e8 00 00 00 00	 call	 ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00599	8b 55 ec	 mov	 edx, DWORD PTR _key$5[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 310  : 		}

  0059c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  005a0	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  005a3	72 2c		 jb	 SHORT $LN2@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005a5	8b 4d d8	 mov	 ecx, DWORD PTR _key$5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  005a8	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005a9	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005ab	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  005b1	72 14		 jb	 SHORT $LN493@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005b3	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  005b6	83 c2 23	 add	 edx, 35			; 00000023H
  005b9	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005bb	83 c0 fc	 add	 eax, -4			; fffffffcH
  005be	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005c1	0f 87 32 01 00
	00		 ja	 $LN558@LoadGroup
$LN493@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  005c7	52		 push	 edx
  005c8	51		 push	 ecx
  005c9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
$LN603@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 212  : 	for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  005ce	83 c4 08	 add	 esp, 8
$LN2@LoadGroup:
  005d1	8b 45 c0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  005d4	8b 4d a4	 mov	 ecx, DWORD PTR tv2739[ebp]
  005d7	ff 40 28	 inc	 DWORD PTR [eax+40]
  005da	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  005df	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  005e2	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  005e5	3b c8		 cmp	 ecx, eax
  005e7	0f 82 83 fa ff
	ff		 jb	 $LL4@LoadGroup
$LN600@LoadGroup:

; 313  : 	return (nLocalGroupDepth == 0);

  005ed	8b 7d b8	 mov	 edi, DWORD PTR _nLocalGroupDepth$1$[ebp]
$LN598@LoadGroup:
  005f0	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
$LN3@LoadGroup:
  005f3	85 ff		 test	 edi, edi
  005f5	0f 94 45 d7	 sete	 BYTE PTR $T4[ebp]
$LN31@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  005f9	85 f6		 test	 esi, esi
  005fb	0f 84 d8 00 00
	00		 je	 $LN501@LoadGroup

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00601	8b 7d cc	 mov	 edi, DWORD PTR _stTokenVector$[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00604	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00606	74 4e		 je	 SHORT $LN507@LoadGroup
$LL508@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00608	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0060b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0060e	72 2b		 jb	 SHORT $LN527@LoadGroup
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00610	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00612	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00613	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00619	72 16		 jb	 SHORT $LN537@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0061b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0061e	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00621	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00623	83 c0 fc	 add	 eax, -4			; fffffffcH
  00626	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00629	0f 87 ca 00 00
	00		 ja	 $LN558@LoadGroup

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0062f	8b c2		 mov	 eax, edx
$LN537@LoadGroup:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00631	51		 push	 ecx
  00632	50		 push	 eax
  00633	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00638	83 c4 08	 add	 esp, 8
$LN527@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0063b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00642	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00649	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0064c	83 c6 18	 add	 esi, 24			; 00000018H
  0064f	3b f7		 cmp	 esi, edi
  00651	75 b5		 jne	 SHORT $LL508@LoadGroup
  00653	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
$LN507@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00656	8b 4d d0	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+8]
  00659	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0065e	2b ce		 sub	 ecx, esi
  00660	f7 e9		 imul	 ecx
  00662	c1 fa 02	 sar	 edx, 2
  00665	8b c2		 mov	 eax, edx
  00667	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0066a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0066c	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0066f	8b c6		 mov	 eax, esi
  00671	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00674	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0067a	72 53		 jb	 SHORT $LN561@LoadGroup

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0067c	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0067f	83 c1 23	 add	 ecx, 35			; 00000023H
  00682	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00684	83 c0 fc	 add	 eax, -4			; fffffffcH
  00687	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0068a	77 6d		 ja	 SHORT $LN558@LoadGroup
  0068c	eb 41		 jmp	 SHORT $LN561@LoadGroup
$LN575@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3922 :         return _Mypair._Myval2._Myptr();

  0068e	8b 55 c0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]

; 2305 :         const value_type* _Result = _Bx._Buf;

  00691	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  00694	83 7d ec 10	 cmp	 DWORD PTR _key$5[ebp+20], 16 ; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00698	8d 42 04	 lea	 eax, DWORD PTR [edx+4]

; 2306 :         if (_Large_string_engaged()) {

  0069b	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _key$5[ebp]

; 2319 :         return _BUF_SIZE <= _Myres;

  0069f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  006a3	72 02		 jb	 SHORT $LN370@LoadGroup

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  006a5	8b 00		 mov	 eax, DWORD PTR [eax]
$LN370@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 300  : 				TraceError("CTextFileLoader::LoadGroup : must have a value (filename: %s line: %d key: %s)",

  006a7	51		 push	 ecx
  006a8	ff 72 28	 push	 DWORD PTR [edx+40]
  006ab	50		 push	 eax
  006ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@
  006b1	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  006b6	83 c4 10	 add	 esp, 16			; 00000010H

; 301  : 							m_strFileName.c_str(),
; 302  : 							m_dwcurLineIndex,
; 303  : 							key.c_str());
; 304  : 				break;

  006b9	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]
  006bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  006c1	e9 27 ff ff ff	 jmp	 $LN600@LoadGroup
$LN573@LoadGroup:

; 232  : 			nLocalGroupDepth--;

  006c6	8b 7d b8	 mov	 edi, DWORD PTR _nLocalGroupDepth$1$[ebp]
  006c9	4f		 dec	 edi
  006ca	e9 24 ff ff ff	 jmp	 $LN3@LoadGroup
$LN561@LoadGroup:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  006cf	51		 push	 ecx
  006d0	56		 push	 esi
  006d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006d6	83 c4 08	 add	 esp, 8
$LN501@LoadGroup:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 313  : 	return (nLocalGroupDepth == 0);

  006d9	8a 45 d7	 mov	 al, BYTE PTR $T4[ebp]

; 314  : }

  006dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006e6	59		 pop	 ecx
  006e7	5f		 pop	 edi
  006e8	5e		 pop	 esi
  006e9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ec	33 cd		 xor	 ecx, ebp
  006ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006f3	8b e5		 mov	 esp, ebp
  006f5	5d		 pop	 ebp
  006f6	c2 04 00	 ret	 4
$LN558@LoadGroup:
  006f9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN602@LoadGroup:
  006fe	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR _stSubTokenVector$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ENDP ; CTextFileLoader::LoadGroup
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ
_TEXT	SEGMENT
?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ PROC	; CTextFileLoader::__DestroyGroupNodeVector, COMDAT
; _this$ = ecx

; 161  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b 77 74	 mov	 esi, DWORD PTR [edi+116]
  00007	3b 77 78	 cmp	 esi, DWORD PTR [edi+120]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 163  : 	for (i=m_kVct_pkNode.begin(); i!=m_kVct_pkNode.end(); ++i)

  0000a	74 1f		 je	 SHORT $LN34@DestroyGro
  0000c	0f 1f 40 00	 npad	 4
$LL19@DestroyGro:

; 164  : 		SGroupNode::Delete(*i);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z ; CTextFileLoader::SGroupNode::Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 78   :         ++_Ptr;

  00017	83 c6 04	 add	 esi, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 164  : 		SGroupNode::Delete(*i);

  0001a	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 154  :         return _Ptr == _Right._Ptr;

  0001d	3b 77 78	 cmp	 esi, DWORD PTR [edi+120]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 163  : 	for (i=m_kVct_pkNode.begin(); i!=m_kVct_pkNode.end(); ++i)

  00020	75 ee		 jne	 SHORT $LL19@DestroyGro

; 165  : 	m_kVct_pkNode.clear();

  00022	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  00025	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00028	5f		 pop	 edi

; 166  : }

  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
$LN34@DestroyGro:

; 165  : 	m_kVct_pkNode.clear();

  0002b	89 77 78	 mov	 DWORD PTR [edi+120], esi
  0002e	5f		 pop	 edi

; 166  : }

  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ENDP	; CTextFileLoader::__DestroyGroupNodeVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pString$ = 12						; size = 4
?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z PROC ; CTextFileLoader::GetTokenString, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 683  : 	CTokenVector * pTokenVector;
; 684  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 48		 je	 SHORT $LN21@GetTokenSt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 687  : 	if (pTokenVector->empty())

  0001e	74 3c		 je	 SHORT $LN21@GetTokenSt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 2f		 je	 SHORT $LN24@GetTokenSt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00035	8b 55 0c	 mov	 edx, DWORD PTR _pString$[ebp]
  00038	3b d1		 cmp	 edx, ecx
  0003a	74 15		 je	 SHORT $LN12@GetTokenSt

; 2319 :         return _BUF_SIZE <= _Myres;

  0003c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00040	8b c1		 mov	 eax, ecx

; 2306 :         if (_Large_string_engaged()) {

  00042	72 02		 jb	 SHORT $LN17@GetTokenSt

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00044	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN17@GetTokenSt:

; 3035 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00046	ff 71 10	 push	 DWORD PTR [ecx+16]
  00049	8b ca		 mov	 ecx, edx
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN12@GetTokenSt:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 695  : 	return TRUE;

  00051	b8 01 00 00 00	 mov	 eax, 1

; 696  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN21@GetTokenSt:

; 688  : 	{
; 689  : 		//Tracef(" CTextFileLoader::GetTokenString - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 690  : 		return FALSE;

  0005c	33 c0		 xor	 eax, eax

; 696  : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN24@GetTokenSt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00064	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN22@GetTokenSt:
  00069	cc		 int	 3
?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ENDP ; CTextFileLoader::GetTokenString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pColor$ = 12						; size = 4
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z PROC ; CTextFileLoader::GetTokenColor, COMDAT
; _this$ = ecx

; 662  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 663  : 	CTokenVector * pTokenVector;
; 664  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN49@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 667  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN49@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 cf 00 00
	00		 je	 $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenCo:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 673  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pColor$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 673  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007f	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00086	72 02		 jb	 SHORT $LN24@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 674  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 674  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000b3	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ba	72 02		 jb	 SHORT $LN34@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 675  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 675  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e7	83 7b 5c 10	 cmp	 DWORD PTR [ebx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ee	72 02		 jb	 SHORT $LN44@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN44@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 676  : 	pColor->a = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 677  : 
; 678  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 679  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN49@GetTokenCo:

; 668  : 	{
; 669  : 		//Tracef(" CTextFileLoader::GetTokenColor - This key should have 4 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 670  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 679  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN48@GetTokenCo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN50@GetTokenCo:
  0011a	cc		 int	 3
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z ENDP ; CTextFileLoader::GetTokenColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pColor$ = 12						; size = 4
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z PROC ; CTextFileLoader::GetTokenColor, COMDAT
; _this$ = ecx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 643  : 	CTokenVector * pTokenVector;
; 644  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN49@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 647  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN49@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 cf 00 00
	00		 je	 $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenCo:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 653  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pColor$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 653  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007f	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00086	72 02		 jb	 SHORT $LN24@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 654  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 654  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000b3	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ba	72 02		 jb	 SHORT $LN34@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 655  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 655  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN48@GetTokenCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e7	83 7b 5c 10	 cmp	 DWORD PTR [ebx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ee	72 02		 jb	 SHORT $LN44@GetTokenCo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN44@GetTokenCo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 656  : 	pColor->a = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 657  : 
; 658  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 659  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN49@GetTokenCo:

; 648  : 	{
; 649  : 		//Tracef(" CTextFileLoader::GetTokenColor - This key should have 4 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 650  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 659  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN48@GetTokenCo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN50@GetTokenCo:
  0011a	cc		 int	 3
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z ENDP ; CTextFileLoader::GetTokenColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector$ = 12						; size = 4
?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z PROC ; CTextFileLoader::GetTokenDirection, COMDAT
; _this$ = ecx

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 624  : 	CTokenVector * pTokenVector;
; 625  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 bb 00 00
	00		 je	 $LN39@GetTokenDi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 628  : 	if (pTokenVector->size() != 3)

  00023	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 a5 00 00
	00		 jae	 $LN39@GetTokenDi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 97 00 00
	00		 je	 $LN38@GetTokenDi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenDi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenDi:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 634  : 	pVector->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 634  : 	pVector->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	76 62		 jbe	 SHORT $LN38@GetTokenDi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007b	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  0007f	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00082	72 02		 jb	 SHORT $LN24@GetTokenDi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenDi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 635  : 	pVector->y = atof(pTokenVector->at(1).c_str());

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _atof
  0008c	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0008f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00092	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00097	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 635  : 	pVector->y = atof(pTokenVector->at(1).c_str());

  00099	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0009c	2b cb		 sub	 ecx, ebx
  0009e	f7 e9		 imul	 ecx
  000a0	c1 fa 02	 sar	 edx, 2
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx
  000aa	83 f8 02	 cmp	 eax, 2
  000ad	76 2e		 jbe	 SHORT $LN38@GetTokenDi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000af	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b3	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000b6	72 02		 jb	 SHORT $LN34@GetTokenDi

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenDi:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 636  : 	pVector->z = atof(pTokenVector->at(2).c_str());

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _atof
  000c0	83 c4 04	 add	 esp, 4

; 637  : 
; 638  : 	return TRUE;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	d9 5f 08	 fstp	 DWORD PTR [edi+8]
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx
  000cd	5e		 pop	 esi

; 639  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN39@GetTokenDi:

; 629  : 	{
; 630  : 		//Tracef(" CTextFileLoader::GetTokenDirection - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 631  : 		return FALSE;

  000d4	33 c0		 xor	 eax, eax
  000d6	5e		 pop	 esi

; 639  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN38@GetTokenDi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  000dd	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN40@GetTokenDi:
  000e2	cc		 int	 3
?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z ENDP ; CTextFileLoader::GetTokenDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pQ$ = 12						; size = 4
?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z PROC ; CTextFileLoader::GetTokenQuaternion, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 604  : 	CTokenVector * pTokenVector;
; 605  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN49@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 608  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN49@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 cf 00 00
	00		 je	 $LN48@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenQu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenQu:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 614  : 	pQ->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pQ$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 614  : 	pQ->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN48@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007f	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00086	72 02		 jb	 SHORT $LN24@GetTokenQu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenQu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 615  : 	pQ->y = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 615  : 	pQ->y = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN48@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000b3	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ba	72 02		 jb	 SHORT $LN34@GetTokenQu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenQu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 616  : 	pQ->z = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 616  : 	pQ->z = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN48@GetTokenQu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e7	83 7b 5c 10	 cmp	 DWORD PTR [ebx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ee	72 02		 jb	 SHORT $LN44@GetTokenQu

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN44@GetTokenQu:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 617  : 	pQ->w = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 618  : 
; 619  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 620  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN49@GetTokenQu:

; 609  : 	{
; 610  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 611  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 620  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN48@GetTokenQu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN50@GetTokenQu:
  0011a	cc		 int	 3
?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z ENDP ; CTextFileLoader::GetTokenQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_pVector$ = 12						; size = 4
?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z PROC ; CTextFileLoader::GetTokenPosition, COMDAT
; _this$ = ecx

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : }

  00003	5d		 pop	 ebp

; 599  : 	return GetTokenVector3(c_rstrKey, pVector);

  00004	e9 00 00 00 00	 jmp	 ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CTextFileLoader::GetTokenPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector4$ = 12						; size = 4
?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z PROC ; CTextFileLoader::GetTokenVector4, COMDAT
; _this$ = ecx

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 578  : 	CTokenVector * pTokenVector;
; 579  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN49@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 582  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN49@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 cf 00 00
	00		 je	 $LN48@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenVe:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 588  : 	pVector4->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector4$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 588  : 	pVector4->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN48@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007f	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00086	72 02		 jb	 SHORT $LN24@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 589  : 	pVector4->y = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 589  : 	pVector4->y = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN48@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000b3	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ba	72 02		 jb	 SHORT $LN34@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 590  : 	pVector4->z = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 590  : 	pVector4->z = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN48@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000e7	83 7b 5c 10	 cmp	 DWORD PTR [ebx+92], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000ee	72 02		 jb	 SHORT $LN44@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN44@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 591  : 	pVector4->w = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 592  : 
; 593  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 594  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN49@GetTokenVe:

; 583  : 	{
; 584  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 585  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 594  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN48@GetTokenVe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN50@GetTokenVe:
  0011a	cc		 int	 3
?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z ENDP ; CTextFileLoader::GetTokenVector4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector3$ = 12						; size = 4
?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z PROC ; CTextFileLoader::GetTokenVector3, COMDAT
; _this$ = ecx

; 558  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 559  : 	CTokenVector * pTokenVector;
; 560  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 bb 00 00
	00		 je	 $LN39@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 563  : 	if (pTokenVector->size() != 3)

  00023	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 a5 00 00
	00		 jae	 $LN39@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	0f 84 97 00 00
	00		 je	 $LN38@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00046	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0004a	72 02		 jb	 SHORT $LN14@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenVe:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 569  : 	pVector3->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector3$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 569  : 	pVector3->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	76 62		 jbe	 SHORT $LN38@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0007b	83 7b 2c 10	 cmp	 DWORD PTR [ebx+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  0007f	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00082	72 02		 jb	 SHORT $LN24@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 570  : 	pVector3->y = atof(pTokenVector->at(1).c_str());

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _atof
  0008c	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0008f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00092	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00097	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 570  : 	pVector3->y = atof(pTokenVector->at(1).c_str());

  00099	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0009c	2b cb		 sub	 ecx, ebx
  0009e	f7 e9		 imul	 ecx
  000a0	c1 fa 02	 sar	 edx, 2
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx
  000aa	83 f8 02	 cmp	 eax, 2
  000ad	76 2e		 jbe	 SHORT $LN38@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000af	83 7b 44 10	 cmp	 DWORD PTR [ebx+68], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  000b3	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  000b6	72 02		 jb	 SHORT $LN34@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 571  : 	pVector3->z = atof(pTokenVector->at(2).c_str());

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _atof
  000c0	83 c4 04	 add	 esp, 4

; 572  : 
; 573  : 	return TRUE;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	d9 5f 08	 fstp	 DWORD PTR [edi+8]
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx
  000cd	5e		 pop	 esi

; 574  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN39@GetTokenVe:

; 564  : 	{
; 565  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 566  : 		return FALSE;

  000d4	33 c0		 xor	 eax, eax
  000d6	5e		 pop	 esi

; 574  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN38@GetTokenVe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  000dd	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN40@GetTokenVe:
  000e2	cc		 int	 3
?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CTextFileLoader::GetTokenVector3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector2$ = 12						; size = 4
?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z PROC ; CTextFileLoader::GetTokenVector2, COMDAT
; _this$ = ecx

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 541  : 	CTokenVector * pTokenVector;
; 542  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	74 7f		 je	 SHORT $LN29@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00015	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  00018	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	2b d1		 sub	 edx, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 545  : 	if (pTokenVector->size() != 2)

  0001f	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00022	83 f8 18	 cmp	 eax, 24			; 00000018H
  00025	73 6d		 jae	 SHORT $LN29@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00027	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002c	f7 ea		 imul	 edx
  0002e	c1 fa 02	 sar	 edx, 2
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
  00038	74 63		 je	 SHORT $LN28@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0003a	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0003e	72 02		 jb	 SHORT $LN14@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenVe:
  00042	53		 push	 ebx
  00043	57		 push	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 551  : 	pVector2->x = atof(pTokenVector->at(0).c_str());

  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _atof
  0004a	8b 5d 0c	 mov	 ebx, DWORD PTR _pVector2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 551  : 	pVector2->x = atof(pTokenVector->at(0).c_str());

  00052	83 c4 04	 add	 esp, 4
  00055	d9 1b		 fstp	 DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0005c	2b cf		 sub	 ecx, edi
  0005e	f7 e9		 imul	 ecx
  00060	c1 fa 02	 sar	 edx, 2
  00063	8b c2		 mov	 eax, edx
  00065	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00068	03 c2		 add	 eax, edx
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	76 2e		 jbe	 SHORT $LN28@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0006f	83 7f 2c 10	 cmp	 DWORD PTR [edi+44], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00073	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00076	72 02		 jb	 SHORT $LN24@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 552  : 	pVector2->y = atof(pTokenVector->at(1).c_str());

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _atof
  00080	83 c4 04	 add	 esp, 4

; 553  : 
; 554  : 	return TRUE;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	d9 5b 04	 fstp	 DWORD PTR [ebx+4]
  0008b	5f		 pop	 edi
  0008c	5b		 pop	 ebx
  0008d	5e		 pop	 esi

; 555  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN29@GetTokenVe:

; 546  : 	{
; 547  : 		//Tracef(" CTextFileLoader::GetTokenVector2 - This key should have 2 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 548  : 		return FALSE;

  00094	33 c0		 xor	 eax, eax
  00096	5e		 pop	 esi

; 555  : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN28@GetTokenVe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0009d	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN30@GetTokenVe:
  000a2	cc		 int	 3
?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z ENDP ; CTextFileLoader::GetTokenVector2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z PROC ; CTextFileLoader::GetTokenFloat, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 524  : 	CTokenVector * pTokenVector;
; 525  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN18@GetTokenFl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 528  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN18@GetTokenFl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN21@GetTokenFl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00035	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN14@GetTokenFl

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenFl:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 534  : 	*pData = atof(pTokenVector->at(0).c_str());

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _atof
  00043	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	d9 18		 fstp	 DWORD PTR [eax]

; 535  : 
; 536  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 537  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN18@GetTokenFl:

; 529  : 	{
; 530  : 		//Tracef(" CTextFileLoader::GetTokenFloat - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 531  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 537  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN21@GetTokenFl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN19@GetTokenFl:
  00063	cc		 int	 3
?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ENDP ; CTextFileLoader::GetTokenFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z PROC ; CTextFileLoader::GetTokenDoubleWord, COMDAT
; _this$ = ecx

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  : }

  00003	5d		 pop	 ebp

; 519  : 	return GetTokenInteger(c_rstrKey, *(int **)(&pData));

  00004	e9 00 00 00 00	 jmp	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ENDP ; CTextFileLoader::GetTokenDoubleWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z PROC ; CTextFileLoader::GetTokenInteger, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 502  : 	CTokenVector * pTokenVector;
; 503  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN18@GetTokenIn
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 506  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN18@GetTokenIn
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN21@GetTokenIn
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00035	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN14@GetTokenIn

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenIn:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 512  : 	*pData = atoi(pTokenVector->at(0).c_str());

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	89 01		 mov	 DWORD PTR [ecx], eax

; 513  : 
; 514  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 515  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN18@GetTokenIn:

; 507  : 	{
; 508  : 		//Tracef(" CTextFileLoader::GetTokenInteger - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 509  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 515  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN21@GetTokenIn:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN19@GetTokenIn:
  00063	cc		 int	 3
?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ENDP ; CTextFileLoader::GetTokenInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z PROC ; CTextFileLoader::GetTokenWord, COMDAT
; _this$ = ecx

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 485  : 	CTokenVector * pTokenVector;
; 486  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 43		 je	 SHORT $LN18@GetTokenWo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 489  : 	if (pTokenVector->empty())

  0001e	74 37		 je	 SHORT $LN18@GetTokenWo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 2a		 je	 SHORT $LN21@GetTokenWo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00035	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN14@GetTokenWo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenWo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 495  : 	*pData = WORD(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	66 89 01	 mov	 WORD PTR [ecx], ax

; 496  : 
; 497  : 	return TRUE;

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 498  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN18@GetTokenWo:

; 490  : 	{
; 491  : 		//Tracef(" CTextFileLoader::GetTokenWord - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 492  : 		return FALSE;

  00057	33 c0		 xor	 eax, eax

; 498  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN21@GetTokenWo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0005f	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN19@GetTokenWo:
  00064	cc		 int	 3
?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ENDP ; CTextFileLoader::GetTokenWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z PROC ; CTextFileLoader::GetTokenByte, COMDAT
; _this$ = ecx

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 468  : 	CTokenVector * pTokenVector;
; 469  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN18@GetTokenBy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 472  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN18@GetTokenBy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN21@GetTokenBy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00035	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN14@GetTokenBy

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenBy:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 478  : 	*pData = BYTE(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	88 01		 mov	 BYTE PTR [ecx], al

; 479  : 
; 480  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 481  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN18@GetTokenBy:

; 473  : 	{
; 474  : 		//Tracef(" CTextFileLoader::GetTokenByte - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 475  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 481  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN21@GetTokenBy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN19@GetTokenBy:
  00063	cc		 int	 3
?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z ENDP ; CTextFileLoader::GetTokenByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z PROC ; CTextFileLoader::GetTokenBoolean, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 451  : 	CTokenVector * pTokenVector;
; 452  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN18@GetTokenBo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 455  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN18@GetTokenBo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN21@GetTokenBo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00035	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN14@GetTokenBo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@GetTokenBo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 461  : 	*pData = BOOL(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	89 01		 mov	 DWORD PTR [ecx], eax

; 462  : 
; 463  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 464  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN18@GetTokenBo:

; 456  : 	{
; 457  : 		//Tracef(" CTextFileLoader::GetTokenBoolean - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 458  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 464  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN21@GetTokenBo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN19@GetTokenBo:
  00063	cc		 int	 3
?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ENDP ; CTextFileLoader::GetTokenBoolean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_ppTokenVector$ = 12					; size = 4
?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z PROC ; CTextFileLoader::GetTokenVector, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1a		 je	 SHORT $LN5@GetTokenVe

; 426  : 	{
; 427  : 		assert(!"Node to access has not set!");
; 428  : 		return FALSE;
; 429  : 	}
; 430  : 
; 431  : 	CTokenVector* pkRetTokenVector=m_pcurNode->GetTokenVector(c_rstrKey);

  0000a	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000d	e8 00 00 00 00	 call	 ?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ; CTextFileLoader::SGroupNode::GetTokenVector

; 432  : 	if (!pkRetTokenVector)

  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN5@GetTokenVe

; 434  : 
; 435  : 	*ppTokenVector = pkRetTokenVector;

  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _ppTokenVector$[ebp]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 436  : 
; 437  : 	//CTokenVectorMap::iterator itor = m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 438  : 	//if (m_pcurNode->LocalTokenVectorMap.end() == itor)
; 439  : 	//{
; 440  : 		//Tracef(" CTextFileLoader::GetTokenVector - Failed to find the key %s [%s :: %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 441  : 	//	return FALSE;
; 442  : 	//}
; 443  : 
; 444  : 	//*ppTokenVector = &itor->second;
; 445  : 
; 446  : 	return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 447  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN5@GetTokenVe:

; 433  : 		return FALSE;

  00024	33 c0		 xor	 eax, eax

; 447  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ENDP ; CTextFileLoader::GetTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::IsToken, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN2@IsToken

; 414  : 	{
; 415  : 		assert(!"Node to access has not set!");
; 416  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 420  : 	//return m_pcurNode->LocalTokenVectorMap.end() != m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 421  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@IsToken:

; 417  : 	}
; 418  : 
; 419  : 	return m_pcurNode->IsExistTokenVector(c_rstrKey);

  00010	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  00013	e8 00 00 00 00	 call	 ?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::IsExistTokenVector
  00018	0f b6 c0	 movzx	 eax, al

; 420  : 	//return m_pcurNode->LocalTokenVectorMap.end() != m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 421  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::IsToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstrName$ = 8						; size = 4
?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::GetCurrentNodeName, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 401  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2e		 je	 SHORT $LN15@GetCurrent

; 402  : 		return FALSE;
; 403  : 	if (NULL == m_pcurNode->pParentNode)

  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 28		 je	 SHORT $LN15@GetCurrent

; 405  : 
; 406  : 	*pstrName = m_pcurNode->GetGroupName();

  00010	e8 00 00 00 00	 call	 ?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CTextFileLoader::SGroupNode::GetGroupName
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _pstrName$[ebp]
  00018	3b c8		 cmp	 ecx, eax
  0001a	74 13		 je	 SHORT $LN6@GetCurrent

; 2319 :         return _BUF_SIZE <= _Myres;

  0001c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00020	8b d0		 mov	 edx, eax

; 2306 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN11@GetCurrent

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 10		 mov	 edx, DWORD PTR [eax]
$LN11@GetCurrent:

; 3035 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00026	ff 70 10	 push	 DWORD PTR [eax+16]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN6@GetCurrent:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 408  : 	return TRUE;

  0002f	b8 01 00 00 00	 mov	 eax, 1

; 409  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN15@GetCurrent:

; 404  : 		return FALSE;

  00038	33 c0		 xor	 eax, eax

; 409  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::GetCurrentNodeName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetParentNode@CTextFileLoader@@QAEHXZ
_TEXT	SEGMENT
?SetParentNode@CTextFileLoader@@QAEHXZ PROC		; CTextFileLoader::SetParentNode, COMDAT
; _this$ = ecx

; 382  : 	if (!m_pcurNode)

  00000	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00003	85 c0		 test	 eax, eax
  00005	74 10		 je	 SHORT $LN5@SetParentN

; 383  : 	{
; 384  : 		assert(!"Node to access has not set!");
; 385  : 		return FALSE;
; 386  : 	}
; 387  : 
; 388  : 	if (NULL == m_pcurNode->pParentNode)

  00007	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN5@SetParentN

; 392  : 	}
; 393  : 
; 394  : 	m_pcurNode = m_pcurNode->pParentNode;

  0000e	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 395  : 
; 396  : 	return TRUE;

  00011	b8 01 00 00 00	 mov	 eax, 1

; 397  : }

  00016	c3		 ret	 0
$LN5@SetParentN:

; 389  : 	{
; 390  : 		assert(!"Current group node is already top!");
; 391  : 		return FALSE;

  00017	33 c0		 xor	 eax, eax

; 397  : }

  00019	c3		 ret	 0
?SetParentNode@CTextFileLoader@@QAEHXZ ENDP		; CTextFileLoader::SetParentNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?SetChildNode@CTextFileLoader@@QAEHK@Z PROC		; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	if (!m_pcurNode)

  00003	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00006	56		 push	 esi
  00007	85 c0		 test	 eax, eax
  00009	74 22		 je	 SHORT $LN9@SetChildNo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0000e	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 369  : 	if (dwIndex >= m_pcurNode->ChildNodeVector.size())

  00011	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	2b c2		 sub	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 369  : 	if (dwIndex >= m_pcurNode->ChildNodeVector.size())

  00019	3b f0		 cmp	 esi, eax
  0001b	73 10		 jae	 SHORT $LN9@SetChildNo

; 373  : 	}
; 374  : 
; 375  : 	m_pcurNode = m_pcurNode->ChildNodeVector[dwIndex];

  0001d	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]
  00020	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 376  : 
; 377  : 	return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	5e		 pop	 esi

; 378  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN9@SetChildNo:

; 370  : 	{
; 371  : 		assert(!"Node index to set is too large to access!");
; 372  : 		return FALSE;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 378  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetChildNode@CTextFileLoader@@QAEHK@Z ENDP		; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
_TEXT	SEGMENT
_szKey$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_c_rstrKeyHead$ = 8					; size = 4
_dwIndex$ = 12						; size = 4
?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z PROC ; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_rstrKeyHead$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00016	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN6@SetChildNo

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@SetChildNo:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 357  : 	_snprintf(szKey, sizeof(szKey), "%s%02u", c_rstrKeyHead.c_str(), dwIndex);

  0001e	ff 75 0c	 push	 DWORD PTR _dwIndex$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_06POANKNEN@?$CFs?$CF02u@
  00027	8d 45 d8	 lea	 eax, DWORD PTR _szKey$[ebp]
  0002a	6a 21		 push	 33			; 00000021H
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 __snprintf
  00032	83 c4 14	 add	 esp, 20			; 00000014H

; 358  : 
; 359  : 	return SetChildNode(szKey);

  00035	8d 45 d8	 lea	 eax, DWORD PTR _szKey$[ebp]
  00038	8b ce		 mov	 ecx, esi
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHPBD@Z ; CTextFileLoader::SetChildNode

; 360  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	5e		 pop	 esi
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ENDP ; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwKey$1$ = 8						; size = 4
_c_szKey$ = 8						; size = 4
?SetChildNode@CTextFileLoader@@QAEHPBD@Z PROC		; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 334  : 	if (!m_pcurNode)

  0000c	83 7b 70 00	 cmp	 DWORD PTR [ebx+112], 0
  00010	74 61		 je	 SHORT $LN3@SetChildNo

; 340  : 	DWORD dwKey=SGroupNode::GenNameKey(c_szKey, strlen(c_szKey));

  00012	8b 55 08	 mov	 edx, DWORD PTR _c_szKey$[ebp]
  00015	8b c2		 mov	 eax, edx
  00017	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL17@SetChildNo:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL17@SetChildNo
  00027	2b c6		 sub	 eax, esi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1548 :         auto& _My_data = _Mypair._Myval2;

  00030	8b 5b 70	 mov	 ebx, DWORD PTR [ebx+112]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 340  : 	DWORD dwKey=SGroupNode::GenNameKey(c_szKey, strlen(c_szKey));

  00033	8b d0		 mov	 edx, eax
  00035	83 c4 08	 add	 esp, 8
  00038	89 55 08	 mov	 DWORD PTR _dwKey$1$[ebp], edx

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  0003b	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003d	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
  00040	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00043	2b c8		 sub	 ecx, eax
  00045	c1 f9 02	 sar	 ecx, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  00048	85 c9		 test	 ecx, ecx
  0004a	74 27		 je	 SHORT $LN3@SetChildNo
  0004c	0f 1f 40 00	 npad	 4
$LL4@SetChildNo:

; 343  : 	{
; 344  : 		TGroupNode * pGroupNode = m_pcurNode->ChildNodeVector[i];

  00050	8b 3c b0	 mov	 edi, DWORD PTR [eax+esi*4]

; 345  : 		if (pGroupNode->IsGroupNameKey(dwKey))

  00053	8b cf		 mov	 ecx, edi
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ; CTextFileLoader::SGroupNode::IsGroupNameKey
  0005b	84 c0		 test	 al, al
  0005d	75 1f		 jne	 SHORT $LN13@SetChildNo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005f	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  00062	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00063	2b 43 28	 sub	 eax, DWORD PTR [ebx+40]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  00066	8b 55 08	 mov	 edx, DWORD PTR _dwKey$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00069	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  0006c	3b f0		 cmp	 esi, eax
  0006e	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00071	72 dd		 jb	 SHORT $LL4@SetChildNo
$LN3@SetChildNo:
  00073	5f		 pop	 edi

; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;
; 353  : }

  00074	5e		 pop	 esi
  00075	33 c0		 xor	 eax, eax
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN13@SetChildNo:

; 346  : 		{
; 347  : 			m_pcurNode = pGroupNode;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00081	89 78 70	 mov	 DWORD PTR [eax+112], edi

; 348  : 			return TRUE;

  00084	b8 01 00 00 00	 mov	 eax, 1
  00089	5f		 pop	 edi

; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;
; 353  : }

  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?SetChildNode@CTextFileLoader@@QAEHPBD@Z ENDP		; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetChildNodeCount@CTextFileLoader@@QAEKXZ
_TEXT	SEGMENT
?GetChildNodeCount@CTextFileLoader@@QAEKXZ PROC		; CTextFileLoader::GetChildNodeCount, COMDAT
; _this$ = ecx

; 323  : 	if (!m_pcurNode)

  00000	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00003	85 c9		 test	 ecx, ecx
  00005	75 03		 jne	 SHORT $LN2@GetChildNo

; 324  : 	{
; 325  : 		assert(!"Node to access has not set!");
; 326  : 		return 0;

  00007	33 c0		 xor	 eax, eax

; 330  : }

  00009	c3		 ret	 0
$LN2@GetChildNo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000a	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000d	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
  00010	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 330  : }

  00013	c3		 ret	 0
?GetChildNodeCount@CTextFileLoader@@QAEKXZ ENDP		; CTextFileLoader::GetChildNodeCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetTop@CTextFileLoader@@QAEXXZ
_TEXT	SEGMENT
?SetTop@CTextFileLoader@@QAEXXZ PROC			; CTextFileLoader::SetTop, COMDAT
; _this$ = ecx

; 318  : 	m_pcurNode = &m_GlobalNode;

  00000	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]
  00003	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 319  : }

  00006	c3		 ret	 0
?SetTop@CTextFileLoader@@QAEXXZ ENDP			; CTextFileLoader::SetTop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsEmpty@CTextFileLoader@@QAE_NXZ
_TEXT	SEGMENT
?IsEmpty@CTextFileLoader@@QAE_NXZ PROC			; CTextFileLoader::IsEmpty, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4019 :         return size() == 0;

  00000	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00004	0f 94 c0	 sete	 al
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 176  : }

  00007	c3		 ret	 0
?IsEmpty@CTextFileLoader@@QAE_NXZ ENDP			; CTextFileLoader::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetFileName@CTextFileLoader@@QAEPBDXZ
_TEXT	SEGMENT
?GetFileName@CTextFileLoader@@QAEPBDXZ PROC		; CTextFileLoader::GetFileName, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2306 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetFileNam
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 170  : 	return m_strFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetFileNam:

; 171  : }

  0000b	c3		 ret	 0
?GetFileName@CTextFileLoader@@QAEPBDXZ ENDP		; CTextFileLoader::GetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Load@CTextFileLoader@@QAE_NPBD@Z
_TEXT	SEGMENT
_pvData$ = -344						; size = 4
_kFile$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?Load@CTextFileLoader@@QAE_NPBD@Z PROC			; CTextFileLoader::Load, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CTextFileLoader@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx
  00030	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]

; 180  : 	m_strFileName = "";

  00033	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00036	6a 00		 push	 0
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003d	8b cb		 mov	 ecx, ebx
  0003f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 183  : 	CMappedFile kFile;

  00044	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0004a	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 184  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00055	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  0005b	50		 push	 eax
  0005c	57		 push	 edi
  0005d	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00070	84 c0		 test	 al, al
  00072	75 07		 jne	 SHORT $LN2@Load
  00074	32 db		 xor	 bl, bl
  00076	e9 99 00 00 00	 jmp	 $LN7@Load
$LN2@Load:

; 185  : 		return false;
; 186  : 
; 187  : 	if (m_dwBufCapacity<kFile.Size())

  0007b	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00081	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00086	39 46 24	 cmp	 DWORD PTR [esi+36], eax
  00089	73 2c		 jae	 SHORT $LN3@Load

; 188  : 	{
; 189  : 		m_dwBufCapacity=kFile.Size();

  0008b	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00091	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00096	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 190  : 
; 191  : 		if (m_acBufData)

  00099	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009c	85 c0		 test	 eax, eax
  0009e	74 09		 je	 SHORT $LN4@Load

; 192  : 			delete [] m_acBufData;

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a6	83 c4 04	 add	 esp, 4
$LN4@Load:

; 193  : 
; 194  : 		m_acBufData=new char[m_dwBufCapacity];

  000a9	ff 76 24	 push	 DWORD PTR [esi+36]
  000ac	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000b1	83 c4 04	 add	 esp, 4
  000b4	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN3@Load:

; 195  : 	}
; 196  : 
; 197  : 	m_dwBufSize=kFile.Size();

  000b7	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  000bd	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 198  : 	memcpy(m_acBufData, pvData, m_dwBufSize);

  000c2	50		 push	 eax
  000c3	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  000c9	89 46 20	 mov	 DWORD PTR [esi+32], eax
  000cc	ff 76 1c	 push	 DWORD PTR [esi+28]
  000cf	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d4	8b cf		 mov	 ecx, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 198  : 	memcpy(m_acBufData, pvData, m_dwBufSize);

  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000d9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000dc	0f 1f 40 00	 npad	 4
$LL20@Load:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	41		 inc	 ecx
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL20@Load
  000e7	2b ca		 sub	 ecx, edx

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000e9	51		 push	 ecx
  000ea	57		 push	 edi
  000eb	8b cb		 mov	 ecx, ebx
  000ed	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 203  : 	m_textFileLoader.Bind(m_dwBufSize, m_acBufData);

  000f2	ff 76 1c	 push	 DWORD PTR [esi+28]
  000f5	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  000f8	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  000ff	ff 76 20	 push	 DWORD PTR [esi+32]
  00102	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind

; 204  : 	return LoadGroup(&m_GlobalNode);

  00107	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  0010a	8b ce		 mov	 ecx, esi
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
  00112	8a d8		 mov	 bl, al
$LN7@Load:
  00114	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0011a	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0011f	8a c3		 mov	 al, bl

; 205  : }

  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012b	59		 pop	 ecx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00132	33 cd		 xor	 ecx, ebp
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CTextFileLoader@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Load@CTextFileLoader@@QAE_NPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-348]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CTextFileLoader@@QAE_NPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CTextFileLoader@@QAE_NPBD@Z ENDP			; CTextFileLoader::Load
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Destroy@CTextFileLoader@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CTextFileLoader@@QAEXXZ PROC			; CTextFileLoader::Destroy, COMDAT
; _this$ = ecx

; 135  : 	__DestroyGroupNodeVector();

  00000	e9 00 00 00 00	 jmp	 ?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ; CTextFileLoader::__DestroyGroupNodeVector
?Destroy@CTextFileLoader@@QAEXXZ ENDP			; CTextFileLoader::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??1CTextFileLoader@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTextFileLoader@@UAE@XZ PROC				; CTextFileLoader::~CTextFileLoader, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTextFileLoader@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextFileLoader@@6B@

; 154  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CTextFileLoader@@QAEXXZ ; CTextFileLoader::Destroy

; 155  : 
; 156  : 	if (m_acBufData)

  00030	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00033	85 c0		 test	 eax, eax
  00035	74 09		 je	 SHORT $LN2@CTextFileL

; 157  : 		delete [] m_acBufData;

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003d	83 c4 04	 add	 esp, 4
$LN2@CTextFileL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00040	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00043	85 c0		 test	 eax, eax
  00045	74 45		 je	 SHORT $LN7@CTextFileL

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00047	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  0004a	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 16		 jb	 SHORT $LN23@CTextFileL

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	0f 87 83 00 00
	00		 ja	 $LN48@CTextFileL

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006b	8b c2		 mov	 eax, edx
$LN23@CTextFileL:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0006d	51		 push	 ecx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00074	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0007b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0007e	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 1769 :             _Myend   = nullptr;

  00085	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN7@CTextFileL:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 158  : }

  0008c	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0008f	e8 00 00 00 00	 call	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
  00094	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00097	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0009c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0009f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a2	72 28		 jb	 SHORT $LN41@CTextFileL
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000a7	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ae	72 12		 jb	 SHORT $LN51@CTextFileL

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000be	77 2e		 ja	 SHORT $LN48@CTextFileL

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000c0	8b c2		 mov	 eax, edx
$LN51@CTextFileL:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000c2	51		 push	 ecx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c9	83 c4 08	 add	 esp, 8
$LN41@CTextFileL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  000cc	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000d3	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000da	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 158  : }

  000de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e8	59		 pop	 ecx
  000e9	5e		 pop	 esi
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
$LN48@CTextFileL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ee	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@CTextFileL:
  000f3	cc		 int	 3
  000f4	cc		 int	 3
  000f5	cc		 int	 3
  000f6	cc		 int	 3
  000f7	cc		 int	 3
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTextFileLoader@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTextFileLoader@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTextFileLoader@@UAE@XZ ENDP				; CTextFileLoader::~CTextFileLoader
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??0CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTextFileLoader@@QAE@XZ PROC				; CTextFileLoader::CTextFileLoader, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextFileLoader@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00030	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 4596 :         _My_data._Mysize = 0;

  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0003e	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00045	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 139  : {

  00049	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader
  00058	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	e8 00 00 00 00	 call	 ??0SGroupNode@CTextFileLoader@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00064	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  0006b	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00072	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 140  : 	SetTop();

  00079	8b ce		 mov	 ecx, esi
  0007b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007f	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00084	6a 06		 push	 6
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_06FJKEMHGD@global@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 146  : 	m_GlobalNode.m_strGroupName = "global";

  0008b	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0008e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00095	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0009c	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 147  : 	m_GlobalNode.pParentNode = NULL;

  000a8	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000af	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  000b2	2b 46 74	 sub	 eax, DWORD PTR [esi+116]
  000b5	c1 f8 02	 sar	 eax, 2

; 1371 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000b8	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000bd	73 0d		 jae	 SHORT $LN39@CTextFileL

; 1372 :             if (_Newcapacity > max_size()) {
; 1373 :                 _Xlength();
; 1374 :             }
; 1375 : 
; 1376 :             _Reallocate_exactly(_Newcapacity);

  000bf	68 80 00 00 00	 push	 128			; 00000080H
  000c4	8d 4e 74	 lea	 ecx, DWORD PTR [esi+116]
  000c7	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXI@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Reallocate_exactly
$LN39@CTextFileL:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 150  : }

  000cc	8b c6		 mov	 eax, esi
  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 74	 add	 ecx, 116		; 00000074H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$??0CTextFileLoader@@QAE@XZ:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTextFileLoader@@QAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTextFileLoader@@QAE@XZ ENDP				; CTextFileLoader::CTextFileLoader
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Cache@CTextFileLoader@@SAPAV1@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
__Loc$3 = -32						; size = 12
__Loc$4 = -32						; size = 12
$T5 = -20						; size = 8
$T6 = -20						; size = 8
$T7 = -16						; size = 4
$T8 = -16						; size = 4
_dwNameKey$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?Cache@CTextFileLoader@@SAPAV1@PBD@Z PROC		; CTextFileLoader::Cache, COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 93   : 	DWORD dwNameKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  00028	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  0002b	8b ca		 mov	 ecx, edx
  0002d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL161@Cache:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL161@Cache
  00037	2b ce		 sub	 ecx, esi
  00039	51		 push	 ecx
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00040	83 c4 08	 add	 esp, 8
  00043	8b d8		 mov	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00045	8d 45 f0	 lea	 eax, DWORD PTR _dwNameKey$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 93   : 	DWORD dwNameKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  00048	89 5d f0	 mov	 DWORD PTR _dwNameKey$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00050	50		 push	 eax
  00051	8d 45 e0	 lea	 eax, DWORD PTR __Loc$4[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0005a	8b 75 e8	 mov	 esi, DWORD PTR __Loc$4[ebp+8]
  0005d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00061	0f 85 a3 00 00
	00		 jne	 $LN2@Cache
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00067	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006a	0f 82 9a 00 00
	00		 jb	 $LN2@Cache
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 95   : 	if (ms_kMap_dwNameKey_pkTextFileLoader.end()!=f)

  00070	39 35 00 00 00
	00		 cmp	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A, esi
  00076	0f 84 8e 00 00
	00		 je	 $LN2@Cache

; 96   : 	{
; 97   : 		if (!ms_isCacheMode)

  0007c	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_isCacheMode@CTextFileLoader@@1_NA, 0 ; CTextFileLoader::ms_isCacheMode
  00083	75 66		 jne	 SHORT $LN157@Cache

; 98   : 		{
; 99   : 			delete f->second;

  00085	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00088	85 c9		 test	 ecx, ecx
  0008a	74 06		 je	 SHORT $LN5@Cache
  0008c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008e	6a 01		 push	 1
  00090	ff 10		 call	 DWORD PTR [eax]
$LN5@Cache:

; 100  : 
; 101  : 			CTextFileLoader* pkNewTextFileLoader=new CTextFileLoader;

  00092	68 80 00 00 00	 push	 128			; 00000080H
  00097	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
  000a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a9	85 c0		 test	 eax, eax
  000ab	74 0b		 je	 SHORT $LN7@Cache
  000ad	8b c8		 mov	 ecx, eax
  000af	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader
  000b4	8b f8		 mov	 edi, eax
  000b6	eb 02		 jmp	 SHORT $LN8@Cache
$LN7@Cache:
  000b8	33 ff		 xor	 edi, edi
$LN8@Cache:

; 102  : 			pkNewTextFileLoader->Load(c_szFileName);

  000ba	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  000bd	8b cf		 mov	 ecx, edi
  000bf	50		 push	 eax
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load

; 104  : 		}
; 105  : 		f->second->SetTop();

  000cc	8b cf		 mov	 ecx, edi
  000ce	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d1	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop

; 106  : 		return f->second;

  000d6	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 114  : }

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN157@Cache:

; 103  : 			f->second=pkNewTextFileLoader;

  000eb	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 104  : 		}
; 105  : 		f->second->SetTop();

  000ee	8b cf		 mov	 ecx, edi
  000f0	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop

; 106  : 		return f->second;

  000f5	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 114  : }

  000f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00102	59		 pop	 ecx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
$LN2@Cache:

; 107  : 	}
; 108  : 
; 109  : 	CTextFileLoader* pkNewTextFileLoader=new CTextFileLoader;

  0010a	68 80 00 00 00	 push	 128			; 00000080H
  0010f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00114	83 c4 04	 add	 esp, 4
  00117	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
  0011a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00121	85 c0		 test	 eax, eax
  00123	74 0b		 je	 SHORT $LN9@Cache
  00125	8b c8		 mov	 ecx, eax
  00127	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader
  0012c	8b f8		 mov	 edi, eax
  0012e	eb 02		 jmp	 SHORT $LN10@Cache
$LN9@Cache:
  00130	33 ff		 xor	 edi, edi
$LN10@Cache:

; 110  : 	pkNewTextFileLoader->Load(c_szFileName);

  00132	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  00135	8b cf		 mov	 ecx, edi
  00137	50		 push	 eax
  00138	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013f	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  00144	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00147	89 5d ec	 mov	 DWORD PTR $T6[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  0014a	50		 push	 eax
  0014b	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0014e	89 7d f0	 mov	 DWORD PTR $T6[ebp+4], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  00151	50		 push	 eax
  00152	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00157	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>
  0015c	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00160	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00163	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00168	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0016c	75 05		 jne	 SHORT $LN76@Cache
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  0016e	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00171	73 56		 jae	 SHORT $LN146@Cache
$LN76@Cache:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  00173	81 3d 04 00 00
	00 aa aa aa 0a	 cmp	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A+4, 178956970 ; 0aaaaaaaH
  0017d	74 5e		 je	 SHORT $LN165@Cache

; 1020 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0017f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00185	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader

; 85   :         return ::operator new(_Bytes);

  0018c	6a 18		 push	 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0018e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00195	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  0019c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001a1	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001a9	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001ac	50		 push	 eax
  001ad	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]

; 812  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001b0	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001b3	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001b6	89 30		 mov	 DWORD PTR [eax], esi

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  001b8	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  001bb	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 816  :         this->_Ptr->_Color = _Red;

  001be	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001c4	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
$LN146@Cache:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 113  : 	return pkNewTextFileLoader;

  001c9	8b c7		 mov	 eax, edi

; 114  : }

  001cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d5	59		 pop	 ecx
  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	5b		 pop	 ebx
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
$LN165@Cache:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1624 :             _Throw_tree_length_error();

  001dd	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN163@Cache:
  001e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$1:
  00012	68 80 00 00 00	 push	 128			; 00000080H
  00017	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$4:
  00024	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?Cache@CTextFileLoader@@SAPAV1@PBD@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Cache@CTextFileLoader@@SAPAV1@PBD@Z ENDP		; CTextFileLoader::Cache
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetCacheMode@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?SetCacheMode@CTextFileLoader@@SAXXZ PROC		; CTextFileLoader::SetCacheMode, COMDAT

; 118  : 	ms_isCacheMode=true;

  00000	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?ms_isCacheMode@CTextFileLoader@@1_NA, 1 ; CTextFileLoader::ms_isCacheMode

; 119  : }

  00007	c3		 ret	 0
?SetCacheMode@CTextFileLoader@@SAXXZ ENDP		; CTextFileLoader::SetCacheMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?DestroySystem@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CTextFileLoader@@SAXXZ PROC		; CTextFileLoader::DestroySystem, COMDAT

; 122  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
  00008	8b 37		 mov	 esi, DWORD PTR [edi]

; 236  :         return this->_Ptr == _Right._Ptr;

  0000a	3b f7		 cmp	 esi, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 125  : 		for (i=ms_kMap_dwNameKey_pkTextFileLoader.begin(); i!=ms_kMap_dwNameKey_pkTextFileLoader.end(); ++i)

  0000c	74 55		 je	 SHORT $LN3@DestroySys
  0000e	66 90		 npad	 2
$LL30@DestroySys:

; 126  : 			delete i->second;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	85 c9		 test	 ecx, ecx
  00015	74 0c		 je	 SHORT $LN2@DestroySys
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
  0001d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
$LN2@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00023	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	74 1d		 je	 SHORT $LN29@DestroySys

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00033	75 10		 jne	 SHORT $LN104@DestroySys
$LL27@DestroySys:
  00035	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00038	75 0b		 jne	 SHORT $LN104@DestroySys

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0003a	8b f0		 mov	 esi, eax
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00043	74 f0		 je	 SHORT $LL27@DestroySys
$LN104@DestroySys:

; 56   :             }
; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  00045	8b f0		 mov	 esi, eax

; 59   :         } else {

  00047	eb 16		 jmp	 SHORT $LN34@DestroySys
$LN29@DestroySys:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00049	8b f0		 mov	 esi, eax

; 457  :         while (!_Pnode->_Left->_Isnil) {

  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00051	75 0c		 jne	 SHORT $LN34@DestroySys
$LL33@DestroySys:
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]

; 458  :             _Pnode = _Pnode->_Left;

  00055	8b f1		 mov	 esi, ecx
  00057	8b c8		 mov	 ecx, eax
  00059	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005d	74 f4		 je	 SHORT $LL33@DestroySys
$LN34@DestroySys:

; 236  :         return this->_Ptr == _Right._Ptr;

  0005f	3b f7		 cmp	 esi, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 125  : 		for (i=ms_kMap_dwNameKey_pkTextFileLoader.begin(); i!=ms_kMap_dwNameKey_pkTextFileLoader.end(); ++i)

  00061	75 ad		 jne	 SHORT $LL30@DestroySys
$LN3@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00063	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00066	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0006a	75 2b		 jne	 SHORT $LN58@DestroySys
  0006c	0f 1f 40 00	 npad	 4
$LL57@DestroySys:

; 750  :             _Erase_tree(_Al, _Rootnode->_Right);

  00070	ff 76 08	 push	 DWORD PTR [esi+8]
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00078	68 00 00 00 00	 push	 OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  0007d	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00082	8b c6		 mov	 eax, esi

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  00084	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00086	6a 18		 push	 24			; 00000018H
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 749  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00091	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00095	74 d9		 je	 SHORT $LL57@DestroySys
$LN58@DestroySys:

; 1352 :         _Head->_Parent  = _Head;

  00097	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1353 :         _Head->_Left    = _Head;

  0009a	89 3f		 mov	 DWORD PTR [edi], edi

; 1354 :         _Head->_Right   = _Head;

  0009c	89 7f 08	 mov	 DWORD PTR [edi+8], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 130  : 	SGroupNode::DestroySystem();

  0009f	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1355 :         _Scary->_Mysize = 0;

  000a0	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A+4, 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 130  : 	SGroupNode::DestroySystem();

  000aa	5e		 pop	 esi
  000ab	e9 00 00 00 00	 jmp	 ?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ; CTextFileLoader::SGroupNode::DestroySystem
?DestroySystem@CTextFileLoader@@SAXXZ ENDP		; CTextFileLoader::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1SGroupNode@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
??1SGroupNode@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::SGroupNode::~SGroupNode, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
  00003	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00006	85 c0		 test	 eax, eax
  00008	74 45		 je	 SHORT $LN6@SGroupNode

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0000d	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 16		 jb	 SHORT $LN22@SGroupNode

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	0f 87 84 00 00
	00		 ja	 $LN77@SGroupNode

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN22@SGroupNode:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00037	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0003e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00041	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 1769 :             _Myend   = nullptr;

  00048	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN6@SGroupNode:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 758  :         _Erase_tree(_Al, _Myhead->_Parent);

  0004f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00052	56		 push	 esi
  00053	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00056	8b ce		 mov	 ecx, esi
  00058	ff 70 04	 push	 DWORD PTR [eax+4]
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00061	6a 20		 push	 32			; 00000020H
  00063	ff 36		 push	 DWORD PTR [esi]
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0006a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0006d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00070	5e		 pop	 esi
  00071	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00074	72 28		 jb	 SHORT $LN70@SGroupNode
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00079	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00080	72 12		 jb	 SHORT $LN80@SGroupNode

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00082	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00085	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00088	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00090	77 20		 ja	 SHORT $LN77@SGroupNode

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00092	8b c2		 mov	 eax, edx
$LN80@SGroupNode:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009b	83 c4 08	 add	 esp, 8
$LN70@SGroupNode:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  0009e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000a5	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000ac	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  000b0	5f		 pop	 edi
  000b1	c3		 ret	 0
$LN77@SGroupNode:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@SGroupNode:
  000b7	cc		 int	 3
??1SGroupNode@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::SGroupNode::~SGroupNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0SGroupNode@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SGroupNode@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::SGroupNode::SGroupNode, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SGroupNode@CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 4596 :         _My_data._Mysize = 0;

  00033	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0003a	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00045	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  0004f	6a 20		 push	 32			; 00000020H
  00051	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 441  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00054	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0005a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00066	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 350  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00069	89 00		 mov	 DWORD PTR [eax], eax

; 351  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0006b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 352  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0006e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 353  :         _Pnode->_Color = _Black;

  00071	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1925 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00077	89 06		 mov	 DWORD PTR [esi], eax
  00079	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0007b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00082	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00089	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SGroupNode@CTextFileLoader@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0SGroupNode@CTextFileLoader@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SGroupNode@CTextFileLoader@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SGroupNode@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::SGroupNode::SGroupNode
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ PROC	; CTextFileLoader::SGroupNode::DestroySystem, COMDAT

; 86   : {

  00000	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 269  :     const auto _ULast = _Get_unwrapped(_Last);

  00001	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 86   : {

  00007	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  00008	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  0000e	3b f3		 cmp	 esi, ebx
  00010	74 38		 je	 SHORT $LN33@DestroySys
  00012	57		 push	 edi
$LL20@DestroySys:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	85 ff		 test	 edi, edi
  00017	74 12		 je	 SHORT $LN18@DestroySys
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
  00020	6a 34		 push	 52			; 00000034H
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0002b	83 c6 04	 add	 esi, 4
  0002e	3b f3		 cmp	 esi, ebx
  00030	75 e1		 jne	 SHORT $LL20@DestroySys
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  00032	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  00037	5f		 pop	 edi
  00038	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 88   : }

  0003d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16
  00042	5e		 pop	 esi
  00043	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, eax
  00048	5b		 pop	 ebx
  00049	c3		 ret	 0
$LN33@DestroySys:
  0004a	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  0004f	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8, esi
  00055	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 88   : }

  00056	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, eax
  0005b	5b		 pop	 ebx
  0005c	c3		 ret	 0
?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ENDP	; CTextFileLoader::SGroupNode::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkNode$ = 8						; size = 4
?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z PROC	; CTextFileLoader::SGroupNode::Delete, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 76   : 	pkNode->m_kMap_dwKey_kVct_stToken.clear();

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pkNode$[ebp]
  00007	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1350 :         auto _Head = _Scary->_Myhead;

  00008	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 75   : {

  0000b	57		 push	 edi

; 76   : 	pkNode->m_kMap_dwKey_kVct_stToken.clear();

  0000c	8d 7b 1c	 lea	 edi, DWORD PTR [ebx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0000f	8b cf		 mov	 ecx, edi
  00011	ff 76 04	 push	 DWORD PTR [esi+4]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >

; 1352 :         _Head->_Parent  = _Head;

  0001a	89 76 04	 mov	 DWORD PTR [esi+4], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 78   : 	pkNode->m_strGroupName="";

  0001d	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         _Head->_Left    = _Head;

  00020	89 36		 mov	 DWORD PTR [esi], esi

; 1354 :         _Head->_Right   = _Head;

  00022	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1355 :         _Scary->_Mysize = 0;

  00025	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 77   : 	pkNode->ChildNodeVector.clear();

  0002c	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002f	6a 00		 push	 0
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 77   : 	pkNode->ChildNodeVector.clear();

  00036	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 79   : 	pkNode->m_dwGroupNameKey=0;

  0003e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00044	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 80   : 	ms_kPool.Free(pkNode);

  00049	89 5d 08	 mov	 DWORD PTR _pkData$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0004c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+24
  00052	74 0e		 je	 SHORT $LN16@Delete
  00054	5f		 pop	 edi

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00055	89 18		 mov	 DWORD PTR [eax], ebx

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00057	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 81   : }

  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN16@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00062	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00065	51		 push	 ecx
  00066	50		 push	 eax
  00067	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16
  0006c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
  00071	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 81   : }

  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z ENDP	; CTextFileLoader::SGroupNode::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ PROC	; CTextFileLoader::SGroupNode::New, COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16, ecx
  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	6a 34		 push	 52			; 00000034H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0SGroupNode@CTextFileLoader@@QAE@XZ
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+12
  00070	74 21		 je	 SHORT $LN14@New

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 71   : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 72   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroupNode@CTextFileLoader@@@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEPAPAUSGroupNode@CTextFileLoader@@QAPAU23@ABQAU23@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Emplace_reallocate<CTextFileLoader::SGroupNode * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 71   : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 72   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1624 :         return _My_data._Mylast[-1];

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1403 :         --_Mylast;

  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 72   : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ$0:
  00000	6a 34		 push	 52			; 00000034H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ ENDP	; CTextFileLoader::SGroupNode::New
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1736 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1737 :         // orphan all iterators, discard old array, acquire new array
; 1738 :         auto& _My_data    = _Mypair._Myval2;
; 1739 :         pointer& _Myfirst = _My_data._Myfirst;
; 1740 :         pointer& _Mylast  = _My_data._Mylast;
; 1741 :         pointer& _Myend   = _My_data._Myend;
; 1742 : 
; 1743 :         _My_data._Orphan_all();
; 1744 : 
; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1753 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXI@Z PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1299 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1299 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1300 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1301 :         auto& _My_data    = _Mypair._Myval2;
; 1302 :         pointer& _Myfirst = _My_data._Myfirst;
; 1303 :         pointer& _Mylast  = _My_data._Mylast;
; 1304 : 
; 1305 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN59@Reallocate

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 85   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN43@Reallocate

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN53@Reallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN50@Reallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN53@Reallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN43@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1317 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN50@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Reallocate:

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN57@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 717  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 650  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 651  :         ++_Mysize;
; 652  :         const auto _Head  = _Myhead;
; 653  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 655  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 656  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 657  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 658  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 717  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 659  :             return _Newnode;
; 660  :         }
; 661  : 
; 662  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 663  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 665  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 666  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 668  :             }
; 669  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 670  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 671  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 672  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 673  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 678  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 679  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 680  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 681  :                     _Pnode->_Parent->_Color          = _Black;
; 682  :                     _Parent_sibling->_Color          = _Black;
; 683  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 684  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 685  :                 } else { // parent's sibling has red and black children
; 686  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 687  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 483  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 688  :                         _Lrotate(_Pnode);
; 689  :                     }
; 690  : 
; 691  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 693  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 694  :                 }
; 695  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 696  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 697  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 698  :                     _Pnode->_Parent->_Color          = _Black;
; 699  :                     _Parent_sibling->_Color          = _Black;
; 700  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 701  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 702  :                 } else { // parent's sibling has red and black children
; 703  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 704  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 487  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 488  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 489  : 
; 490  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 491  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 492  :         }
; 493  : 
; 494  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 495  : 
; 496  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 497  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 498  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 499  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 500  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 501  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 502  :         }
; 503  : 
; 504  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 505  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 705  :                         _Rrotate(_Pnode);
; 706  :                     }
; 707  : 
; 708  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 710  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 465  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 466  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 467  : 
; 468  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 469  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 470  :         }
; 471  : 
; 472  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 473  : 
; 474  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 475  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 476  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 477  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 478  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 479  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 480  :         }
; 481  : 
; 482  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 674  :             }
; 675  :         }
; 676  : 
; 677  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 711  :                 }
; 712  :             }
; 713  :         }
; 714  : 
; 715  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 716  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 717  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
_TEXT	SEGMENT
$T2 = -60						; size = 16
$T3 = -44						; size = 12
__Loc$4 = -32						; size = 12
__Backout$5 = -32					; size = 12
$T6 = -20						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Rightlast$1$ = 8					; size = 4
_c_rstGroupName$ = 8					; size = 4
__Guard$7 = 12						; size = 4
_c_rkVct_stToken$ = 12					; size = 4
?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z PROC ; CTextFileLoader::SGroupNode::InsertTokenVector, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
  0002e	8b d0		 mov	 edx, eax

; 2306 :         if (_Large_string_engaged()) {

  00030	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00034	72 02		 jb	 SHORT $LN7@InsertToke

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@InsertToke:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00038	ff 70 10	 push	 DWORD PTR [eax+16]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 559  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rkVct_stToken$[ebp]

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00044	33 db		 xor	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 193  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00046	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00049	33 f6		 xor	 esi, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0004b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004e	89 5d c8	 mov	 DWORD PTR $T2[ebp+4], ebx
  00051	89 75 cc	 mov	 DWORD PTR $T2[ebp+8], esi

; 560  :         const pointer _Rightlast  = _Right_data._Mylast;

  00054	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00057	8b 39		 mov	 edi, DWORD PTR [ecx]

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00059	89 5d d0	 mov	 DWORD PTR $T2[ebp+12], ebx

; 560  :         const pointer _Rightlast  = _Right_data._Mylast;

  0005c	89 45 08	 mov	 DWORD PTR __Rightlast$1$[ebp], eax

; 561  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 562  :         if (_Rightfirst != _Rightlast) {

  0005f	3b f8		 cmp	 edi, eax
  00061	0f 84 94 00 00
	00		 je	 $LN100@InsertToke

; 563  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  00067	8b c8		 mov	 ecx, eax
  00069	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0006e	2b cf		 sub	 ecx, edi
  00070	f7 e9		 imul	 ecx
  00072	c1 fa 02	 sar	 edx, 2
  00075	8b c2		 mov	 eax, edx
  00077	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0007c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00081	0f 87 8e 01 00
	00		 ja	 $LN262@InsertToke

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00087	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  0008a	c1 e3 03	 shl	 ebx, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008d	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00093	72 0d		 jb	 SHORT $LN31@InsertToke

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00095	53		 push	 ebx
  00096	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009b	83 c4 04	 add	 esp, 4
  0009e	8b f0		 mov	 esi, eax
  000a0	eb 13		 jmp	 SHORT $LN30@InsertToke
$LN31@InsertToke:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000a2	85 db		 test	 ebx, ebx
  000a4	74 0d		 je	 SHORT $LN32@InsertToke

; 85   :         return ::operator new(_Bytes);

  000a6	53		 push	 ebx
  000a7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ac	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000af	8b f0		 mov	 esi, eax
  000b1	eb 02		 jmp	 SHORT $LN30@InsertToke
$LN32@InsertToke:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000b3	33 f6		 xor	 esi, esi
$LN30@InsertToke:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000b5	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  000b8	89 75 c8	 mov	 DWORD PTR $T2[ebp+4], esi
  000bb	89 45 d0	 mov	 DWORD PTR $T2[ebp+12], eax

; 564  :             _Tidy_guard<vector> _Guard{this};

  000be	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp+4]

; 1713 :         _Mylast            = _Newvec;

  000c1	89 75 cc	 mov	 DWORD PTR $T2[ebp+8], esi

; 564  :             _Tidy_guard<vector> _Guard{this};

  000c4	89 45 0c	 mov	 DWORD PTR __Guard$7[ebp], eax
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000ce	89 75 e0	 mov	 DWORD PTR __Backout$5[ebp], esi
  000d1	89 75 e4	 mov	 DWORD PTR __Backout$5[ebp+4], esi
  000d4	89 45 e8	 mov	 DWORD PTR __Backout$5[ebp+8], eax
  000d7	8b 5d 08	 mov	 ebx, DWORD PTR __Rightlast$1$[ebp]

; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000da	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000de	66 90		 npad	 2
$LL43@InsertToke:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000e0	57		 push	 edi
  000e1	8b ce		 mov	 ecx, esi
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1632 :         ++_Last;

  000e8	83 c6 18	 add	 esi, 24			; 00000018H

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000eb	83 c7 18	 add	 edi, 24			; 00000018H

; 1632 :         ++_Last;

  000ee	89 75 e4	 mov	 DWORD PTR __Backout$5[ebp+4], esi

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000f1	3b fb		 cmp	 edi, ebx
  000f3	75 eb		 jne	 SHORT $LL43@InsertToke
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 565  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  000f5	8b 5d c8	 mov	 ebx, DWORD PTR $T2[ebp+4]
  000f8	89 75 cc	 mov	 DWORD PTR $T2[ebp+8], esi
$LN100@InsertToke:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 39   : 	m_kMap_dwKey_kVct_stToken.insert(std::map<DWORD, CTokenVector>::value_type(dwGroupNameKey, c_rkVct_stToken));

  000fb	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  000fe	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00101	50		 push	 eax
  00102	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 39   : 	m_kMap_dwKey_kVct_stToken.insert(std::map<DWORD, CTokenVector>::value_type(dwGroupNameKey, c_rkVct_stToken));

  00105	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1014 :             _Loc                = _Find_lower_bound(_Keyval);

  0010c	50		 push	 eax
  0010d	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00110	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
  00115	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00118	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0011c	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00121	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00125	75 08		 jne	 SHORT $LN112@InsertToke
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00127	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
  0012a	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0012d	73 7d		 jae	 SHORT $LN209@InsertToke
$LN112@InsertToke:

; 1623 :         if (max_size() == _Get_scary()->_Mysize) {

  0012f	81 7f 20 ff ff
	ff 07		 cmp	 DWORD PTR [edi+32], 134217727 ; 07ffffffH
  00136	0f 84 de 00 00
	00		 je	 $LN263@InsertToke
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0013c	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1020 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0013f	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1012 :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00142	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00145	89 5d ec	 mov	 DWORD PTR $T6[ebp], ebx

; 85   :         return ::operator new(_Bytes);

  00148	6a 20		 push	 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 790  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0014a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1019 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0014e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0

; 85   :         return ::operator new(_Bytes);

  00155	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 213  :     pair(pair&&)      = default;

  0015a	8b 4d c4	 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 85   :         return ::operator new(_Bytes);

  0015d	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 213  :     pair(pair&&)      = default;

  00160	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00163	8b 4d c8	 mov	 ecx, DWORD PTR $T2[ebp+4]
  00166	8b 75 d0	 mov	 esi, DWORD PTR $T2[ebp+12]
  00169	8b 55 cc	 mov	 edx, DWORD PTR $T2[ebp+8]

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0016c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+12], 0
  00173	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
  0017a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00181	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00184	8b cb		 mov	 ecx, ebx
  00186	50		 push	 eax
  00187	ff 75 e4	 push	 DWORD PTR __Loc$4[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0018a	89 50 18	 mov	 DWORD PTR [eax+24], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0018d	ff 75 e0	 push	 DWORD PTR __Loc$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 404  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00190	89 70 1c	 mov	 DWORD PTR [eax+28], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 813  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00193	89 38		 mov	 DWORD PTR [eax], edi

; 814  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00195	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 815  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00198	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 816  :         this->_Ptr->_Color = _Red;

  0019b	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1039 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001a1	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  001a6	8b 75 cc	 mov	 esi, DWORD PTR $T2[ebp+8]
  001a9	8b 5d c8	 mov	 ebx, DWORD PTR $T2[ebp+4]
$LN209@InsertToke:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  001ac	85 db		 test	 ebx, ebx
  001ae	74 51		 je	 SHORT $LN225@InsertToke

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  001b0	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  001b3	51		 push	 ecx
  001b4	56		 push	 esi
  001b5	53		 push	 ebx
  001b6	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001bb	8b 4d d0	 mov	 ecx, DWORD PTR $T2[ebp+12]
  001be	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001c3	8b 75 c8	 mov	 esi, DWORD PTR $T2[ebp+4]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001c9	2b ce		 sub	 ecx, esi
  001cb	f7 e9		 imul	 ecx
  001cd	c1 fa 02	 sar	 edx, 2
  001d0	8b c2		 mov	 eax, edx
  001d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d5	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d7	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001da	8b c6		 mov	 eax, esi
  001dc	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001df	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e5	72 10		 jb	 SHORT $LN243@InsertToke

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e7	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  001ea	83 c1 23	 add	 ecx, 35			; 00000023H
  001ed	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ef	83 c0 fc	 add	 eax, -4			; fffffffcH
  001f2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f5	77 28		 ja	 SHORT $LN264@InsertToke
$LN243@InsertToke:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001f7	51		 push	 ecx
  001f8	56		 push	 esi
  001f9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001fe	83 c4 08	 add	 esp, 8
$LN225@InsertToke:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 40   : }

  00201	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00204	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020b	59		 pop	 ecx
  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	5b		 pop	 ebx
  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c2 08 00	 ret	 8
$LN262@InsertToke:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00215	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN263@InsertToke:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1624 :             _Throw_tree_length_error();

  0021a	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN264@InsertToke:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN260@InsertToke:
  00224	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Guard$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$0:
  00010	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$7:
  00018	8d 4d ec	 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ENDP ; CTextFileLoader::SGroupNode::InsertTokenVector
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwGroupNameKey$ = 8					; size = 4
_c_rstGroupName$ = 8					; size = 4
?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::SGroupNode::IsExistTokenVector, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 26   : {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00009	8b d0		 mov	 edx, eax

; 2319 :         return _BUF_SIZE <= _Myres;

  0000b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 26   : {

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@IsExistTok

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@IsExistTok:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  00020	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00023	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00026	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _dwGroupNameKey$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0002b	89 7d 08	 mov	 DWORD PTR _dwGroupNameKey$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0003b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003f	75 14		 jne	 SHORT $LN39@IsExistTok
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00041	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00044	72 0f		 jb	 SHORT $LN39@IsExistTok

; 236  :         return this->_Ptr == _Right._Ptr;

  00046	39 46 1c	 cmp	 DWORD PTR [esi+28], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 29   : 	if (m_kMap_dwKey_kVct_stToken.end()==m_kMap_dwKey_kVct_stToken.find(dwGroupNameKey))

  00049	74 0a		 je	 SHORT $LN39@IsExistTok

; 31   : 
; 32   : 	return true;

  0004b	5f		 pop	 edi
  0004c	b0 01		 mov	 al, 1

; 33   : }

  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN39@IsExistTok:
  00055	5f		 pop	 edi

; 30   : 		return false;

  00056	32 c0		 xor	 al, al

; 33   : }

  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::SGroupNode::IsExistTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwGroupNameKey$ = 8					; size = 4
_c_rstGroupName$ = 8					; size = 4
?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z PROC ; CTextFileLoader::SGroupNode::GetTokenVector, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 15   : {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00009	8b d0		 mov	 edx, eax

; 2319 :         return _BUF_SIZE <= _Myres;

  0000b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 15   : {

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@GetTokenVe

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@GetTokenVe:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  00020	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00023	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00026	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _dwGroupNameKey$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0002b	89 75 08	 mov	 DWORD PTR _dwGroupNameKey$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1361 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0003b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003f	75 15		 jne	 SHORT $LN45@GetTokenVe
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstddef

; 127  :         return _Left < _Right;

  00041	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00044	72 10		 jb	 SHORT $LN45@GetTokenVe

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00046	39 47 1c	 cmp	 DWORD PTR [edi+28], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 19   : 	if (m_kMap_dwKey_kVct_stToken.end()==f)

  00049	74 0b		 je	 SHORT $LN45@GetTokenVe

; 21   : 
; 22   : 	return &f->second;

  0004b	5f		 pop	 edi
  0004c	83 c0 14	 add	 eax, 20			; 00000014H

; 23   : }

  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN45@GetTokenVe:
  00056	5f		 pop	 edi

; 20   : 		return NULL;

  00057	33 c0		 xor	 eax, eax

; 23   : }

  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ENDP ; CTextFileLoader::SGroupNode::GetTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CTextFileLoader::SGroupNode::GetGroupName, COMDAT
; _this$ = ecx

; 49   : 	return m_strGroupName;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 50   : }

  00003	c3		 ret	 0
?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CTextFileLoader::SGroupNode::GetGroupName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z
_TEXT	SEGMENT
_dwGroupNameKey$ = 8					; size = 4
?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z PROC ; CTextFileLoader::SGroupNode::IsGroupNameKey, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	if (dwGroupNameKey==m_dwGroupNameKey)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwGroupNameKey$[ebp]
  00006	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00008	0f 94 c0	 sete	 al

; 55   : 		return true;
; 56   : 
; 57   : 	return false;
; 58   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ENDP ; CTextFileLoader::SGroupNode::IsGroupNameKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstGroupName$ = 8					; size = 4
?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::SGroupNode::SetGroupName, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 61   : {

  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 62   : 	m_strGroupName=c_rstGroupName;

  0000a	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3077 :         if (this != _STD addressof(_Right)) {

  0000d	3b f0		 cmp	 esi, eax
  0000f	74 15		 je	 SHORT $LN4@SetGroupNa

; 2319 :         return _BUF_SIZE <= _Myres;

  00011	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00015	8b c8		 mov	 ecx, eax

; 2306 :         if (_Large_string_engaged()) {

  00017	72 02		 jb	 SHORT $LN9@SetGroupNa

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN9@SetGroupNa:

; 3035 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0001b	ff 70 10	 push	 DWORD PTR [eax+16]
  0001e	51		 push	 ecx
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetGroupNa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 63   : 	stl_lowers(m_strGroupName);

  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  0002c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0002f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00033	72 02		 jb	 SHORT $LN16@SetGroupNa

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 36		 mov	 esi, DWORD PTR [esi]
$LN16@SetGroupNa:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp

; 65   : 	m_dwGroupNameKey=GenNameKey(m_strGroupName.c_str(), m_strGroupName.length());

  00037	ff 77 14	 push	 DWORD PTR [edi+20]
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  00040	83 c4 08	 add	 esp, 8
  00043	89 07		 mov	 DWORD PTR [edi], eax
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 66   : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::SGroupNode::SetGroupName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z
_TEXT	SEGMENT
_c_szGroupName$ = 8					; size = 4
_uGroupNameLen$ = 12					; size = 4
?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z PROC	; CTextFileLoader::SGroupNode::GenNameKey, COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : }

  00003	5d		 pop	 ebp

; 44   : 	return GetCRC32(c_szGroupName, uGroupNameLen);

  00004	e9 00 00 00 00	 jmp	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ENDP	; CTextFileLoader::SGroupNode::GenNameKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 1778 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1756 :         auto& _My_data    = _Mypair._Myval2;
; 1757 :         pointer& _Myfirst = _My_data._Myfirst;
; 1758 :         pointer& _Mylast  = _My_data._Mylast;
; 1759 :         pointer& _Myend   = _My_data._Myend;
; 1760 : 
; 1761 :         _My_data._Orphan_all();
; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN2@Tidy

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN20@Tidy

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN17@Tidy

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN20@Tidy:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1768 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1769 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN2@Tidy:

; 1771 :     }

  0006e	5e		 pop	 esi
  0006f	c3		 ret	 0
$LN17@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Tidy:
  00075	cc		 int	 3
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1681 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 712  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 03	 shl	 ecx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 836  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 588  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 588  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 588  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 588  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 589  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 591  : 
; 592  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN4@Traits_com

; 593  :         return _Ans;
; 594  :     }
; 595  : 
; 596  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 601  :         return 1;
; 602  :     }
; 603  : 
; 604  :     return 0;
; 605  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 597  :         return -1;
; 598  :     }
; 599  : 
; 600  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN4@Traits_com:

; 601  :         return 1;
; 602  :     }
; 603  : 
; 604  :     return 0;
; 605  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 421  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2451 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2355 :     size_type _Mysize = 0; // current length of string

  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00018	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0001f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00023	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00026	89 4d 08	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 2306 :         if (_Large_string_engaged()) {

  00029	72 02		 jb	 SHORT $LN15@basic_stri

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN15@basic_stri:

; 2928 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2929 : #endif // __cpp_lib_constexpr_string
; 2930 : 
; 2931 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2932 :         // requires it
; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00030	73 1a		 jae	 SHORT $LN12@basic_stri

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00032	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00035	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  0003a	8b c6		 mov	 eax, esi
  0003c	5f		 pop	 edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  00040	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00043	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN12@basic_stri:

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0004e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00053	83 cb 0f	 or	 ebx, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00056	3b d8		 cmp	 ebx, eax
  00058	0f 47 d8	 cmova	 ebx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 0d		 jb	 SHORT $LN26@basic_stri

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b c8		 mov	 ecx, eax
  00070	eb 13		 jmp	 SHORT $LN25@basic_stri
$LN26@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00072	85 c0		 test	 eax, eax
  00074	74 0d		 je	 SHORT $LN27@basic_stri

; 85   :         return ::operator new(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0007f	8b c8		 mov	 ecx, eax
  00081	eb 02		 jmp	 SHORT $LN25@basic_stri
$LN27@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00083	33 c9		 xor	 ecx, ecx
$LN25@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00085	8b 45 08	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00088	40		 inc	 eax
  00089	89 0e		 mov	 DWORD PTR [esi], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008b	50		 push	 eax
  0008c	57		 push	 edi
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _memcpy
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2454 :         _Construct_lv_contents(_Right);
; 2455 :         _Proxy._Release();
; 2456 :     }

  00099	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0009c	8b c6		 mov	 eax, esi
  0009e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
