; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Distribute\EffectElementBase.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CEffectElementBase@@QAE@XZ			; CEffectElementBase::CEffectElementBase
PUBLIC	??1CEffectElementBase@@UAE@XZ			; CEffectElementBase::~CEffectElementBase
PUBLIC	?Clear@CEffectElementBase@@QAEXXZ		; CEffectElementBase::Clear
PUBLIC	?isData@CEffectElementBase@@QAE_NXZ		; CEffectElementBase::isData
PUBLIC	?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ; CEffectElementBase::LoadScript
PUBLIC	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition
PUBLIC	?GetStartTime@CEffectElementBase@@QAEMXZ	; CEffectElementBase::GetStartTime
PUBLIC	?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
PUBLIC	??_GCEffectElementBase@@UAEPAXI@Z		; CEffectElementBase::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CEffectElementBase@@6B@			; CEffectElementBase::`vftable'
PUBLIC	??_C@_09EJLICMCM@starttime@			; `string'
PUBLIC	??_C@_0BC@KPMBIEBE@timeeventposition@		; `string'
PUBLIC	??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@	; `string'
PUBLIC	??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectElementBase@@6B@			; CEffectElementBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectElementBase@@@8			; CEffectElementBase `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBase@@8			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBase@@8			; CEffectElementBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectElementBase@@8		; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	??_ECEffectElementBase@@UAEPAXI@Z:PROC		; CEffectElementBase::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBase@@8 DD FLAT:??_R0?AVCEffectElementBase@@@8 ; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectElementBase@@8
rdata$r	SEGMENT
??_R2CEffectElementBase@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBase@@8 ; CEffectElementBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBase@@8
rdata$r	SEGMENT
??_R3CEffectElementBase@@8 DD 00H			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBase@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBase@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectElementBase@@6B@
rdata$r	SEGMENT
??_R4CEffectElementBase@@6B@ DD 00H			; CEffectElementBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectElementBase@@@8
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
CONST	SEGMENT
??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@ DB 'MOVING_TYPE_DIRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
CONST	SEGMENT
??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@ DB 'MOVING_TYPE_BEZIER_CURVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPMBIEBE@timeeventposition@
CONST	SEGMENT
??_C@_0BC@KPMBIEBE@timeeventposition@ DB 'timeeventposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJLICMCM@starttime@
CONST	SEGMENT
??_C@_09EJLICMCM@starttime@ DB 'starttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CEffectElementBase@@6B@
CONST	SEGMENT
??_7CEffectElementBase@@6B@ DD FLAT:??_R4CEffectElementBase@@6B@ ; CEffectElementBase::`vftable'
	DD	FLAT:??_ECEffectElementBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1
__ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv707 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
$T4 = 8							; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	8b 13		 mov	 edx, DWORD PTR [ebx]
  00012	2b ca		 sub	 ecx, edx

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00014	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00017	2b c2		 sub	 eax, edx
  00019	c1 f9 05	 sar	 ecx, 5
  0001c	c1 f8 05	 sar	 eax, 5
  0001f	89 4d fc	 mov	 DWORD PTR __Whereoff$1$[ebp], ecx

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00022	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  00027	0f 84 65 01 00
	00		 je	 $LN118@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00030	40		 inc	 eax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b fa		 sub	 edi, edx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 ff 05	 sar	 edi, 5

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH
  0003e	8b d7		 mov	 edx, edi
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b f8		 cmp	 edi, eax
  00046	76 13		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bf e0 ff ff ff	 mov	 edi, -32		; ffffffe0H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  00056	83 c4 04	 add	 esp, 4
  00059	eb 44		 jmp	 SHORT $LN116@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005b	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005e	8b 7d f8	 mov	 edi, DWORD PTR __Newsize$1$[ebp]
  00061	3b c7		 cmp	 eax, edi
  00063	0f 43 f8	 cmovae	 edi, eax
  00066	81 ff ff ff ff
	07		 cmp	 edi, 134217727		; 07ffffffH
  0006c	0f 87 25 01 00
	00		 ja	 $LN119@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00072	c1 e7 05	 shl	 edi, 5

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00075	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0007b	72 0e		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00083	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  00086	83 c4 04	 add	 esp, 4
  00089	eb 14		 jmp	 SHORT $LN116@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0008b	85 ff		 test	 edi, edi
  0008d	74 0e		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b 4d fc	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  00098	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  0009b	eb 02		 jmp	 SHORT $LN116@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0009d	33 c0		 xor	 eax, eax
$LN116@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009f	c1 e1 05	 shl	 ecx, 5
  000a2	03 c8		 add	 ecx, eax
  000a4	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000a7	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000aa	89 4d fc	 mov	 DWORD PTR tv707[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000b3	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000b7	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bb	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000be	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c0	3b f2		 cmp	 esi, edx
  000c2	75 27		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000c4	8b 75 08	 mov	 esi, DWORD PTR $T4[ebp]
  000c7	8b ce		 mov	 ecx, esi

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c9	3b c2		 cmp	 eax, edx
  000cb	74 6f		 je	 SHORT $LN68@Emplace_re
  000cd	0f 1f 00	 npad	 3
$LL39@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 1632 :         ++_Last;

  000d3	8d 49 20	 lea	 ecx, DWORD PTR [ecx+32]

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d6	0f 11 41 e0	 movups	 XMMWORD PTR [ecx-32], xmm0
  000da	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  000de	83 c0 20	 add	 eax, 32			; 00000020H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000e1	0f 11 41 f0	 movups	 XMMWORD PTR [ecx-16], xmm0

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e5	3b c2		 cmp	 eax, edx
  000e7	75 e7		 jne	 SHORT $LL39@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000e9	eb 51		 jmp	 SHORT $LN68@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000eb	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ee	3b c6		 cmp	 eax, esi
  000f0	74 1c		 je	 SHORT $LN53@Emplace_re
$LL54@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000f2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 1632 :         ++_Last;

  000f5	8d 49 20	 lea	 ecx, DWORD PTR [ecx+32]

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000f8	0f 11 41 e0	 movups	 XMMWORD PTR [ecx-32], xmm0
  000fc	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00100	83 c0 20	 add	 eax, 32			; 00000020H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00103	0f 11 41 f0	 movups	 XMMWORD PTR [ecx-16], xmm0

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00107	3b c6		 cmp	 eax, esi
  00109	75 e7		 jne	 SHORT $LL54@Emplace_re
  0010b	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
$LN53@Emplace_re:
  0010e	3b f2		 cmp	 esi, edx
  00110	74 27		 je	 SHORT $LN114@Emplace_re

; 1633 :     }
; 1634 : 
; 1635 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last
; 1636 :         _First = _Last;
; 1637 :         return _Last;
; 1638 :     }
; 1639 : 
; 1640 : private:
; 1641 :     pointer _First;
; 1642 :     pointer _Last;
; 1643 :     _Alloc& _Al;
; 1644 : };
; 1645 : 
; 1646 : // FUNCTION TEMPLATE _Uninitialized_copy WITH ALLOCATOR
; 1647 : template <class _InIt, class _Alloc>
; 1648 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_copy(
; 1649 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1650 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1651 :     // note: only called internally from elsewhere in the STL
; 1652 :     using _Ptrval = typename _Alloc::value_type*;
; 1653 : 
; 1654 :     auto _UFirst      = _Get_unwrapped(_First);
; 1655 :     const auto _ULast = _Get_unwrapped(_Last);
; 1656 : 
; 1657 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1658 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1659 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1660 :         if (!_STD is_constant_evaluated())
; 1661 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1662 :         {
; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1664 :             _Dest += _ULast - _UFirst;
; 1665 :             return _Dest;
; 1666 :         }
; 1667 :     }
; 1668 : 
; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1671 :         _Backout._Emplace_back(*_UFirst);
; 1672 :     }
; 1673 : 
; 1674 :     return _Backout._Release();
; 1675 : }
; 1676 : 
; 1677 : // FUNCTION TEMPLATE uninitialized_copy
; 1678 : template <class _InIt, class _NoThrowFwdIt>
; 1679 : _CONSTEXPR20_DYNALLOC _NoThrowFwdIt _Uninitialized_copy_unchecked(
; 1680 :     _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1681 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1682 :     if constexpr (_Ptr_copy_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
; 1683 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1686 :         {
; 1687 :             return _Copy_memmove(_First, _Last, _Dest);
; 1688 :         }
; 1689 :     }
; 1690 : 
; 1691 :     _Uninitialized_backout<_NoThrowFwdIt> _Backout{_Dest};
; 1692 :     for (; _First != _Last; ++_First) {
; 1693 :         _Backout._Emplace_back(*_First);
; 1694 :     }
; 1695 : 
; 1696 :     return _Backout._Release();
; 1697 : }
; 1698 : 
; 1699 : template <class _InIt, class _NoThrowFwdIt>
; 1700 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1701 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1702 :     _Adl_verify_range(_First, _Last);
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1706 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1707 :     return _Dest;
; 1708 : }
; 1709 : 
; 1710 : // FUNCTION TEMPLATE _Uninitialized_move WITH ALLOCATOR
; 1711 : template <class _InIt, class _Alloc>
; 1712 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_move(
; 1713 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1714 :     // move [_First, _Last) to raw _Dest, using _Al
; 1715 :     // note: only called internally from elsewhere in the STL
; 1716 :     using _Ptrval     = typename _Alloc::value_type*;
; 1717 :     auto _UFirst      = _Get_unwrapped(_First);

  00112	8b 45 fc	 mov	 eax, DWORD PTR tv707[ebp]
  00115	83 c0 20	 add	 eax, 32			; 00000020H
  00118	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL69@Emplace_re:

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00120	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00123	8d 40 20	 lea	 eax, DWORD PTR [eax+32]

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00126	0f 11 40 e0	 movups	 XMMWORD PTR [eax-32], xmm0
  0012a	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  0012e	83 c6 20	 add	 esi, 32			; 00000020H

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00131	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0

; 1731 :     for (; _UFirst != _ULast; ++_UFirst) {

  00135	3b f2		 cmp	 esi, edx
  00137	75 e7		 jne	 SHORT $LL69@Emplace_re
$LN114@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  00139	8b 75 08	 mov	 esi, DWORD PTR $T4[ebp]
$LN68@Emplace_re:
  0013c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0013e	85 c0		 test	 eax, eax
  00140	74 2c		 je	 SHORT $LN86@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00142	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00145	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00147	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0014a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00150	72 12		 jb	 SHORT $LN96@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00152	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00155	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00158	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00160	77 2b		 ja	 SHORT $LN93@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00162	8b c2		 mov	 eax, edx
$LN96@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00164	51		 push	 ecx
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016b	83 c4 08	 add	 esp, 8
$LN86@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0016e	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00171	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  00174	c1 e0 05	 shl	 eax, 5
  00177	89 33		 mov	 DWORD PTR [ebx], esi
  00179	03 c6		 add	 eax, esi

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  0017b	5f		 pop	 edi

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0017c	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  0017f	8b 45 fc	 mov	 eax, DWORD PTR tv707[ebp]
  00182	5e		 pop	 esi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00183	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 796  :             _Constructed_first = _Newvec;
; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00186	5b		 pop	 ebx

; 807  :     }

  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 08 00	 ret	 8
$LN93@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN118@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00192	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
$LN119@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00197	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN115@Emplace_re:
  0019c	cc		 int	 3
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectElementBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectElementBase@@UAEPAXI@Z PROC			; CEffectElementBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectElementBase@@UAE@XZ ; CEffectElementBase::~CEffectElementBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectElementBase@@UAEPAXI@Z ENDP			; CEffectElementBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetStartTime@CEffectElementBase@@QAEMXZ
_TEXT	SEGMENT
?GetStartTime@CEffectElementBase@@QAEMXZ PROC		; CEffectElementBase::GetStartTime, COMDAT
; _this$ = ecx

; 159  : 	return m_fStartTime;

  00000	d9 41 04	 fld	 DWORD PTR [ecx+4]

; 160  : }

  00003	c3		 ret	 0
?GetStartTime@CEffectElementBase@@QAEMXZ ENDP		; CEffectElementBase::GetStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
_fTime$ = 8						; size = 4
_rPosition$ = 12					; size = 4
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z PROC ; CEffectElementBase::GetPosition, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00009	33 c5		 xor	 eax, ebp
  0000b	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00012	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00015	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00018	3b f0		 cmp	 esi, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 7    : 	if (m_TimeEventTablePosition.empty())

  0001a	75 29		 jne	 SHORT $LN2@GetPositio

; 8    : 	{
; 9    : 		rPosition = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  0001f	5f		 pop	 edi

; 59   : }

  00020	5e		 pop	 esi
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00038	33 cd		 xor	 ecx, ebp
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
$LN2@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00045	2b c6		 sub	 eax, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 12   : 	if (m_TimeEventTablePosition.size()==1)

  00047	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0004a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0004d	0f 84 f4 01 00
	00		 je	 $LN143@GetPositio

; 13   : 	{
; 14   : 		rPosition = m_TimeEventTablePosition[0].m_vecPosition;
; 15   : 		return;
; 16   : 	}
; 17   : 	if (m_TimeEventTablePosition.front().m_fTime > fTime)

  00053	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00057	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fTime$[ebp]
  0005c	0f 2f c3	 comiss	 xmm0, xmm3
  0005f	0f 87 e2 01 00
	00		 ja	 $LN143@GetPositio

; 18   : 	{
; 19   : 		rPosition = m_TimeEventTablePosition.front().m_vecPosition;
; 20   : 		return;
; 21   : 	}
; 22   : 	if (m_TimeEventTablePosition.back().m_fTime < fTime)

  00065	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00068	0f 2f 5a e0	 comiss	 xmm3, DWORD PTR [edx-32]
  0006c	76 14		 jbe	 SHORT $LN5@GetPositio

; 23   : 	{
; 24   : 		rPosition = m_TimeEventTablePosition.back().m_vecPosition;

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  00071	f3 0f 7e 42 e4	 movq	 xmm0, QWORD PTR [edx-28]
  00076	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0007a	8b 42 ec	 mov	 eax, DWORD PTR [edx-20]

; 25   : 		return;

  0007d	e9 d4 01 00 00	 jmp	 $LN144@GetPositio
$LN5@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 5756 :     auto _UFirst                = _Get_unwrapped(_First);

  00082	2b d6		 sub	 edx, esi

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00084	c1 fa 05	 sar	 edx, 5

; 5759 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  00087	85 d2		 test	 edx, edx
  00089	0f 8e b8 01 00
	00		 jle	 $LN143@GetPositio
  0008f	90		 npad	 1
$LL39@GetPositio:

; 5760 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00090	8b ca		 mov	 ecx, edx
  00092	d1 e9		 shr	 ecx, 1

; 1561 :         _Where += _Off;

  00094	8b c1		 mov	 eax, ecx
  00096	c1 e0 05	 shl	 eax, 5
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 113  : 	return lhs.m_fTime < rhs;

  00099	0f 2f 1c 30	 comiss	 xmm3, DWORD PTR [eax+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 5762 :         if (_Pred(*_UMid, _Val)) { // try top half

  0009d	76 0e		 jbe	 SHORT $LN41@GetPositio

; 5763 :             _UFirst = _Next_iter(_UMid);

  0009f	83 c0 20	 add	 eax, 32			; 00000020H
  000a2	03 f0		 add	 esi, eax

; 5764 :             _Count -= _Count2 + 1;

  000a4	83 c8 ff	 or	 eax, -1
  000a7	2b c1		 sub	 eax, ecx
  000a9	03 d0		 add	 edx, eax

; 5765 :         } else {

  000ab	eb 02		 jmp	 SHORT $LN42@GetPositio
$LN41@GetPositio:

; 5766 :             _Count = _Count2;

  000ad	8b d1		 mov	 edx, ecx
$LN42@GetPositio:

; 5757 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));
; 5758 : 
; 5759 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000af	85 d2		 test	 edx, edx
  000b1	7f dd		 jg	 SHORT $LL39@GetPositio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000b3	39 77 08	 cmp	 DWORD PTR [edi+8], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 33   : 	if (m_TimeEventTablePosition.begin() != result)

  000b6	0f 84 8b 01 00
	00		 je	 $LN143@GetPositio

; 34   : 	{
; 35   : 		rPrev = result-1;
; 36   : 	}
; 37   : 	else
; 38   : 	{
; 39   : 		rPosition = result->m_vecPosition;
; 40   : 		return;
; 41   : 	}
; 42   : 	TEffectPosition & rPrevEffectPosition = *rPrev;
; 43   : 	int iMovingType = rPrevEffectPosition.m_iMovingType;

  000bc	8b 46 f0	 mov	 eax, DWORD PTR [esi-16]

; 44   : 
; 45   : 	if (MOVING_TYPE_DIRECT == iMovingType)

  000bf	85 c0		 test	 eax, eax
  000c1	0f 85 87 00 00
	00		 jne	 $LN8@GetPositio

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000c7	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  000cb	0f 28 e1	 movaps	 xmm4, xmm1

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  000d1	f3 0f 5c 4e e0	 subss	 xmm1, DWORD PTR [esi-32]
  000d6	f3 0f 5c e3	 subss	 xmm4, xmm3
  000da	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  000e2	5f		 pop	 edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 670  :             return (float)fabs(_X);

  000e3	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  000ea	0f 54 25 00 00
	00 00		 andps	 xmm4, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000f1	f3 0f 5e e1	 divss	 xmm4, xmm1

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000f5	f3 0f 5c dc	 subss	 xmm3, xmm4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000f9	0f 28 c4	 movaps	 xmm0, xmm4
  000fc	f3 0f 59 46 e8	 mulss	 xmm0, DWORD PTR [esi-24]
  00101	0f 28 d3	 movaps	 xmm2, xmm3
  00104	0f 28 cb	 movaps	 xmm1, xmm3
  00107	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]
  0010c	f3 0f 59 5e 04	 mulss	 xmm3, DWORD PTR [esi+4]
  00111	f3 0f 59 4e 0c	 mulss	 xmm1, DWORD PTR [esi+12]

; 180  :     x = fx;

  00116	f3 0f 58 d0	 addss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0011a	0f 28 c4	 movaps	 xmm0, xmm4
  0011d	f3 0f 59 66 e4	 mulss	 xmm4, DWORD PTR [esi-28]
  00122	f3 0f 59 46 ec	 mulss	 xmm0, DWORD PTR [esi-20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 59   : }

  00127	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00128	f3 0f 58 e3	 addss	 xmm4, xmm3

; 181  :     y = fy;

  0012c	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  00130	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00134	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00139	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 59   : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	33 cd		 xor	 ecx, ebp
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN8@GetPositio:

; 50   : 	}
; 51   : 	else if (MOVING_TYPE_BEZIER_CURVE == iMovingType)

  0014e	83 f8 01	 cmp	 eax, 1
  00151	0f 85 02 01 00
	00		 jne	 $LN10@GetPositio

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00157	f3 0f 5c 5e e0	 subss	 xmm3, DWORD PTR [esi-32]
  0015c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00160	f3 0f 5c 46 e0	 subss	 xmm0, DWORD PTR [esi-32]

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00165	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016d	f3 0f 10 4e ec	 movss	 xmm1, DWORD PTR [esi-20]
  00172	f3 0f 58 4e fc	 addss	 xmm1, DWORD PTR [esi-4]
  00177	f3 0f 10 6e e4	 movss	 xmm5, DWORD PTR [esi-28]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  0017c	f3 0f 5e d8	 divss	 xmm3, xmm0

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00180	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  00183	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00184	f3 0f 10 46 e8	 movss	 xmm0, DWORD PTR [esi-24]
  00189	f3 0f 58 46 f8	 addss	 xmm0, DWORD PTR [esi-8]
  0018e	f3 0f 58 6e f4	 addss	 xmm5, DWORD PTR [esi-12]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00193	f3 0f 5c f3	 subss	 xmm6, xmm3
  00197	f3 0f 11 5d 08	 movss	 DWORD PTR _fTime$[ebp], xmm3
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0019c	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fTime$[ebp]

; 180  :     x = fx;

  001a1	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001a5	0f 28 d6	 movaps	 xmm2, xmm6
  001a8	f3 0f 59 56 ec	 mulss	 xmm2, DWORD PTR [esi-20]

; 180  :     x = fx;

  001ad	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 181  :     y = fy;

  001b1	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001b5	f3 0f 59 ee	 mulss	 xmm5, xmm6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001b9	f3 0f 58 c0	 addss	 xmm0, xmm0

; 181  :     y = fy;

  001bd	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 182  :     z = fz;

  001c1	f3 0f 59 eb	 mulss	 xmm5, xmm3

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001c5	0f 28 de	 movaps	 xmm3, xmm6
  001c8	f3 0f 59 5e e8	 mulss	 xmm3, DWORD PTR [esi-24]

; 181  :     y = fy;

  001cd	f3 0f 58 c9	 addss	 xmm1, xmm1
  001d1	f3 0f 59 d6	 mulss	 xmm2, xmm6

; 182  :     z = fz;

  001d5	f3 0f 58 ed	 addss	 xmm5, xmm5

; 180  :     x = fx;

  001d9	f3 0f 59 de	 mulss	 xmm3, xmm6

; 181  :     y = fy;

  001dd	f3 0f 58 d1	 addss	 xmm2, xmm1

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001e1	0f 28 ce	 movaps	 xmm1, xmm6
  001e4	f3 0f 59 4e e4	 mulss	 xmm1, DWORD PTR [esi-28]

; 180  :     x = fx;

  001e9	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001ed	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  001f2	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001f7	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001fb	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fTime$[ebp]

; 182  :     z = fz;

  00200	f3 0f 58 cd	 addss	 xmm1, xmm5

; 180  :     x = fx;

  00204	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00208	0f 28 c4	 movaps	 xmm0, xmm4
  0020b	f3 0f 59 46 0c	 mulss	 xmm0, DWORD PTR [esi+12]

; 181  :     y = fy;

  00210	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00214	f3 0f 58 d0	 addss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00218	0f 28 c4	 movaps	 xmm0, xmm4
  0021b	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 59   : }

  00220	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00221	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00225	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00229	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0022d	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  00232	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2

; 59   : }

  00237	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023a	33 cd		 xor	 ecx, ebp
  0023c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 08 00	 ret	 8
$LN143@GetPositio:
  00247	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  0024a	f3 0f 7e 46 04	 movq	 xmm0, QWORD PTR [esi+4]
  0024f	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00253	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN144@GetPositio:
  00256	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@GetPositio:
  00259	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025c	5f		 pop	 edi
  0025d	33 cd		 xor	 ecx, ebp
  0025f	5e		 pop	 esi
  00260	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00265	8b e5		 mov	 esp, ebp
  00267	5d		 pop	 ebp
  00268	c2 08 00	 ret	 8
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ENDP ; CEffectElementBase::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
tv1636 = -84						; size = 4
tv1628 = -80						; size = 4
__Left_size$1$ = -76					; size = 4
tv1639 = -76						; size = 4
_rTextFileLoader$GSCopy$1$ = -72			; size = 4
_this$GSCopy$1$ = -68					; size = 4
tv1650 = -61						; size = 1
tv1656 = -60						; size = 4
tv1645 = -56						; size = 4
tv1644 = -56						; size = 4
tv1643 = -56						; size = 4
tv1642 = -56						; size = 4
tv1640 = -56						; size = 4
_pTokenVector$ = -52					; size = 4
_EffectPosition$2 = -48					; size = 32
$T3 = -40						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z PROC ; CEffectElementBase::LoadScript, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _rTextFileLoader$[ebp]

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00032	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09EJLICMCM@starttime@
  0003a	89 45 b8	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], eax
  0003d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00042	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00045	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00048	56		 push	 esi
  00049	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00059	8b 55 ec	 mov	 edx, DWORD PTR $T4[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  0005c	85 c0		 test	 eax, eax
  0005e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00065	0f 94 c0	 sete	 al
  00068	88 45 c3	 mov	 BYTE PTR tv1650[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0006b	83 fa 10	 cmp	 edx, 16			; 00000010H
  0006e	72 2f		 jb	 SHORT $LN26@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00070	8b 4d d8	 mov	 ecx, DWORD PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00074	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00076	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0007c	72 14		 jb	 SHORT $LN36@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0007e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00081	83 c2 23	 add	 edx, 35			; 00000023H
  00084	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00086	83 c0 fc	 add	 eax, -4			; fffffffcH
  00089	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008c	0f 87 b7 04 00
	00		 ja	 $LN259@LoadScript
$LN36@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00092	52		 push	 edx
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	8a 45 c3	 mov	 al, BYTE PTR tv1650[ebp]
  0009c	83 c4 08	 add	 esp, 8
$LN26@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  0009f	84 c0		 test	 al, al
  000a1	74 06		 je	 SHORT $LN5@LoadScript

; 107  : 	{
; 108  : 		m_fStartTime = 0.0f;

  000a3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN5@LoadScript:

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KPMBIEBE@timeeventposition@
  000ae	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b6	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  000b9	8d 45 cc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  000bc	50		 push	 eax
  000bd	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000c0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000cd	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000d0	8b f0		 mov	 esi, eax
  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  000d9	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000dc	72 2c		 jb	 SHORT $LN54@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000de	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000e1	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e2	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000ea	72 14		 jb	 SHORT $LN64@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ec	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000ef	83 c2 23	 add	 edx, 35			; 00000023H
  000f2	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f4	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fa	0f 87 4e 04 00
	00		 ja	 $LN260@LoadScript
$LN64@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00100	52		 push	 edx
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00107	83 c4 08	 add	 esp, 8
$LN54@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  0010a	85 f6		 test	 esi, esi
  0010c	0f 84 05 04 00
	00		 je	 $LN3@LoadScript

; 111  : 	{
; 112  : 		m_TimeEventTablePosition.clear();

  00112	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00115	33 f6		 xor	 esi, esi
  00117	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011a	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  0011d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00120	8b 38		 mov	 edi, DWORD PTR [eax]
  00122	2b cf		 sub	 ecx, edi
  00124	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00129	f7 e9		 imul	 ecx
  0012b	c1 fa 02	 sar	 edx, 2
  0012e	8b c2		 mov	 eax, edx
  00130	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00133	03 c2		 add	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00135	0f 84 d9 03 00
	00		 je	 $LN254@LoadScript
  0013b	33 d2		 xor	 edx, edx
  0013d	0f 1f 00	 npad	 3
$LL4@LoadScript:

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00140	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00142	3b c6		 cmp	 eax, esi
  00144	0f 86 fa 03 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  0014a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  0014d	83 c2 18	 add	 edx, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00150	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00153	89 55 c4	 mov	 DWORD PTR tv1656[ebp], edx
  00156	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00157	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0015b	72 02		 jb	 SHORT $LN77@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0015d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN77@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00165	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00168	83 c4 04	 add	 esp, 4
  0016b	d9 5d d0	 fstp	 DWORD PTR _EffectPosition$2[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0016e	8b 38		 mov	 edi, DWORD PTR [eax]
  00170	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00173	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00178	2b cf		 sub	 ecx, edi
  0017a	89 7d c8	 mov	 DWORD PTR tv1640[ebp], edi
  0017d	f7 e9		 imul	 ecx
  0017f	c1 fa 02	 sar	 edx, 2
  00182	8b c2		 mov	 eax, edx
  00184	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00187	03 c2		 add	 eax, edx
  00189	89 45 ac	 mov	 DWORD PTR tv1636[ebp], eax
  0018c	3b c6		 cmp	 eax, esi
  0018e	0f 86 b0 03 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  00194	8b 4d c4	 mov	 ecx, DWORD PTR tv1656[ebp]
  00197	03 cf		 add	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  00199	8b d1		 mov	 edx, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  0019b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0019f	72 02		 jb	 SHORT $LN241@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  001a1	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN241@LoadScript:

; 4378 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  001a3	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  001a6	89 45 b4	 mov	 DWORD PTR __Left_size$1$[ebp], eax

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  001a9	83 f8 18	 cmp	 eax, 24			; 00000018H
  001ac	0f 85 e2 01 00
	00		 jne	 $LN7@LoadScript

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  001b2	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
  001b7	c7 45 b0 14 00
	00 00		 mov	 DWORD PTR tv1628[ebp], 20 ; 00000014H
  001be	66 90		 npad	 2
$LL244@LoadScript:
  001c0	8b 02		 mov	 eax, DWORD PTR [edx]
  001c2	3b 07		 cmp	 eax, DWORD PTR [edi]
  001c4	75 10		 jne	 SHORT $LN243@LoadScript
  001c6	83 c2 04	 add	 edx, 4
  001c9	83 c7 04	 add	 edi, 4
  001cc	83 6d b0 04	 sub	 DWORD PTR tv1628[ebp], 4
  001d0	73 ee		 jae	 SHORT $LL244@LoadScript
  001d2	33 c0		 xor	 eax, eax
  001d4	eb 25		 jmp	 SHORT $LN246@LoadScript
$LN243@LoadScript:
  001d6	3a 07		 cmp	 al, BYTE PTR [edi]
  001d8	75 1c		 jne	 SHORT $LN245@LoadScript
  001da	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  001dd	3a 47 01	 cmp	 al, BYTE PTR [edi+1]
  001e0	75 14		 jne	 SHORT $LN245@LoadScript
  001e2	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  001e5	3a 47 02	 cmp	 al, BYTE PTR [edi+2]
  001e8	75 0c		 jne	 SHORT $LN245@LoadScript
  001ea	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  001ed	3a 47 03	 cmp	 al, BYTE PTR [edi+3]
  001f0	75 04		 jne	 SHORT $LN245@LoadScript
  001f2	33 c0		 xor	 eax, eax
  001f4	eb 05		 jmp	 SHORT $LN246@LoadScript
$LN245@LoadScript:
  001f6	1b c0		 sbb	 eax, eax
  001f8	83 c8 01	 or	 eax, 1
$LN246@LoadScript:

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  001fb	85 c0		 test	 eax, eax
  001fd	0f 85 8e 01 00
	00		 jne	 $LN252@LoadScript
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 123  : 				EffectPosition.m_iMovingType = MOVING_TYPE_BEZIER_CURVE;

  00203	46		 inc	 esi
  00204	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EffectPosition$2[ebp+16], 1

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0020b	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0020d	39 75 ac	 cmp	 DWORD PTR tv1636[ebp], esi
  00210	0f 86 2e 03 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  00216	8b 4d c8	 mov	 ecx, DWORD PTR tv1640[ebp]
  00219	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0021c	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0021f	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00220	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00224	72 02		 jb	 SHORT $LN107@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00226	8b 00		 mov	 eax, DWORD PTR [eax]
$LN107@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0022e	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00231	83 c4 04	 add	 esp, 4
  00234	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$2[ebp+4]

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00237	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00239	8b 10		 mov	 edx, DWORD PTR [eax]
  0023b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0023e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00243	2b ca		 sub	 ecx, edx
  00245	89 55 c8	 mov	 DWORD PTR tv1645[ebp], edx
  00248	f7 e9		 imul	 ecx
  0024a	c1 fa 02	 sar	 edx, 2
  0024d	8b c2		 mov	 eax, edx
  0024f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00252	03 c2		 add	 eax, edx
  00254	3b c6		 cmp	 eax, esi
  00256	0f 86 e8 02 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  0025c	8b 4d c8	 mov	 ecx, DWORD PTR tv1645[ebp]
  0025f	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00262	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00265	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00266	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0026a	72 02		 jb	 SHORT $LN117@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0026c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN117@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00274	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00277	83 c4 04	 add	 esp, 4
  0027a	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$2[ebp+8]

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  0027d	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0027f	8b 10		 mov	 edx, DWORD PTR [eax]
  00281	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00284	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00289	2b ca		 sub	 ecx, edx
  0028b	89 55 c8	 mov	 DWORD PTR tv1644[ebp], edx
  0028e	f7 e9		 imul	 ecx
  00290	c1 fa 02	 sar	 edx, 2
  00293	8b c2		 mov	 eax, edx
  00295	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00298	03 c2		 add	 eax, edx
  0029a	3b c6		 cmp	 eax, esi
  0029c	0f 86 a2 02 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  002a2	8b 4d c8	 mov	 ecx, DWORD PTR tv1644[ebp]
  002a5	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  002a8	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002ab	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  002ac	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  002b0	72 02		 jb	 SHORT $LN127@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  002b2	8b 00		 mov	 eax, DWORD PTR [eax]
$LN127@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002ba	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002bd	83 c4 04	 add	 esp, 4
  002c0	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$2[ebp+12]

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002c3	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002c5	8b 10		 mov	 edx, DWORD PTR [eax]
  002c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002cf	2b ca		 sub	 ecx, edx
  002d1	89 55 c8	 mov	 DWORD PTR tv1643[ebp], edx
  002d4	f7 e9		 imul	 ecx
  002d6	c1 fa 02	 sar	 edx, 2
  002d9	8b c2		 mov	 eax, edx
  002db	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002de	03 c2		 add	 eax, edx
  002e0	3b c6		 cmp	 eax, esi
  002e2	0f 86 5c 02 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  002e8	8b 4d c8	 mov	 ecx, DWORD PTR tv1643[ebp]
  002eb	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  002ee	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002f1	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  002f2	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  002f6	72 02		 jb	 SHORT $LN137@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  002f8	8b 00		 mov	 eax, DWORD PTR [eax]
$LN137@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00300	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  00303	83 c4 04	 add	 esp, 4
  00306	d9 5d e4	 fstp	 DWORD PTR _EffectPosition$2[ebp+20]

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00309	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0030b	8b 10		 mov	 edx, DWORD PTR [eax]
  0030d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00310	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00315	2b ca		 sub	 ecx, edx
  00317	89 55 c8	 mov	 DWORD PTR tv1642[ebp], edx
  0031a	f7 e9		 imul	 ecx
  0031c	c1 fa 02	 sar	 edx, 2
  0031f	8b c2		 mov	 eax, edx
  00321	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00324	03 c2		 add	 eax, edx
  00326	3b c6		 cmp	 eax, esi
  00328	0f 86 16 02 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  0032e	8b 4d c8	 mov	 ecx, DWORD PTR tv1642[ebp]
  00331	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00334	81 45 c4 90 00
	00 00		 add	 DWORD PTR tv1656[ebp], 144 ; 00000090H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  0033b	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  0033e	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0033f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00343	72 02		 jb	 SHORT $LN147@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00345	8b 00		 mov	 eax, DWORD PTR [eax]
$LN147@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0034d	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00350	83 c4 04	 add	 esp, 4
  00353	d9 5d e8	 fstp	 DWORD PTR _EffectPosition$2[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00356	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00359	8b 38		 mov	 edi, DWORD PTR [eax]
  0035b	2b cf		 sub	 ecx, edi
  0035d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00362	f7 e9		 imul	 ecx
  00364	c1 fa 02	 sar	 edx, 2
  00367	8b c2		 mov	 eax, edx
  00369	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0036c	03 c2		 add	 eax, edx
  0036e	3b c6		 cmp	 eax, esi
  00370	0f 86 ce 01 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  00376	8b 45 c4	 mov	 eax, DWORD PTR tv1656[ebp]
  00379	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0037b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0037f	72 02		 jb	 SHORT $LN157@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00381	8b 00		 mov	 eax, DWORD PTR [eax]
$LN157@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 131  : 				EffectPosition.m_vecControlPoint.z = atof(pTokenVector->at(i++).c_str());

  00383	50		 push	 eax
  00384	e8 00 00 00 00	 call	 _atof
  00389	d9 5d ec	 fstp	 DWORD PTR _EffectPosition$2[ebp+28]

; 132  : 			}

  0038c	e9 29 01 00 00	 jmp	 $LN257@LoadScript
$LN252@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00391	8b 45 b4	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
$LN7@LoadScript:

; 2319 :         return _BUF_SIZE <= _Myres;

  00394	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00398	72 02		 jb	 SHORT $LN171@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0039a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN171@LoadScript:

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0039c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0039f	0f 85 9b 01 00
	00		 jne	 $LN9@LoadScript

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  003a5	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
  003aa	8d 78 fc	 lea	 edi, DWORD PTR [eax-4]
  003ad	0f 1f 00	 npad	 3
$LL249@LoadScript:
  003b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  003b2	3b 02		 cmp	 eax, DWORD PTR [edx]
  003b4	75 0b		 jne	 SHORT $LN248@LoadScript
  003b6	83 c1 04	 add	 ecx, 4
  003b9	83 c2 04	 add	 edx, 4
  003bc	83 ef 04	 sub	 edi, 4
  003bf	73 ef		 jae	 SHORT $LL249@LoadScript
$LN248@LoadScript:
  003c1	8a 01		 mov	 al, BYTE PTR [ecx]
  003c3	3a 02		 cmp	 al, BYTE PTR [edx]
  003c5	75 21		 jne	 SHORT $LN250@LoadScript
  003c7	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  003ca	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  003cd	75 19		 jne	 SHORT $LN250@LoadScript
  003cf	83 ff fe	 cmp	 edi, -2			; fffffffeH
  003d2	74 10		 je	 SHORT $LN247@LoadScript
  003d4	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  003d7	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  003da	75 0c		 jne	 SHORT $LN250@LoadScript
  003dc	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  003df	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  003e2	75 04		 jne	 SHORT $LN250@LoadScript
$LN247@LoadScript:
  003e4	33 c0		 xor	 eax, eax
  003e6	eb 05		 jmp	 SHORT $LN251@LoadScript
$LN250@LoadScript:
  003e8	1b c0		 sbb	 eax, eax
  003ea	83 c8 01	 or	 eax, 1
$LN251@LoadScript:

; 583  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  003ed	85 c0		 test	 eax, eax
  003ef	0f 85 4b 01 00
	00		 jne	 $LN9@LoadScript
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 137  : 				EffectPosition.m_iMovingType = MOVING_TYPE_DIRECT;

  003f5	46		 inc	 esi
  003f6	89 45 e0	 mov	 DWORD PTR _EffectPosition$2[ebp+16], eax

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  003f9	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003fb	39 75 ac	 cmp	 DWORD PTR tv1636[ebp], esi
  003fe	0f 86 40 01 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  00404	8b 4d c8	 mov	 ecx, DWORD PTR tv1640[ebp]
  00407	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0040a	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0040d	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0040e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00412	72 02		 jb	 SHORT $LN187@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00414	8b 00		 mov	 eax, DWORD PTR [eax]
$LN187@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00416	50		 push	 eax
  00417	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0041c	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0041f	83 c4 04	 add	 esp, 4
  00422	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$2[ebp+4]

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00425	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00427	8b 10		 mov	 edx, DWORD PTR [eax]
  00429	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0042c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00431	2b ca		 sub	 ecx, edx
  00433	89 55 b4	 mov	 DWORD PTR tv1639[ebp], edx
  00436	f7 e9		 imul	 ecx
  00438	c1 fa 02	 sar	 edx, 2
  0043b	8b c2		 mov	 eax, edx
  0043d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00440	03 c2		 add	 eax, edx
  00442	3b c6		 cmp	 eax, esi
  00444	0f 86 fa 00 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  0044a	8b 4d b4	 mov	 ecx, DWORD PTR tv1639[ebp]
  0044d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00450	83 45 c4 48	 add	 DWORD PTR tv1656[ebp], 72 ; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1588 :         return _My_data._Myfirst[_Pos];

  00454	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00457	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00458	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  0045c	72 02		 jb	 SHORT $LN197@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0045e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN197@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 _atof
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00466	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00469	83 c4 04	 add	 esp, 4
  0046c	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$2[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1584 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0046f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00472	8b 38		 mov	 edi, DWORD PTR [eax]
  00474	2b cf		 sub	 ecx, edi
  00476	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0047b	f7 e9		 imul	 ecx
  0047d	c1 fa 02	 sar	 edx, 2
  00480	8b c2		 mov	 eax, edx
  00482	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00485	03 c2		 add	 eax, edx
  00487	3b c6		 cmp	 eax, esi
  00489	0f 86 b5 00 00
	00		 jbe	 $LN234@LoadScript

; 1588 :         return _My_data._Myfirst[_Pos];

  0048f	8b 45 c4	 mov	 eax, DWORD PTR tv1656[ebp]
  00492	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00494	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2306 :         if (_Large_string_engaged()) {

  00498	72 02		 jb	 SHORT $LN207@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0049a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN207@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 141  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 _atof
  004a2	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$2[ebp+12]

; 142  : 
; 143  : 				EffectPosition.m_vecControlPoint = D3DXVECTOR3(0.0f,0.0f,0.0f);

  004a5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$2[ebp+20], 0
  004ac	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$2[ebp+24], 0
  004b3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$2[ebp+28], 0
$LN257@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  004ba	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  004bd	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  004c0	83 c1 08	 add	 ecx, 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  004c3	46		 inc	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  004c4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004c7	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  004ca	74 15		 je	 SHORT $LN216@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  004cc	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR _EffectPosition$2[ebp]
  004d0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  004d3	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _EffectPosition$2[ebp+16]
  004d7	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  004db	83 41 04 20	 add	 DWORD PTR [ecx+4], 32	; 00000020H

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  004df	eb 0a		 jmp	 SHORT $LN2@LoadScript
$LN216@LoadScript:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004e1	8d 55 d0	 lea	 edx, DWORD PTR _EffectPosition$2[ebp]
  004e4	52		 push	 edx
  004e5	50		 push	 eax
  004e6	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
$LN2@LoadScript:

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004eb	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  004ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f1	8b 38		 mov	 edi, DWORD PTR [eax]
  004f3	2b cf		 sub	 ecx, edi
  004f5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  004fa	f7 e9		 imul	 ecx
  004fc	c1 fa 02	 sar	 edx, 2
  004ff	8b c2		 mov	 eax, edx
  00501	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00504	03 c2		 add	 eax, edx
  00506	8b 55 c4	 mov	 edx, DWORD PTR tv1656[ebp]
  00509	83 c2 18	 add	 edx, 24			; 00000018H
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  0050c	3b f0		 cmp	 esi, eax
  0050e	0f 82 2c fc ff
	ff		 jb	 $LL4@LoadScript
$LN254@LoadScript:

; 151  : 		}
; 152  : 	}
; 153  : 
; 154  : 	return OnLoadScript(rTextFileLoader);

  00514	8b 7d bc	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@LoadScript:
  00517	8b 07		 mov	 eax, DWORD PTR [edi]
  00519	8b cf		 mov	 ecx, edi
  0051b	ff 75 b8	 push	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  0051e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00521	ff d0		 call	 eax
$LN1@LoadScript:

; 155  : }

  00523	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00526	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0052d	59		 pop	 ecx
  0052e	5f		 pop	 edi
  0052f	5e		 pop	 esi
  00530	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00533	33 cd		 xor	 ecx, ebp
  00535	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0053a	8b e5		 mov	 esp, ebp
  0053c	5d		 pop	 ebp
  0053d	c2 04 00	 ret	 4
$LN9@LoadScript:

; 144  : 			}
; 145  : 			else
; 146  : 			{
; 147  : 				return FALSE;

  00540	33 c0		 xor	 eax, eax
  00542	eb df		 jmp	 SHORT $LN1@LoadScript
$LN234@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1585 :             _Xrange();

  00544	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN259@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00549	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN260@LoadScript:
  0054e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN256@LoadScript:
  00553	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ENDP ; CEffectElementBase::LoadScript
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?isData@CEffectElementBase@@QAE_NXZ
_TEXT	SEGMENT
?isData@CEffectElementBase@@QAE_NXZ PROC		; CEffectElementBase::isData, COMDAT
; _this$ = ecx

; 93   : 	return OnIsData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?isData@CEffectElementBase@@QAE_NXZ ENDP		; CEffectElementBase::isData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?Clear@CEffectElementBase@@QAEXXZ
_TEXT	SEGMENT
?Clear@CEffectElementBase@@QAEXXZ PROC			; CEffectElementBase::Clear, COMDAT
; _this$ = ecx

; 98   : 	m_fStartTime = 0.0f;
; 99   : 
; 100  : 	OnClear();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00009	ff 60 04	 jmp	 DWORD PTR [eax+4]
?Clear@CEffectElementBase@@QAEXXZ ENDP			; CEffectElementBase::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??1CEffectElementBase@@UAE@XZ
_TEXT	SEGMENT
??1CEffectElementBase@@UAE@XZ PROC			; CEffectElementBase::~CEffectElementBase, COMDAT
; _this$ = ecx

; 167  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectElementBase@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CEffectEle

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CEffectEle

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN19@CEffectEle

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CEffectEle:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN6@CEffectEle:
  00051	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 168  : }

  00052	c3		 ret	 0
$LN19@CEffectEle:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@CEffectEle:
  00058	cc		 int	 3
??1CEffectElementBase@@UAE@XZ ENDP			; CEffectElementBase::~CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??0CEffectElementBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEffectElementBase@@QAE@XZ PROC			; CEffectElementBase::CEffectElementBase, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CEffectElementBase@@6B@

; 165  : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectElementBase.cpp

; 163  : {

  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 	m_fStartTime = 0.0f;

  00024	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 165  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CEffectElementBase@@QAE@XZ ENDP			; CEffectElementBase::CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 1778 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2517 :     _CONSTEXPR20_CONTAINER basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	57		 push	 edi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000c	8b f7		 mov	 esi, edi

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 4596 :         _My_data._Mysize = 0;

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0001b	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL74@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL74@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002e	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00031	77 1d		 ja	 SHORT $LN18@basic_stri

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	53		 push	 ebx

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00036	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00039	e8 00 00 00 00	 call	 _memmove

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2520 :         _Tidy_init();
; 2521 :         assign(_Ptr);
; 2522 :         _Proxy._Release();
; 2523 :     }

  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2520 :         _Tidy_init();
; 2521 :         assign(_Ptr);
; 2522 :         _Proxy._Release();
; 2523 :     }

  00045	8b c3		 mov	 eax, ebx
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN18@basic_stri:

; 4508 :         if (_New_size > max_size()) {

  00050	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00056	77 7c		 ja	 SHORT $LN79@basic_stri

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00058	8b fe		 mov	 edi, esi
  0005a	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 15		 jbe	 SHORT $LN35@basic_stri

; 4490 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	83 c4 04	 add	 esp, 4
  00078	eb 30		 jmp	 SHORT $LN77@basic_stri
$LN35@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0007a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007f	3b f8		 cmp	 edi, eax
  00081	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00084	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00087	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008c	72 0b		 jb	 SHORT $LN43@basic_stri

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00094	83 c4 04	 add	 esp, 4
  00097	eb 11		 jmp	 SHORT $LN77@basic_stri
$LN43@basic_stri:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00099	85 c0		 test	 eax, eax
  0009b	74 0b		 je	 SHORT $LN44@basic_stri

; 85   :         return ::operator new(_Bytes);

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000a6	eb 02		 jmp	 SHORT $LN77@basic_stri
$LN44@basic_stri:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000a8	33 c0		 xor	 eax, eax
$LN77@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000aa	56		 push	 esi
  000ab	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000ae	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b1	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000b2	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000b5	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000bd	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2520 :         _Tidy_init();
; 2521 :         assign(_Ptr);
; 2522 :         _Proxy._Release();
; 2523 :     }

  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c3	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2520 :         _Tidy_init();
; 2521 :         assign(_Ptr);
; 2522 :         _Proxy._Release();
; 2523 :     }

  000c7	5f		 pop	 edi

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c8	89 03		 mov	 DWORD PTR [ebx], eax

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2520 :         _Tidy_init();
; 2521 :         assign(_Ptr);
; 2522 :         _Proxy._Release();
; 2523 :     }

  000ca	8b c3		 mov	 eax, ebx
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN79@basic_stri:

; 4509 :             _Xlen_string(); // result too long

  000d4	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN75@basic_stri:
  000d9	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
