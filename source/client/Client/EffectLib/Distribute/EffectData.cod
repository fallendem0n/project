; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Distribute\EffectData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCEffectData@@@@6B@		; CDynamicPool<CEffectData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z	; CDynamicPool<CEffectData>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCEffectData@@@@6B@		; CDynamicPool<CEffectData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCEffectData@@@@@8	; CDynamicPool<CEffectData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCEffectData@@@@8		; CDynamicPool<CEffectData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCEffectData@@@@8		; CDynamicPool<CEffectData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCEffectData@@@@8	; CDynamicPool<CEffectData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z:PROC ; CDynamicPool<CEffectData>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCEffectData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCEffectData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCEffectData@@@@@8 ; CDynamicPool<CEffectData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCEffectData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCEffectData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCEffectData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCEffectData@@@@8 ; CDynamicPool<CEffectData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCEffectData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCEffectData@@@@8 DD 00H		; CDynamicPool<CEffectData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCEffectData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCEffectData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCEffectData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CEffectData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCEffectData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCEffectData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCEffectData@@@@6B@ DD 00H		; CDynamicPool<CEffectData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCEffectData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCEffectData@@@@8
rdata$r	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCEffectData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCEffectData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCEffectData@@@@6B@ ; CDynamicPool<CEffectData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CEffectData@@QAE@XZ				; CEffectData::CEffectData
PUBLIC	??1CEffectData@@UAE@XZ				; CEffectData::~CEffectData
PUBLIC	?Clear@CEffectData@@QAEXXZ			; CEffectData::Clear
PUBLIC	?LoadScript@CEffectData@@QAE_NPBD@Z		; CEffectData::LoadScript
PUBLIC	?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z	; CEffectData::LoadSoundScriptData
PUBLIC	?GetParticleCount@CEffectData@@QAEKXZ		; CEffectData::GetParticleCount
PUBLIC	?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z ; CEffectData::GetParticlePointer
PUBLIC	?GetMeshCount@CEffectData@@QAEKXZ		; CEffectData::GetMeshCount
PUBLIC	?GetMeshPointer@CEffectData@@QAEPAVCEffectMeshScript@@K@Z ; CEffectData::GetMeshPointer
PUBLIC	?GetLightCount@CEffectData@@QAEKXZ		; CEffectData::GetLightCount
PUBLIC	?GetLightPointer@CEffectData@@QAEPAVCLightData@@K@Z ; CEffectData::GetLightPointer
PUBLIC	?GetSoundInstanceVector@CEffectData@@QAEPAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ ; CEffectData::GetSoundInstanceVector
PUBLIC	?GetBoundingSphereRadius@CEffectData@@QAEMXZ	; CEffectData::GetBoundingSphereRadius
PUBLIC	?GetBoundingSpherePosition@CEffectData@@QAE?AUD3DXVECTOR3@@XZ ; CEffectData::GetBoundingSpherePosition
PUBLIC	?GetFileName@CEffectData@@QBEPBDXZ		; CEffectData::GetFileName
PUBLIC	?__ClearParticleDataVector@CEffectData@@IAEXXZ	; CEffectData::__ClearParticleDataVector
PUBLIC	?__ClearLightDataVector@CEffectData@@IAEXXZ	; CEffectData::__ClearLightDataVector
PUBLIC	?__ClearMeshDataVector@CEffectData@@IAEXXZ	; CEffectData::__ClearMeshDataVector
PUBLIC	?AllocParticle@CEffectData@@MAEPAVCParticleSystemData@@XZ ; CEffectData::AllocParticle
PUBLIC	?AllocMesh@CEffectData@@MAEPAVCEffectMeshScript@@XZ ; CEffectData::AllocMesh
PUBLIC	?AllocLight@CEffectData@@MAEPAVCLightData@@XZ	; CEffectData::AllocLight
PUBLIC	?_Xlength@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Xlength
PUBLIC	?_Xlength@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Xlength
PUBLIC	?_Xlength@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@CAXXZ ; std::vector<CLightData *,std::allocator<CLightData *> >::_Xlength
PUBLIC	??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
PUBLIC	?DestroySystem@CEffectData@@SAXXZ		; CEffectData::DestroySystem
PUBLIC	?New@CEffectData@@SAPAV1@XZ			; CEffectData::New
PUBLIC	?Delete@CEffectData@@SAXPAV1@@Z			; CEffectData::Delete
PUBLIC	??_GCEffectData@@UAEPAXI@Z			; CEffectData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCEffectData@@@@UAE@XZ	; CDynamicPool<CEffectData>::~CDynamicPool<CEffectData>
PUBLIC	?Delete@?$CDynamicPool@VCEffectData@@@@KAXPAVCEffectData@@@Z ; CDynamicPool<CEffectData>::Delete
PUBLIC	?_Xlength@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@CAXXZ ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Xlength
PUBLIC	??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
PUBLIC	??$_Emplace_reallocate@ABQAVCLightData@@@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@QAEPAPAVCLightData@@QAPAV2@ABQAV2@@Z ; std::vector<CLightData *,std::allocator<CLightData *> >::_Emplace_reallocate<CLightData * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCEffectMeshScript@@@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@QAEPAPAVCEffectMeshScript@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Emplace_reallocate<CEffectMeshScript * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCParticleSystemData@@@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@QAEPAPAVCParticleSystemData@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Emplace_reallocate<CParticleSystemData * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Emplace_reallocate<CEffectData * const &>
PUBLIC	??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectData * *,CEffectData * *>
PUBLIC	??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z ; std::_Copy_memmove<CLightData * *,CLightData * *>
PUBLIC	??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshScript * *,CEffectMeshScript * *>
PUBLIC	??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemData * *,CParticleSystemData * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A ; CEffectData::ms_kPool
PUBLIC	??_7CEffectData@@6B@				; CEffectData::`vftable'
PUBLIC	??_C@_0BF@MLNDGKC@boundingsphereradius@		; `string'
PUBLIC	??_C@_0BH@HALPILME@boundingsphereposition@	; `string'
PUBLIC	??_C@_04KPBEILIJ@mesh@				; `string'
PUBLIC	??_C@_08PKKGOGAD@particle@			; `string'
PUBLIC	??_C@_05OEPGNJB@light@				; `string'
PUBLIC	??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@		; `string'
PUBLIC	??_C@_06PBLIODKG@sound?1@			; `string'
PUBLIC	??_C@_04NMMFEKGF@?4mss@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectData@@6B@				; CEffectData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectData@@@8				; CEffectData `RTTI Type Descriptor'
PUBLIC	??_R3CEffectData@@8				; CEffectData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectData@@8				; CEffectData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectData@@8			; CEffectData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_tolower:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0CTextFileLoader@@QAE@XZ:PROC			; CTextFileLoader::CTextFileLoader
EXTRN	??1CTextFileLoader@@UAE@XZ:PROC			; CTextFileLoader::~CTextFileLoader
EXTRN	?Load@CTextFileLoader@@QAE_NPBD@Z:PROC		; CTextFileLoader::Load
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetChildNodeCount@CTextFileLoader@@QAEKXZ:PROC	; CTextFileLoader::GetChildNodeCount
EXTRN	?SetChildNode@CTextFileLoader@@QAEHK@Z:PROC	; CTextFileLoader::SetChildNode
EXTRN	?SetParentNode@CTextFileLoader@@QAEHXZ:PROC	; CTextFileLoader::SetParentNode
EXTRN	?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CTextFileLoader::GetCurrentNodeName
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z:PROC ; CTextFileLoader::GetTokenVector3
EXTRN	?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z:PROC ; NSound::LoadSoundInformationPiece
EXTRN	?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z:PROC ; NSound::DataToInstance
EXTRN	?Clear@CEffectElementBase@@QAEXXZ:PROC		; CEffectElementBase::Clear
EXTRN	?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z:PROC ; CEffectElementBase::LoadScript
EXTRN	?DestroySystem@CParticleSystemData@@SAXXZ:PROC	; CParticleSystemData::DestroySystem
EXTRN	?New@CParticleSystemData@@SAPAV1@XZ:PROC	; CParticleSystemData::New
EXTRN	?Delete@CParticleSystemData@@SAXPAV1@@Z:PROC	; CParticleSystemData::Delete
EXTRN	?DestroySystem@CEffectMeshScript@@SAXXZ:PROC	; CEffectMeshScript::DestroySystem
EXTRN	?New@CEffectMeshScript@@SAPAV1@XZ:PROC		; CEffectMeshScript::New
EXTRN	?Delete@CEffectMeshScript@@SAXPAV1@@Z:PROC	; CEffectMeshScript::Delete
EXTRN	?DestroySystem@CLightData@@SAXXZ:PROC		; CLightData::DestroySystem
EXTRN	?New@CLightData@@SAPAV1@XZ:PROC			; CLightData::New
EXTRN	?Delete@CLightData@@SAXPAV1@@Z:PROC		; CLightData::Delete
EXTRN	??_ECEffectData@@UAEPAXI@Z:PROC			; CEffectData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CEffectData@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CEffectData@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectData@@8 DD FLAT:??_R0?AVCEffectData@@@8 ; CEffectData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectData@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectData@@8
rdata$r	SEGMENT
??_R2CEffectData@@8 DD FLAT:??_R1A@?0A@EA@CEffectData@@8 ; CEffectData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectData@@8
rdata$r	SEGMENT
??_R3CEffectData@@8 DD 00H				; CEffectData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectData@@@8
data$rs	SEGMENT
??_R0?AVCEffectData@@@8 DD FLAT:??_7type_info@@6B@	; CEffectData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectData@@6B@
rdata$r	SEGMENT
??_R4CEffectData@@6B@ DD 00H				; CEffectData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectData@@@8
	DD	FLAT:??_R3CEffectData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMMFEKGF@?4mss@
CONST	SEGMENT
??_C@_04NMMFEKGF@?4mss@ DB '.mss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBLIODKG@sound?1@
CONST	SEGMENT
??_C@_06PBLIODKG@sound?1@ DB 'sound/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@
CONST	SEGMENT
??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@ DB 'd:/ymir work/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OEPGNJB@light@
CONST	SEGMENT
??_C@_05OEPGNJB@light@ DB 'light', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKKGOGAD@particle@
CONST	SEGMENT
??_C@_08PKKGOGAD@particle@ DB 'particle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPBEILIJ@mesh@
CONST	SEGMENT
??_C@_04KPBEILIJ@mesh@ DB 'mesh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HALPILME@boundingsphereposition@
CONST	SEGMENT
??_C@_0BH@HALPILME@boundingsphereposition@ DB 'boundingsphereposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MLNDGKC@boundingsphereradius@
CONST	SEGMENT
??_C@_0BF@MLNDGKC@boundingsphereradius@ DB 'boundingsphereradius', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CEffectData@@6B@
CONST	SEGMENT
??_7CEffectData@@6B@ DD FLAT:??_R4CEffectData@@6B@	; CEffectData::`vftable'
	DD	FLAT:??_ECEffectData@@UAEPAXI@Z
	DD	FLAT:?AllocParticle@CEffectData@@MAEPAVCParticleSystemData@@XZ
	DD	FLAT:?AllocMesh@CEffectData@@MAEPAVCEffectMeshScript@@XZ
	DD	FLAT:?AllocLight@CEffectData@@MAEPAVCLightData@@XZ
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A DD FLAT:??_7?$CDynamicPool@VCEffectData@@@@6B@ ; CEffectData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z$0
__ehfuncinfo$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadScript@CEffectData@@QAE_NPBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?LoadScript@CEffectData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadScript@CEffectData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$6
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CParticleSystemData * *,CParticleSystemData * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CParticleSystemData * *,CParticleSystemData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CEffectMeshScript * *,CEffectMeshScript * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CEffectMeshScript * *,CEffectMeshScript * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CLightData * *,CLightData * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CLightData * *,CLightData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CEffectData * *,CEffectData * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CEffectData * *,CEffectData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Emplace_reallocate<CEffectData * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectData * *,CEffectData * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectData@@PAPAV1@@std@@YAPAPAVCEffectData@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectData * *,CEffectData * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@CAXXZ ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Emplace_reallocate<CEffectData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCParticleSystemData@@@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@QAEPAPAVCParticleSystemData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCParticleSystemData@@@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@QAEPAPAVCParticleSystemData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Emplace_reallocate<CParticleSystemData * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemData * *,CParticleSystemData * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemData@@PAPAV1@@std@@YAPAPAVCParticleSystemData@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemData * *,CParticleSystemData * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCParticleSystemData@@@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@QAEPAPAVCParticleSystemData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Emplace_reallocate<CParticleSystemData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCEffectMeshScript@@@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@QAEPAPAVCEffectMeshScript@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCEffectMeshScript@@@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@QAEPAPAVCEffectMeshScript@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Emplace_reallocate<CEffectMeshScript * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshScript * *,CEffectMeshScript * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectMeshScript@@PAPAV1@@std@@YAPAPAVCEffectMeshScript@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshScript * *,CEffectMeshScript * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCEffectMeshScript@@@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@QAEPAPAVCEffectMeshScript@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Emplace_reallocate<CEffectMeshScript * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCLightData@@@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@QAEPAPAVCLightData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCLightData@@@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@QAEPAPAVCLightData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CLightData *,std::allocator<CLightData *> >::_Emplace_reallocate<CLightData * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z ; std::_Copy_memmove<CLightData * *,CLightData * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLightData@@PAPAV1@@std@@YAPAPAVCLightData@@PAPAV1@00@Z ; std::_Copy_memmove<CLightData * *,CLightData * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@CAXXZ ; std::vector<CLightData *,std::allocator<CLightData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCLightData@@@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@QAEPAPAVCLightData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CLightData *,std::allocator<CLightData *> >::_Emplace_reallocate<CLightData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	57		 push	 edi

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00008	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 be 00 00
	00		 je	 $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00012	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00015	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00018	3b f8		 cmp	 edi, eax
  0001a	74 58		 je	 SHORT $LN10@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0001c	56		 push	 esi
  0001d	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
$LL11@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00022	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	72 2f		 jb	 SHORT $LN33@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00027	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00031	72 16		 jb	 SHORT $LN43@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00033	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00036	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00039	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00041	0f 87 8f 00 00
	00		 ja	 $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00047	8b c2		 mov	 eax, edx
$LN43@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00053	83 c4 08	 add	 esp, 8
$LN33@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00056	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0005d	83 c7 1c	 add	 edi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00060	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00066	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0006a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0006d	3b f8		 cmp	 edi, eax
  0006f	75 af		 jne	 SHORT $LL11@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00071	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00073	5e		 pop	 esi
$LN10@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00074	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00077	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007c	2b cf		 sub	 ecx, edi
  0007e	f7 e9		 imul	 ecx
  00080	03 d1		 add	 edx, ecx
  00082	c1 fa 04	 sar	 edx, 4
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00093	2b c8		 sub	 ecx, eax
  00095	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00098	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009e	72 12		 jb	 SHORT $LN68@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a0	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000a3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a6	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ae	77 26		 ja	 SHORT $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b0	8b fa		 mov	 edi, edx
$LN68@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000b2	51		 push	 ecx
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  000b9	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000bf	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  000c2	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1769 :             _Myend   = nullptr;

  000c9	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN4@vector:
  000d0	5f		 pop	 edi

; 717  :     }

  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
$LN65@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@vector:
  000db	cc		 int	 3
??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CEffectData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A ; CEffectData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCEffectData@@@@UAE@XZ ; CDynamicPool<CEffectData>::~CDynamicPool<CEffectData>
??__F?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CEffectData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ??__E?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CEffectData::ms_kPool'', COMDAT

; 4    : CDynamicPool<CEffectData> CEffectData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CEffectData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CEffectData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z PROC	; CDynamicPool<CEffectData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCEffectData@@@@UAE@XZ ; CDynamicPool<CEffectData>::~CDynamicPool<CEffectData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCEffectData@@@@UAEPAXI@Z ENDP	; CDynamicPool<CEffectData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCEffectData@@@@KAXPAVCEffectData@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCEffectData@@@@KAXPAVCEffectData@@@Z PROC ; CDynamicPool<CEffectData>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCEffectData@@@@KAXPAVCEffectData@@@Z ENDP ; CDynamicPool<CEffectData>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCEffectData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCEffectData@@@@UAE@XZ PROC		; CDynamicPool<CEffectData>::~CDynamicPool<CEffectData>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCEffectData@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1769 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1769 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCEffectData@@@@UAE@XZ ENDP		; CDynamicPool<CEffectData>::~CDynamicPool<CEffectData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectData@@UAEPAXI@Z PROC				; CEffectData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectData@@UAE@XZ	; CEffectData::~CEffectData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 5c		 push	 92			; 0000005cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectData@@UAEPAXI@Z ENDP				; CEffectData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?Delete@CEffectData@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@CEffectData@@SAXPAV1@@Z PROC			; CEffectData::Delete, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 13   : 	pkData->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Clear@CEffectData@@QAEXXZ ; CEffectData::Clear
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+20
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 14   : 	ms_kPool.Free(pkData);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 15   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Emplace_reallocate<CEffectData * const &>
  00039	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 15   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CEffectData@@SAXPAV1@@Z ENDP			; CEffectData::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?New@CEffectData@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pkNewData$2 = -4					; size = 4
?New@CEffectData@@SAPAV1@XZ PROC			; CEffectData::New, COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1544 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+16, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00010	75 61		 jne	 SHORT $LN4@New

; 65   : 				T* pkNewData=new T;

  00012	56		 push	 esi
  00013	6a 5c		 push	 92			; 0000005cH
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00020	85 c0		 test	 eax, eax
  00022	74 0b		 je	 SHORT $LN6@New
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??0CEffectData@@QAE@XZ	; CEffectData::CEffectData
  0002b	8b f0		 mov	 esi, eax
  0002d	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0002f	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00031	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00036	89 75 fc	 mov	 DWORD PTR _pkNewData$2[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00039	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+12
  0003f	74 16		 je	 SHORT $LN14@New

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00041	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 8    : 	return ms_kPool.Alloc();

  00043	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00045	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+8, 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0004c	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 8    : 	return ms_kPool.Alloc();

  00052	5e		 pop	 esi

; 9    : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN14@New:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00057	8d 4d fc	 lea	 ecx, DWORD PTR _pkNewData$2[ebp]
  0005a	51		 push	 ecx
  0005b	50		 push	 eax
  0005c	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+4
  00061	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectData@@@?$vector@PAVCEffectData@@V?$allocator@PAVCEffectData@@@std@@@std@@QAEPAPAVCEffectData@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectData *,std::allocator<CEffectData *> >::_Emplace_reallocate<CEffectData * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00066	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+32
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 8    : 	return ms_kPool.Alloc();

  0006c	8b c6		 mov	 eax, esi
  0006e	5e		 pop	 esi

; 9    : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN4@New:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00073	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1624 :         return _My_data._Mylast[-1];

  00076	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1403 :         --_Mylast;

  00079	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+20, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 9    : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?New@CEffectData@@SAPAV1@XZ ENDP			; CEffectData::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?DestroySystem@CEffectData@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CEffectData@@SAXXZ PROC			; CEffectData::DestroySystem, COMDAT

; 18   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 18   : {

  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 269  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+8

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 19		 je	 SHORT $LN19@DestroySys
$LL20@DestroySys:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+4
$LN19@DestroySys:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterLib\Pool.h

; 52   : 			m_kVct_pkFree.clear();

  0002b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+16
  00030	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+8, esi
  00036	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+20, eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 21   : 	CParticleSystemData::DestroySystem();

  0003b	e8 00 00 00 00	 call	 ?DestroySystem@CParticleSystemData@@SAXXZ ; CParticleSystemData::DestroySystem

; 22   : 	CEffectMeshScript::DestroySystem();

  00040	e8 00 00 00 00	 call	 ?DestroySystem@CEffectMeshScript@@SAXXZ ; CEffectMeshScript::DestroySystem

; 23   : 	CLightData::DestroySystem();

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	e9 00 00 00 00	 jmp	 ?DestroySystem@CLightData@@SAXXZ ; CLightData::DestroySystem
?DestroySystem@CEffectData@@SAXXZ ENDP			; CEffectData::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	57		 push	 edi

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00008	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 be 00 00
	00		 je	 $LN4@vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00012	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00015	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00018	3b f8		 cmp	 edi, eax
  0001a	74 58		 je	 SHORT $LN10@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0001c	56		 push	 esi
  0001d	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
$LL11@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00022	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	72 2f		 jb	 SHORT $LN33@vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00027	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002a	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00031	72 16		 jb	 SHORT $LN43@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00033	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00036	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00039	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00041	0f 87 8f 00 00
	00		 ja	 $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00047	8b c2		 mov	 eax, edx
$LN43@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00053	83 c4 08	 add	 esp, 8
$LN33@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00056	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0005d	83 c7 1c	 add	 edi, 28			; 0000001cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00060	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00066	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  0006a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0006d	3b f8		 cmp	 edi, eax
  0006f	75 af		 jne	 SHORT $LL11@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00071	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00073	5e		 pop	 esi
$LN10@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00074	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00077	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007c	2b cf		 sub	 ecx, edi
  0007e	f7 e9		 imul	 ecx
  00080	03 d1		 add	 edx, ecx
  00082	c1 fa 04	 sar	 edx, 4
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00093	2b c8		 sub	 ecx, eax
  00095	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00098	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009e	72 12		 jb	 SHORT $LN68@vector

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a0	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000a3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a6	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ae	77 26		 ja	 SHORT $LN65@vector

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b0	8b fa		 mov	 edi, edx
$LN68@vector:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000b2	51		 push	 ecx
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  000b9	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000bf	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  000c2	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1769 :             _Myend   = nullptr;

  000c9	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN4@vector:
  000d0	5f		 pop	 edi

; 717  :     }

  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
$LN65@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@vector:
  000db	cc		 int	 3
??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@CAXXZ PROC ; std::vector<CLightData *,std::allocator<CLightData *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@CAXXZ ENDP ; std::vector<CLightData *,std::allocator<CLightData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@CAXXZ PROC ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@CAXXZ ENDP ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?AllocLight@CEffectData@@MAEPAVCLightData@@XZ
_TEXT	SEGMENT
_pLight$ = -4						; size = 4
?AllocLight@CEffectData@@MAEPAVCLightData@@XZ PROC	; CEffectData::AllocLight, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 126  : 	CLightData * pLight = CLightData::New();

  00008	e8 00 00 00 00	 call	 ?New@CLightData@@SAPAV1@XZ ; CLightData::New

; 127  : 	m_LightVector.push_back(pLight);

  0000d	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00010	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 126  : 	CLightData * pLight = CLightData::New();

  00015	89 7d fc	 mov	 DWORD PTR _pLight$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00018	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0001b	74 0e		 je	 SHORT $LN6@AllocLight

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001d	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 129  : }

  0001f	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00021	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
  00025	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 129  : }

  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN6@AllocLight:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002b	8d 55 fc	 lea	 edx, DWORD PTR _pLight$[ebp]
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLightData@@@?$vector@PAVCLightData@@V?$allocator@PAVCLightData@@@std@@@std@@QAEPAPAVCLightData@@QAPAV2@ABQAV2@@Z ; std::vector<CLightData *,std::allocator<CLightData *> >::_Emplace_reallocate<CLightData * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 129  : }

  00035	8b c7		 mov	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?AllocLight@CEffectData@@MAEPAVCLightData@@XZ ENDP	; CEffectData::AllocLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?AllocMesh@CEffectData@@MAEPAVCEffectMeshScript@@XZ
_TEXT	SEGMENT
_pMesh$ = -4						; size = 4
?AllocMesh@CEffectData@@MAEPAVCEffectMeshScript@@XZ PROC ; CEffectData::AllocMesh, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 119  : 	CEffectMeshScript * pMesh = CEffectMeshScript::New();

  00008	e8 00 00 00 00	 call	 ?New@CEffectMeshScript@@SAPAV1@XZ ; CEffectMeshScript::New

; 120  : 	m_MeshVector.push_back(pMesh);

  0000d	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00010	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 119  : 	CEffectMeshScript * pMesh = CEffectMeshScript::New();

  00015	89 7d fc	 mov	 DWORD PTR _pMesh$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00018	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0001b	74 0e		 je	 SHORT $LN6@AllocMesh

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001d	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 122  : }

  0001f	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00021	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
  00025	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 122  : }

  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN6@AllocMesh:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002b	8d 55 fc	 lea	 edx, DWORD PTR _pMesh$[ebp]
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectMeshScript@@@?$vector@PAVCEffectMeshScript@@V?$allocator@PAVCEffectMeshScript@@@std@@@std@@QAEPAPAVCEffectMeshScript@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectMeshScript *,std::allocator<CEffectMeshScript *> >::_Emplace_reallocate<CEffectMeshScript * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 122  : }

  00035	8b c7		 mov	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?AllocMesh@CEffectData@@MAEPAVCEffectMeshScript@@XZ ENDP ; CEffectData::AllocMesh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?AllocParticle@CEffectData@@MAEPAVCParticleSystemData@@XZ
_TEXT	SEGMENT
_pParticle$ = -4					; size = 4
?AllocParticle@CEffectData@@MAEPAVCParticleSystemData@@XZ PROC ; CEffectData::AllocParticle, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 112  : 	CParticleSystemData * pParticle = CParticleSystemData::New();

  00008	e8 00 00 00 00	 call	 ?New@CParticleSystemData@@SAPAV1@XZ ; CParticleSystemData::New

; 113  : 	m_ParticleVector.push_back(pParticle);

  0000d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00010	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 112  : 	CParticleSystemData * pParticle = CParticleSystemData::New();

  00015	89 7d fc	 mov	 DWORD PTR _pParticle$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00018	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0001b	74 0e		 je	 SHORT $LN6@AllocParti

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001d	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 115  : }

  0001f	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 729  :         ++_Mylast;

  00021	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
  00025	5f		 pop	 edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 115  : }

  00026	5e		 pop	 esi
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN6@AllocParti:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002b	8d 55 fc	 lea	 edx, DWORD PTR _pParticle$[ebp]
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleSystemData@@@?$vector@PAVCParticleSystemData@@V?$allocator@PAVCParticleSystemData@@@std@@@std@@QAEPAPAVCParticleSystemData@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemData *,std::allocator<CParticleSystemData *> >::_Emplace_reallocate<CParticleSystemData * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 115  : }

  00035	8b c7		 mov	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?AllocParticle@CEffectData@@MAEPAVCParticleSystemData@@XZ ENDP ; CEffectData::AllocParticle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?__ClearMeshDataVector@CEffectData@@IAEXXZ
_TEXT	SEGMENT
?__ClearMeshDataVector@CEffectData@@IAEXXZ PROC		; CEffectData::__ClearMeshDataVector, COMDAT
; _this$ = ecx

; 200  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00008	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 1c		 je	 SHORT $LN24@ClearMeshD
  0000f	90		 npad	 1
$LL18@ClearMeshD:

; 271  :         _Func(*_UFirst);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?Delete@CEffectMeshScript@@SAXPAV1@@Z ; CEffectMeshScript::Delete
  00017	83 c6 04	 add	 esi, 4
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b f3		 cmp	 esi, ebx
  0001f	75 ef		 jne	 SHORT $LL18@ClearMeshD
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 202  : 	m_MeshVector.clear();

  00021	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00024	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00027	5f		 pop	 edi

; 203  : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	c3		 ret	 0
$LN24@ClearMeshD:

; 202  : 	m_MeshVector.clear();

  0002b	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0002e	5f		 pop	 edi

; 203  : }

  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	c3		 ret	 0
?__ClearMeshDataVector@CEffectData@@IAEXXZ ENDP		; CEffectData::__ClearMeshDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?__ClearLightDataVector@CEffectData@@IAEXXZ
_TEXT	SEGMENT
?__ClearLightDataVector@CEffectData@@IAEXXZ PROC	; CEffectData::__ClearLightDataVector, COMDAT
; _this$ = ecx

; 194  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 5f 20	 mov	 ebx, DWORD PTR [edi+32]
  00008	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 1c		 je	 SHORT $LN24@ClearLight
  0000f	90		 npad	 1
$LL18@ClearLight:

; 271  :         _Func(*_UFirst);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?Delete@CLightData@@SAXPAV1@@Z ; CLightData::Delete
  00017	83 c6 04	 add	 esi, 4
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b f3		 cmp	 esi, ebx
  0001f	75 ef		 jne	 SHORT $LL18@ClearLight
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 196  : 	m_LightVector.clear();

  00021	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00024	89 47 20	 mov	 DWORD PTR [edi+32], eax
  00027	5f		 pop	 edi

; 197  : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	c3		 ret	 0
$LN24@ClearLight:

; 196  : 	m_LightVector.clear();

  0002b	89 77 20	 mov	 DWORD PTR [edi+32], esi
  0002e	5f		 pop	 edi

; 197  : }

  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	c3		 ret	 0
?__ClearLightDataVector@CEffectData@@IAEXXZ ENDP	; CEffectData::__ClearLightDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?__ClearParticleDataVector@CEffectData@@IAEXXZ
_TEXT	SEGMENT
?__ClearParticleDataVector@CEffectData@@IAEXXZ PROC	; CEffectData::__ClearParticleDataVector, COMDAT
; _this$ = ecx

; 188  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00008	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\algorithm

; 270  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 1c		 je	 SHORT $LN24@ClearParti
  0000f	90		 npad	 1
$LL18@ClearParti:

; 271  :         _Func(*_UFirst);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?Delete@CParticleSystemData@@SAXPAV1@@Z ; CParticleSystemData::Delete
  00017	83 c6 04	 add	 esi, 4
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b f3		 cmp	 esi, ebx
  0001f	75 ef		 jne	 SHORT $LL18@ClearParti
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 190  : 	m_ParticleVector.clear();

  00021	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00024	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00027	5f		 pop	 edi

; 191  : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	c3		 ret	 0
$LN24@ClearParti:

; 190  : 	m_ParticleVector.clear();

  0002b	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002e	5f		 pop	 edi

; 191  : }

  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	c3		 ret	 0
?__ClearParticleDataVector@CEffectData@@IAEXXZ ENDP	; CEffectData::__ClearParticleDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetFileName@CEffectData@@QBEPBDXZ
_TEXT	SEGMENT
?GetFileName@CEffectData@@QBEPBDXZ PROC			; CEffectData::GetFileName, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 79 58 10	 cmp	 DWORD PTR [ecx+88], 16	; 00000010H

; 3922 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 44	 lea	 eax, DWORD PTR [ecx+68]

; 2306 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetFileNam
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 184  : 	return m_strFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetFileNam:

; 185  : }

  0000b	c3		 ret	 0
?GetFileName@CEffectData@@QBEPBDXZ ENDP			; CEffectData::GetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetBoundingSpherePosition@CEffectData@@QAE?AUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetBoundingSpherePosition@CEffectData@@QAE?AUD3DXVECTOR3@@XZ PROC ; CEffectData::GetBoundingSpherePosition, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  : 	return m_v3BoundingSpherePosition;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	f3 0f 7e 41 38	 movq	 xmm0, QWORD PTR [ecx+56]
  0000b	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  0000e	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 180  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?GetBoundingSpherePosition@CEffectData@@QAE?AUD3DXVECTOR3@@XZ ENDP ; CEffectData::GetBoundingSpherePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetBoundingSphereRadius@CEffectData@@QAEMXZ
_TEXT	SEGMENT
?GetBoundingSphereRadius@CEffectData@@QAEMXZ PROC	; CEffectData::GetBoundingSphereRadius, COMDAT
; _this$ = ecx

; 174  : 	return m_fBoundingSphereRadius;

  00000	d9 41 34	 fld	 DWORD PTR [ecx+52]

; 175  : }

  00003	c3		 ret	 0
?GetBoundingSphereRadius@CEffectData@@QAEMXZ ENDP	; CEffectData::GetBoundingSphereRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetSoundInstanceVector@CEffectData@@QAEPAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetSoundInstanceVector@CEffectData@@QAEPAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ PROC ; CEffectData::GetSoundInstanceVector, COMDAT
; _this$ = ecx

; 169  : 	return &m_SoundInstanceVector;

  00000	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]

; 170  : }

  00003	c3		 ret	 0
?GetSoundInstanceVector@CEffectData@@QAEPAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ ENDP ; CEffectData::GetSoundInstanceVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetLightPointer@CEffectData@@QAEPAVCLightData@@K@Z
_TEXT	SEGMENT
_dwPosition$ = 8					; size = 4
?GetLightPointer@CEffectData@@QAEPAVCLightData@@K@Z PROC ; CEffectData::GetLightPointer, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	assert(dwPosition < m_LightVector.size());
; 139  : 	return m_LightVector[dwPosition];

  00003	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00006	8b 45 08	 mov	 eax, DWORD PTR _dwPosition$[ebp]
  00009	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 140  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?GetLightPointer@CEffectData@@QAEPAVCLightData@@K@Z ENDP ; CEffectData::GetLightPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetLightCount@CEffectData@@QAEKXZ
_TEXT	SEGMENT
?GetLightCount@CEffectData@@QAEKXZ PROC			; CEffectData::GetLightCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	2b 41 1c	 sub	 eax, DWORD PTR [ecx+28]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 134  : }

  00009	c3		 ret	 0
?GetLightCount@CEffectData@@QAEKXZ ENDP			; CEffectData::GetLightCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetMeshPointer@CEffectData@@QAEPAVCEffectMeshScript@@K@Z
_TEXT	SEGMENT
_dwPosition$ = 8					; size = 4
?GetMeshPointer@CEffectData@@QAEPAVCEffectMeshScript@@K@Z PROC ; CEffectData::GetMeshPointer, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  : 	assert(dwPosition < m_MeshVector.size());
; 164  : 	return m_MeshVector[dwPosition];

  00003	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR _dwPosition$[ebp]
  00009	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 165  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?GetMeshPointer@CEffectData@@QAEPAVCEffectMeshScript@@K@Z ENDP ; CEffectData::GetMeshPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetMeshCount@CEffectData@@QAEKXZ
_TEXT	SEGMENT
?GetMeshCount@CEffectData@@QAEKXZ PROC			; CEffectData::GetMeshCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 160  : }

  00009	c3		 ret	 0
?GetMeshCount@CEffectData@@QAEKXZ ENDP			; CEffectData::GetMeshCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z
_TEXT	SEGMENT
_dwPosition$ = 8					; size = 4
?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z PROC ; CEffectData::GetParticlePointer, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 148  : 	if(dwPosition < m_ParticleVector.size())

  00009	8b 55 08	 mov	 edx, DWORD PTR _dwPosition$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000c	2b c8		 sub	 ecx, eax
  0000e	c1 f9 02	 sar	 ecx, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 148  : 	if(dwPosition < m_ParticleVector.size())

  00011	3b d1		 cmp	 edx, ecx
  00013	73 07		 jae	 SHORT $LN2@GetParticl

; 149  : 		return m_ParticleVector[dwPosition];

  00015	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 154  : 	}
; 155  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@GetParticl:

; 150  : 	else
; 151  : 	{
; 152  : 		assert(false);
; 153  : 		return NULL;

  0001c	33 c0		 xor	 eax, eax

; 154  : 	}
; 155  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z ENDP ; CEffectData::GetParticlePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?GetParticleCount@CEffectData@@QAEKXZ
_TEXT	SEGMENT
?GetParticleCount@CEffectData@@QAEKXZ PROC		; CEffectData::GetParticleCount, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 145  : }

  00009	c3		 ret	 0
?GetParticleCount@CEffectData@@QAEKXZ ENDP		; CEffectData::GetParticleCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z
_TEXT	SEGMENT
_SoundDataVector$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z PROC	; CEffectData::LoadSoundScriptData, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp], 0
  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp+4], 0
  00038	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp+8], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 101  : 	if (NSound::LoadSoundInformationPiece(c_szFileName, SoundDataVector))

  0003f	6a 00		 push	 0
  00041	8d 45 e8	 lea	 eax, DWORD PTR _SoundDataVector$[ebp]
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0004f	e8 00 00 00 00	 call	 ?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ; NSound::LoadSoundInformationPiece
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	84 c0		 test	 al, al
  00059	74 14		 je	 SHORT $LN2@LoadSoundS

; 102  : 	{
; 103  : 		NSound::DataToInstance(SoundDataVector, &m_SoundInstanceVector);

  0005b	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0005e	50		 push	 eax
  0005f	8d 45 e8	 lea	 eax, DWORD PTR _SoundDataVector$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ; NSound::DataToInstance
  00068	83 c4 08	 add	 esp, 8
  0006b	32 db		 xor	 bl, bl
  0006d	eb 02		 jmp	 SHORT $LN5@LoadSoundS
$LN2@LoadSoundS:

; 107  : 	return true;

  0006f	b3 01		 mov	 bl, 1
$LN5@LoadSoundS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00071	8b 75 e8	 mov	 esi, DWORD PTR _SoundDataVector$[ebp]
  00074	85 f6		 test	 esi, esi
  00076	0f 84 a3 00 00
	00		 je	 $LN87@LoadSoundS

; 1764 :             _Destroy(_Myfirst, _Mylast);

  0007c	8b 7d ec	 mov	 edi, DWORD PTR _SoundDataVector$[ebp+4]
  0007f	3b f7		 cmp	 esi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  00081	74 54		 je	 SHORT $LN93@LoadSoundS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00083	83 c6 18	 add	 esi, 24			; 00000018H
$LL94@LoadSoundS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00086	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00088	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0008b	72 2c		 jb	 SHORT $LN116@LoadSoundS
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00090	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00091	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00097	72 16		 jb	 SHORT $LN126@LoadSoundS

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00099	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a7	0f 87 88 00 00
	00		 ja	 $LN148@LoadSoundS

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ad	8b c2		 mov	 eax, edx
$LN126@LoadSoundS:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000af	51		 push	 ecx
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b6	83 c4 08	 add	 esp, 8
$LN116@LoadSoundS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  000b9	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000c0	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000c6	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 949  :         for (; _First != _Last; ++_First) {

  000ca	83 c6 1c	 add	 esi, 28			; 0000001cH
  000cd	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  000d0	3b c7		 cmp	 eax, edi
  000d2	75 b2		 jne	 SHORT $LL94@LoadSoundS
  000d4	8b 75 e8	 mov	 esi, DWORD PTR _SoundDataVector$[ebp]
$LN93@LoadSoundS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000d7	8b 4d f0	 mov	 ecx, DWORD PTR _SoundDataVector$[ebp+8]
  000da	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000df	2b ce		 sub	 ecx, esi
  000e1	f7 e9		 imul	 ecx
  000e3	03 d1		 add	 edx, ecx
  000e5	c1 fa 04	 sar	 edx, 4
  000e8	8b c2		 mov	 eax, edx
  000ea	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ed	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ef	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000f6	2b c8		 sub	 ecx, eax
  000f8	8b c6		 mov	 eax, esi
  000fa	c1 e1 02	 shl	 ecx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000fd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00103	72 10		 jb	 SHORT $LN151@LoadSoundS

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00105	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00108	83 c1 23	 add	 ecx, 35			; 00000023H
  0010b	2b c6		 sub	 eax, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00110	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00113	77 20		 ja	 SHORT $LN148@LoadSoundS
$LN151@LoadSoundS:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00115	51		 push	 ecx
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011c	83 c4 08	 add	 esp, 8
$LN87@LoadSoundS:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 107  : 	return true;

  0011f	8a c3		 mov	 al, bl

; 108  : }

  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012b	59		 pop	 ecx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
$LN148@LoadSoundS:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00135	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN160@LoadSoundS:
  0013a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _SoundDataVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z ENDP	; CEffectData::LoadSoundScriptData
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?LoadScript@CEffectData@@QAE_NPBD@Z
_TEXT	SEGMENT
tv2934 = -256						; size = 4
__Possible_matches_end$1$ = -252			; size = 4
$T2 = -248						; size = 4
__Result$2$ = -244					; size = 4
_nLength$1$ = -244					; size = 4
_c_szFileName$GSCopy$1$ = -240				; size = 4
__Result$2$ = -240					; size = 4
_this$GSCopy$1$ = -236					; size = 4
_strNoExtensionName$1$ = -232				; size = 4
__Ptr$1$ = -228						; size = 4
_strNoExtensionName$2$ = -224				; size = 4
__Result$1$ = -224					; size = 4
_i$1$ = -224						; size = 4
$T3 = -217						; size = 1
tv2955 = -217						; size = 1
tv2953 = -217						; size = 1
_TextFileLoader$ = -216					; size = 128
_strSoundFileName$4 = -88				; size = 24
_strPathHeader$ = -64					; size = 24
$T5 = -64						; size = 24
$T6 = -64						; size = 24
_strNoExtensionName$ = -40				; size = 24
_strName$7 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadScript@CEffectData@@QAE_NPBD@Z PROC		; CEffectData::LoadScript, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CEffectData@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 bd 14 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00035	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00038	8b ce		 mov	 ecx, esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 27   : {

  0003a	89 b5 10 ff ff
	ff		 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00040	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL701@LoadScript:
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	41		 inc	 ecx
  00046	84 c0		 test	 al, al
  00048	75 f9		 jne	 SHORT $LL701@LoadScript
  0004a	2b ca		 sub	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 28   : 	m_strFileName = c_szFileName;

  0004c	83 c7 44	 add	 edi, 68			; 00000044H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004f	51		 push	 ecx
  00050	56		 push	 esi
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 224  : 		size_t nLength = str.length();

  00058	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 225  : 
; 226  : 		for (size_t i = 0; i<nLength; ++i)

  0005b	33 f6		 xor	 esi, esi
  0005d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _nLength$1$[ebp], eax
  00063	85 c0		 test	 eax, eax
  00065	74 66		 je	 SHORT $LN34@LoadScript
$LL35@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2331 :         if (_Mysize <= _Off) {

  00067	39 77 10	 cmp	 DWORD PTR [edi+16], esi
  0006a	0f 86 64 08 00
	00		 jbe	 $LN665@LoadScript

; 2319 :         return _BUF_SIZE <= _Myres;

  00070	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2296 :         value_type* _Result = _Bx._Buf;

  00073	8b cf		 mov	 ecx, edi

; 2297 :         if (_Large_string_engaged()) {

  00075	83 f8 10	 cmp	 eax, 16			; 00000010H
  00078	72 02		 jb	 SHORT $LN697@LoadScript

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0007a	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN697@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 228  : 			if (str.at(i) == '\\')

  0007c	80 3c 31 5c	 cmp	 BYTE PTR [ecx+esi], 92	; 0000005cH
  00080	75 0f		 jne	 SHORT $LN36@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2296 :         value_type* _Result = _Bx._Buf;

  00082	8b cf		 mov	 ecx, edi

; 2297 :         if (_Large_string_engaged()) {

  00084	83 f8 10	 cmp	 eax, 16			; 00000010H
  00087	72 02		 jb	 SHORT $LN694@LoadScript

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00089	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN694@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 229  : 				str.at(i) = '/';

  0008b	c6 04 31 2f	 mov	 BYTE PTR [ecx+esi], 47	; 0000002fH
  0008f	eb 33		 jmp	 SHORT $LN33@LoadScript
$LN36@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2297 :         if (_Large_string_engaged()) {

  00091	83 f8 10	 cmp	 eax, 16			; 00000010H
  00094	72 06		 jb	 SHORT $LN695@LoadScript

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00096	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00098	03 ce		 add	 ecx, esi
  0009a	eb 0b		 jmp	 SHORT $LN699@LoadScript
$LN695@LoadScript:

; 3831 :         return _Mypair._Myval2._Myptr()[_Off];

  0009c	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]

; 2296 :         value_type* _Result = _Bx._Buf;

  0009f	89 bd 20 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi

; 2297 :         if (_Large_string_engaged()) {

  000a5	72 08		 jb	 SHORT $LN696@LoadScript
$LN699@LoadScript:

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 07		 mov	 eax, DWORD PTR [edi]
  000a9	89 85 20 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN696@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 231  : 				str.at(i) = (char)tolower(str.at(i));

  000af	0f be 01	 movsx	 eax, BYTE PTR [ecx]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _tolower
  000b8	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR __Result$1$[ebp]
  000be	83 c4 04	 add	 esp, 4
  000c1	88 04 31	 mov	 BYTE PTR [ecx+esi], al
$LN33@LoadScript:

; 225  : 
; 226  : 		for (size_t i = 0; i<nLength; ++i)

  000c4	46		 inc	 esi
  000c5	3b b5 0c ff ff
	ff		 cmp	 esi, DWORD PTR _nLength$1$[ebp]
  000cb	72 9a		 jb	 SHORT $LL35@LoadScript
$LN34@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 31   : 	CTextFileLoader TextFileLoader;

  000cd	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader

; 32   : 	if (!TextFileLoader.Load(c_szFileName))

  000d8	ff b5 10 ff ff
	ff		 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  000de	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  000e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000eb	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load
  000f0	84 c0		 test	 al, al
  000f2	75 0b		 jne	 SHORT $LN5@LoadScript
  000f4	88 85 27 ff ff
	ff		 mov	 BYTE PTR $T3[ebp], al
  000fa	e9 cf 06 00 00	 jmp	 $LN646@LoadScript
$LN5@LoadScript:

; 33   : 		return false;
; 34   : 
; 35   : 	TextFileLoader.SetTop();

  000ff	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00105	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0010a	6a 14		 push	 20			; 00000014H

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0010c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00113	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MLNDGKC@boundingsphereradius@

; 4596 :         _My_data._Mysize = 0;

  0011b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00122	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 37   : 	if (!TextFileLoader.GetTokenFloat("boundingsphereradius", &m_fBoundingSphereRadius))

  00132	8b b5 14 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00138	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
  0013b	83 c6 34	 add	 esi, 52			; 00000034H
  0013e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00142	56		 push	 esi
  00143	50		 push	 eax
  00144	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0014a	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0014f	8b 55 d4	 mov	 edx, DWORD PTR $T6[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 37   : 	if (!TextFileLoader.GetTokenFloat("boundingsphereradius", &m_fBoundingSphereRadius))

  00152	85 c0		 test	 eax, eax
  00154	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00158	0f 94 c0	 sete	 al
  0015b	88 85 27 ff ff
	ff		 mov	 BYTE PTR tv2955[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00161	83 fa 10	 cmp	 edx, 16			; 00000010H
  00164	72 32		 jb	 SHORT $LN113@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00166	8b 4d c0	 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00169	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016a	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0016c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00172	72 14		 jb	 SHORT $LN123@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00174	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00177	83 c2 23	 add	 edx, 35			; 00000023H
  0017a	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0017f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00182	0f 87 51 07 00
	00		 ja	 $LN284@LoadScript
$LN123@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00188	52		 push	 edx
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0018f	8a 85 27 ff ff
	ff		 mov	 al, BYTE PTR tv2955[ebp]
  00195	83 c4 08	 add	 esp, 8
$LN113@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 37   : 	if (!TextFileLoader.GetTokenFloat("boundingsphereradius", &m_fBoundingSphereRadius))

  00198	84 c0		 test	 al, al
  0019a	74 06		 je	 SHORT $LN6@LoadScript

; 38   : 	{
; 39   : 		m_fBoundingSphereRadius = 0.0f;

  0019c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN6@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001a2	6a 16		 push	 22			; 00000016H

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001a4	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001ab	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HALPILME@boundingsphereposition@

; 4596 :         _My_data._Mysize = 0;

  001b3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  001ba	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001c1	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001c5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 42   : 	if (!TextFileLoader.GetTokenVector3("boundingsphereposition", &m_v3BoundingSpherePosition))

  001ca	8b b5 14 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  001d0	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  001d3	83 c6 38	 add	 esi, 56			; 00000038H
  001d6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001da	56		 push	 esi
  001db	50		 push	 eax
  001dc	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  001e2	e8 00 00 00 00	 call	 ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001e7	8b 55 d4	 mov	 edx, DWORD PTR $T5[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 42   : 	if (!TextFileLoader.GetTokenVector3("boundingsphereposition", &m_v3BoundingSpherePosition))

  001ea	85 c0		 test	 eax, eax
  001ec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f0	0f 94 c0	 sete	 al
  001f3	88 85 27 ff ff
	ff		 mov	 BYTE PTR tv2953[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001f9	83 fa 10	 cmp	 edx, 16			; 00000010H
  001fc	72 32		 jb	 SHORT $LN156@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fe	8b 4d c0	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00201	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00202	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00204	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0020a	72 14		 jb	 SHORT $LN166@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0020c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0020f	83 c2 23	 add	 edx, 35			; 00000023H
  00212	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00214	83 c0 fc	 add	 eax, -4			; fffffffcH
  00217	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0021a	0f 87 be 06 00
	00		 ja	 $LN745@LoadScript
$LN166@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00220	52		 push	 edx
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00227	8a 85 27 ff ff
	ff		 mov	 al, BYTE PTR tv2953[ebp]
  0022d	83 c4 08	 add	 esp, 8
$LN156@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 42   : 	if (!TextFileLoader.GetTokenVector3("boundingsphereposition", &m_v3BoundingSpherePosition))

  00230	84 c0		 test	 al, al
  00232	74 1a		 je	 SHORT $LN7@LoadScript

; 43   : 	{
; 44   : 		m_v3BoundingSpherePosition.x = m_v3BoundingSpherePosition.y = m_v3BoundingSpherePosition.z = 0.0f;

  00234	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0023a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00240	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  00247	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$LN7@LoadScript:

; 47   : 	for (DWORD i = 0; i < TextFileLoader.GetChildNodeCount(); ++i)

  0024e	33 f6		 xor	 esi, esi
  00250	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00256	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  0025c	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  00261	85 c0		 test	 eax, eax
  00263	0f 84 a6 02 00
	00		 je	 $LN700@LoadScript
  00269	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadScript:

; 48   : 	{
; 49   : 		if (!TextFileLoader.SetChildNode(i))

  00270	56		 push	 esi
  00271	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00277	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHK@Z ; CTextFileLoader::SetChildNode
  0027c	85 c0		 test	 eax, eax
  0027e	0f 84 71 02 00
	00		 je	 $LN2@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00284	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strName$7[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  0028b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strName$7[ebp+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00292	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strName$7[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00299	c6 45 d8 00	 mov	 BYTE PTR _strName$7[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 54   : 		if (!TextFileLoader.GetCurrentNodeName(&strName))

  0029d	8d 45 d8	 lea	 eax, DWORD PTR _strName$7[ebp]
  002a0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a4	50		 push	 eax
  002a5	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  002ab	e8 00 00 00 00	 call	 ?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::GetCurrentNodeName
  002b0	85 c0		 test	 eax, eax
  002b2	75 40		 jne	 SHORT $LN9@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002b4	8b 55 ec	 mov	 edx, DWORD PTR _strName$7[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 55   : 			continue;

  002b7	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+8], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ba	83 fa 10	 cmp	 edx, 16			; 00000010H
  002bd	0f 82 32 02 00
	00		 jb	 $LN2@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c3	8b 4d d8	 mov	 ecx, DWORD PTR _strName$7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002c6	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c7	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002c9	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002cf	72 14		 jb	 SHORT $LN206@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002d1	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002d4	83 c2 23	 add	 edx, 35			; 00000023H
  002d7	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002d9	83 c0 fc	 add	 eax, -4			; fffffffcH
  002dc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002df	0f 87 f4 05 00
	00		 ja	 $LN284@LoadScript
$LN206@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  002e5	52		 push	 edx
  002e6	51		 push	 ecx
  002e7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ec	83 c4 08	 add	 esp, 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 55   : 			continue;

  002ef	e9 01 02 00 00	 jmp	 $LN2@LoadScript
$LN9@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  002f4	83 7d ec 10	 cmp	 DWORD PTR _strName$7[ebp+20], 16 ; 00000010H
  002f8	8d 4d d8	 lea	 ecx, DWORD PTR _strName$7[ebp]

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  002fb	8b 75 e8	 mov	 esi, DWORD PTR _strName$7[ebp+16]
  002fe	b8 04 00 00 00	 mov	 eax, 4

; 2306 :         if (_Large_string_engaged()) {

  00303	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strName$7[ebp]

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00307	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04KPBEILIJ@mesh@

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  0030c	83 fe 04	 cmp	 esi, 4
  0030f	0f 47 f0	 cmova	 esi, eax

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00312	2b f0		 sub	 esi, eax
  00314	72 11		 jb	 SHORT $LN704@LoadScript
$LL705@LoadScript:
  00316	8b 01		 mov	 eax, DWORD PTR [ecx]
  00318	3b 02		 cmp	 eax, DWORD PTR [edx]
  0031a	75 10		 jne	 SHORT $LN703@LoadScript
  0031c	83 c1 04	 add	 ecx, 4
  0031f	83 c2 04	 add	 edx, 4
  00322	83 ee 04	 sub	 esi, 4
  00325	73 ef		 jae	 SHORT $LL705@LoadScript
$LN704@LoadScript:
  00327	83 fe fc	 cmp	 esi, -4			; fffffffcH
  0032a	74 34		 je	 SHORT $LN702@LoadScript
$LN703@LoadScript:
  0032c	8a 01		 mov	 al, BYTE PTR [ecx]
  0032e	3a 02		 cmp	 al, BYTE PTR [edx]
  00330	75 27		 jne	 SHORT $LN706@LoadScript
  00332	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00335	74 29		 je	 SHORT $LN702@LoadScript
  00337	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0033a	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  0033d	75 1a		 jne	 SHORT $LN706@LoadScript
  0033f	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00342	74 1c		 je	 SHORT $LN702@LoadScript
  00344	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00347	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  0034a	75 0d		 jne	 SHORT $LN706@LoadScript
  0034c	83 fe ff	 cmp	 esi, -1
  0034f	74 0f		 je	 SHORT $LN702@LoadScript
  00351	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00354	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00357	74 07		 je	 SHORT $LN702@LoadScript
$LN706@LoadScript:
  00359	1b c0		 sbb	 eax, eax
  0035b	83 c8 01	 or	 eax, 1
  0035e	eb 02		 jmp	 SHORT $LN707@LoadScript
$LN702@LoadScript:
  00360	33 c0		 xor	 eax, eax
$LN707@LoadScript:

; 592  :     if (_Ans != 0) {

  00362	85 c0		 test	 eax, eax
  00364	8b 45 e8	 mov	 eax, DWORD PTR _strName$7[ebp+16]
  00367	75 17		 jne	 SHORT $LN10@LoadScript

; 593  :         return _Ans;
; 594  :     }
; 595  : 
; 596  :     if (_Left_size < _Right_size) {

  00369	83 f8 04	 cmp	 eax, 4
  0036c	72 12		 jb	 SHORT $LN10@LoadScript

; 597  :         return -1;
; 598  :     }
; 599  : 
; 600  :     if (_Left_size > _Right_size) {

  0036e	77 10		 ja	 SHORT $LN10@LoadScript
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 59   : 			CEffectMeshScript * pMesh = AllocMesh();

  00370	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00376	8b 01		 mov	 eax, DWORD PTR [ecx]
  00378	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 60   : 			pMesh->Clear();
; 61   : 			pMesh->LoadScript(TextFileLoader);

  0037b	e9 13 01 00 00	 jmp	 $LN740@LoadScript
$LN10@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00380	83 7d ec 10	 cmp	 DWORD PTR _strName$7[ebp+20], 16 ; 00000010H
  00384	8d 4d d8	 lea	 ecx, DWORD PTR _strName$7[ebp]

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  00387	8b f0		 mov	 esi, eax

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00389	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08PKKGOGAD@particle@

; 2306 :         if (_Large_string_engaged()) {

  0038e	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strName$7[ebp]

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  00392	83 f8 08	 cmp	 eax, 8
  00395	b8 08 00 00 00	 mov	 eax, 8
  0039a	0f 47 f0	 cmova	 esi, eax

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  0039d	83 ee 04	 sub	 esi, 4
  003a0	72 11		 jb	 SHORT $LN710@LoadScript
$LL711@LoadScript:
  003a2	8b 01		 mov	 eax, DWORD PTR [ecx]
  003a4	3b 02		 cmp	 eax, DWORD PTR [edx]
  003a6	75 10		 jne	 SHORT $LN709@LoadScript
  003a8	83 c1 04	 add	 ecx, 4
  003ab	83 c2 04	 add	 edx, 4
  003ae	83 ee 04	 sub	 esi, 4
  003b1	73 ef		 jae	 SHORT $LL711@LoadScript
$LN710@LoadScript:
  003b3	83 fe fc	 cmp	 esi, -4			; fffffffcH
  003b6	74 34		 je	 SHORT $LN708@LoadScript
$LN709@LoadScript:
  003b8	8a 01		 mov	 al, BYTE PTR [ecx]
  003ba	3a 02		 cmp	 al, BYTE PTR [edx]
  003bc	75 27		 jne	 SHORT $LN712@LoadScript
  003be	83 fe fd	 cmp	 esi, -3			; fffffffdH
  003c1	74 29		 je	 SHORT $LN708@LoadScript
  003c3	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  003c6	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  003c9	75 1a		 jne	 SHORT $LN712@LoadScript
  003cb	83 fe fe	 cmp	 esi, -2			; fffffffeH
  003ce	74 1c		 je	 SHORT $LN708@LoadScript
  003d0	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  003d3	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  003d6	75 0d		 jne	 SHORT $LN712@LoadScript
  003d8	83 fe ff	 cmp	 esi, -1
  003db	74 0f		 je	 SHORT $LN708@LoadScript
  003dd	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  003e0	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  003e3	74 07		 je	 SHORT $LN708@LoadScript
$LN712@LoadScript:
  003e5	1b c0		 sbb	 eax, eax
  003e7	83 c8 01	 or	 eax, 1
  003ea	eb 02		 jmp	 SHORT $LN713@LoadScript
$LN708@LoadScript:
  003ec	33 c0		 xor	 eax, eax
$LN713@LoadScript:

; 592  :     if (_Ans != 0) {

  003ee	85 c0		 test	 eax, eax
  003f0	8b 45 e8	 mov	 eax, DWORD PTR _strName$7[ebp+16]
  003f3	75 17		 jne	 SHORT $LN12@LoadScript

; 593  :         return _Ans;
; 594  :     }
; 595  : 
; 596  :     if (_Left_size < _Right_size) {

  003f5	83 f8 08	 cmp	 eax, 8
  003f8	72 12		 jb	 SHORT $LN12@LoadScript

; 597  :         return -1;
; 598  :     }
; 599  : 
; 600  :     if (_Left_size > _Right_size) {

  003fa	77 10		 ja	 SHORT $LN12@LoadScript
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 65   : 			CParticleSystemData * pParticleSystemData = AllocParticle();

  003fc	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00402	8b 01		 mov	 eax, DWORD PTR [ecx]
  00404	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 66   : 			pParticleSystemData->Clear();
; 67   : 			pParticleSystemData->LoadScript(TextFileLoader);
; 68   : 		}

  00407	e9 87 00 00 00	 jmp	 $LN740@LoadScript
$LN12@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0040c	83 7d ec 10	 cmp	 DWORD PTR _strName$7[ebp+20], 16 ; 00000010H
  00410	8d 4d d8	 lea	 ecx, DWORD PTR _strName$7[ebp]

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  00413	8b f0		 mov	 esi, eax

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00415	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05OEPGNJB@light@

; 2306 :         if (_Large_string_engaged()) {

  0041a	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strName$7[ebp]

; 590  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  0041e	83 f8 05	 cmp	 eax, 5
  00421	b8 05 00 00 00	 mov	 eax, 5
  00426	0f 47 f0	 cmova	 esi, eax

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00429	83 ee 04	 sub	 esi, 4
  0042c	72 13		 jb	 SHORT $LN716@LoadScript
  0042e	66 90		 npad	 2
$LL717@LoadScript:
  00430	8b 01		 mov	 eax, DWORD PTR [ecx]
  00432	3b 02		 cmp	 eax, DWORD PTR [edx]
  00434	75 10		 jne	 SHORT $LN715@LoadScript
  00436	83 c1 04	 add	 ecx, 4
  00439	83 c2 04	 add	 edx, 4
  0043c	83 ee 04	 sub	 esi, 4
  0043f	73 ef		 jae	 SHORT $LL717@LoadScript
$LN716@LoadScript:
  00441	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00444	74 34		 je	 SHORT $LN714@LoadScript
$LN715@LoadScript:
  00446	8a 01		 mov	 al, BYTE PTR [ecx]
  00448	3a 02		 cmp	 al, BYTE PTR [edx]
  0044a	75 27		 jne	 SHORT $LN718@LoadScript
  0044c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0044f	74 29		 je	 SHORT $LN714@LoadScript
  00451	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00454	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00457	75 1a		 jne	 SHORT $LN718@LoadScript
  00459	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0045c	74 1c		 je	 SHORT $LN714@LoadScript
  0045e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00461	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00464	75 0d		 jne	 SHORT $LN718@LoadScript
  00466	83 fe ff	 cmp	 esi, -1
  00469	74 0f		 je	 SHORT $LN714@LoadScript
  0046b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0046e	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00471	74 07		 je	 SHORT $LN714@LoadScript
$LN718@LoadScript:
  00473	1b c0		 sbb	 eax, eax
  00475	83 c8 01	 or	 eax, 1
  00478	eb 02		 jmp	 SHORT $LN719@LoadScript
$LN714@LoadScript:
  0047a	33 c0		 xor	 eax, eax
$LN719@LoadScript:

; 592  :     if (_Ans != 0) {

  0047c	85 c0		 test	 eax, eax
  0047e	75 2c		 jne	 SHORT $LN14@LoadScript

; 593  :         return _Ans;
; 594  :     }
; 595  : 
; 596  :     if (_Left_size < _Right_size) {

  00480	83 7d e8 05	 cmp	 DWORD PTR _strName$7[ebp+16], 5
  00484	72 26		 jb	 SHORT $LN14@LoadScript

; 597  :         return -1;
; 598  :     }
; 599  : 
; 600  :     if (_Left_size > _Right_size) {

  00486	77 24		 ja	 SHORT $LN14@LoadScript
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 71   : 			CLightData * pLightData = AllocLight();

  00488	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0048e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00490	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$LN740@LoadScript:

; 72   : 			pLightData->Clear();
; 73   : 			pLightData->LoadScript(TextFileLoader);
; 74   : 		}
; 75   : 
; 76   : 		TextFileLoader.SetParentNode();

  00493	ff d0		 call	 eax
  00495	8b f0		 mov	 esi, eax
  00497	8b ce		 mov	 ecx, esi
  00499	e8 00 00 00 00	 call	 ?Clear@CEffectElementBase@@QAEXXZ ; CEffectElementBase::Clear
  0049e	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _TextFileLoader$[ebp]
  004a4	8b ce		 mov	 ecx, esi
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ; CEffectElementBase::LoadScript
$LN14@LoadScript:
  004ac	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  004b2	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004b7	8b 55 ec	 mov	 edx, DWORD PTR _strName$7[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 77   : 	}

  004ba	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004be	83 fa 10	 cmp	 edx, 16			; 00000010H
  004c1	72 2c		 jb	 SHORT $LN737@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c3	8b 4d d8	 mov	 ecx, DWORD PTR _strName$7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004c6	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c7	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004c9	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004cf	72 14		 jb	 SHORT $LN287@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d1	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004d4	83 c2 23	 add	 edx, 35			; 00000023H
  004d7	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004d9	83 c0 fc	 add	 eax, -4			; fffffffcH
  004dc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004df	0f 87 f4 03 00
	00		 ja	 $LN284@LoadScript
$LN287@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  004e5	52		 push	 edx
  004e6	51		 push	 ecx
  004e7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004ec	83 c4 08	 add	 esp, 8
$LN737@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 47   : 	for (DWORD i = 0; i < TextFileLoader.GetChildNodeCount(); ++i)

  004ef	8b b5 20 ff ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LN2@LoadScript:
  004f5	46		 inc	 esi
  004f6	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  004fc	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  00502	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  00507	3b f0		 cmp	 esi, eax
  00509	0f 82 61 fd ff
	ff		 jb	 $LL4@LoadScript
$LN700@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0050f	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@+8
  00514	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@
  0051c	89 45 c8	 mov	 DWORD PTR _strPathHeader$[ebp+8], eax
  0051f	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@GCFJLOM@d?3?1ymir?5work?1@+12

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00524	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strPathHeader$[ebp+20], 15 ; 0000000fH

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  0052b	c7 45 d0 0d 00
	00 00		 mov	 DWORD PTR _strPathHeader$[ebp+16], 13 ; 0000000dH

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00532	66 0f d6 45 c0	 movq	 QWORD PTR _strPathHeader$[ebp], xmm0
  00537	88 45 cc	 mov	 BYTE PTR _strPathHeader$[ebp+12], al

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0053a	c6 45 cd 00	 mov	 BYTE PTR _strPathHeader$[ebp+13], 0

; 2319 :         return _BUF_SIZE <= _Myres;

  0053e	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 2305 :         const value_type* _Result = _Bx._Buf;

  00541	8b d7		 mov	 edx, edi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 80   : 	std::string strPathHeader = "d:/ymir work/";

  00543	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  00547	83 fe 10	 cmp	 esi, 16			; 00000010H
  0054a	72 02		 jb	 SHORT $LN698@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  0054c	8b 17		 mov	 edx, DWORD PTR [edi]
$LN698@LoadScript:

; 4271 :         return static_cast<size_type>(

  0054e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00551	89 85 18 ff ff
	ff		 mov	 DWORD PTR _strNoExtensionName$1$[ebp], eax

; 683  :     if (_Hay_size != 0) { // room for match, look for it

  00557	85 c0		 test	 eax, eax
  00559	74 7d		 je	 SHORT $LN365@LoadScript

; 684  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0055b	83 c9 ff	 or	 ecx, -1
  0055e	48		 dec	 eax
  0055f	3b c1		 cmp	 eax, ecx
  00561	0f 42 c8	 cmovb	 ecx, eax
  00564	03 ca		 add	 ecx, edx

; 685  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00566	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH
  00569	74 0f		 je	 SHORT $LN669@LoadScript
  0056b	0f 1f 44 00 00	 npad	 5
$LL379@LoadScript:

; 687  :             }
; 688  : 
; 689  :             if (_Match_try == _Haystack) {

  00570	3b ca		 cmp	 ecx, edx
  00572	74 5e		 je	 SHORT $LN736@LoadScript

; 685  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00574	49		 dec	 ecx
  00575	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH
  00578	75 f6		 jne	 SHORT $LL379@LoadScript
$LN669@LoadScript:

; 686  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0057a	2b ca		 sub	 ecx, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 335  : 	if (string::npos != npos)

  0057c	83 f9 ff	 cmp	 ecx, -1
  0057f	74 51		 je	 SHORT $LN736@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  00581	39 8d 18 ff ff
	ff		 cmp	 DWORD PTR _strNoExtensionName$1$[ebp], ecx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00587	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strNoExtensionName$[ebp], 0

; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  0058e	0f 42 8d 18 ff
	ff ff		 cmovb	 ecx, DWORD PTR _strNoExtensionName$1$[ebp]

; 4596 :         _My_data._Mysize = 0;

  00595	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strNoExtensionName$[ebp+16], 0

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0059c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strNoExtensionName$[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005a3	c6 45 d8 00	 mov	 BYTE PTR _strNoExtensionName$[ebp], 0

; 2306 :         if (_Large_string_engaged()) {

  005a7	83 fe 10	 cmp	 esi, 16			; 00000010H
  005aa	72 02		 jb	 SHORT $LN411@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  005ac	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN411@LoadScript:

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  005ae	51		 push	 ecx
  005af	57		 push	 edi
  005b0	8d 4d d8	 lea	 ecx, DWORD PTR _strNoExtensionName$[ebp]
  005b3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\filename.h

; 336  : 		return std::string(str, 0, npos);

  005b8	8b 75 ec	 mov	 esi, DWORD PTR _strNoExtensionName$[ebp+20]
  005bb	8b 55 d8	 mov	 edx, DWORD PTR _strNoExtensionName$[ebp]
  005be	8b 45 e8	 mov	 eax, DWORD PTR _strNoExtensionName$[ebp+16]
  005c1	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _strNoExtensionName$2$[ebp], esi
  005c7	89 95 1c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edx
  005cd	e9 a7 00 00 00	 jmp	 $LN741@LoadScript
$LN736@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  005d2	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _strNoExtensionName$1$[ebp]
$LN365@LoadScript:
  005d8	83 fe 10	 cmp	 esi, 16			; 00000010H
  005db	72 02		 jb	 SHORT $LN431@LoadScript

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  005dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN431@LoadScript:

; 2933 :         if (_Stay_small) { // stay small, don't allocate

  005df	83 f8 10	 cmp	 eax, 16			; 00000010H
  005e2	73 23		 jae	 SHORT $LN428@LoadScript

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005e4	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  005e7	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  005ec	89 45 e8	 mov	 DWORD PTR _strNoExtensionName$[ebp+16], eax
  005ef	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _strNoExtensionName$2$[ebp], esi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005f5	0f 11 45 d8	 movups	 XMMWORD PTR _strNoExtensionName$[ebp], xmm0

; 2937 :             return;

  005f9	8b 55 d8	 mov	 edx, DWORD PTR _strNoExtensionName$[ebp]
  005fc	89 75 ec	 mov	 DWORD PTR _strNoExtensionName$[ebp+20], esi
  005ff	89 95 1c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edx
  00605	eb 78		 jmp	 SHORT $LN427@LoadScript
$LN428@LoadScript:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();
; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00607	8b f0		 mov	 esi, eax
  00609	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0060e	83 ce 0f	 or	 esi, 15			; 0000000fH
  00611	3b f0		 cmp	 esi, eax
  00613	0f 47 f0	 cmova	 esi, eax
  00616	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _strNoExtensionName$2$[ebp], esi

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0061c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0061f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00624	72 0d		 jb	 SHORT $LN442@LoadScript

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0062c	83 c4 04	 add	 esp, 4
  0062f	8b c8		 mov	 ecx, eax
  00631	eb 19		 jmp	 SHORT $LN742@LoadScript
$LN442@LoadScript:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00633	85 c0		 test	 eax, eax
  00635	74 13		 je	 SHORT $LN443@LoadScript

; 85   :         return ::operator new(_Bytes);

  00637	50		 push	 eax
  00638	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0063d	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00640	89 85 1c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00646	8b c8		 mov	 ecx, eax
  00648	eb 08		 jmp	 SHORT $LN441@LoadScript
$LN443@LoadScript:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  0064a	33 c9		 xor	 ecx, ecx
$LN742@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2943 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  0064c	89 8d 1c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
$LN441@LoadScript:

; 2944 : 
; 2945 : #ifdef __cpp_lib_constexpr_string
; 2946 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2947 :             _Traits::assign(_Unfancy(_New_array), _New_capacity + 1, _Elem());
; 2948 :         }
; 2949 : #endif // __cpp_lib_constexpr_string
; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00652	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _strNoExtensionName$1$[ebp]
  00658	40		 inc	 eax
  00659	89 4d d8	 mov	 DWORD PTR _strNoExtensionName$[ebp], ecx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0065c	50		 push	 eax
  0065d	57		 push	 edi
  0065e	51		 push	 ecx
  0065f	e8 00 00 00 00	 call	 _memcpy

; 2951 :         _My_data._Mysize = _Right_size;

  00664	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _strNoExtensionName$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0066a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0066d	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]

; 2951 :         _My_data._Mysize = _Right_size;

  00673	89 45 e8	 mov	 DWORD PTR _strNoExtensionName$[ebp+16], eax

; 2952 :         _My_data._Myres  = _New_capacity;

  00676	89 75 ec	 mov	 DWORD PTR _strNoExtensionName$[ebp+20], esi
$LN741@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 81   : 	std::string strNoExtensionName = CFileNameHelper::NoExtension(m_strFileName);

  00679	89 85 18 ff ff
	ff		 mov	 DWORD PTR _strNoExtensionName$1$[ebp], eax
$LN427@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2305 :         const value_type* _Result = _Bx._Buf;

  0067f	8d 45 c0	 lea	 eax, DWORD PTR _strPathHeader$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 81   : 	std::string strNoExtensionName = CFileNameHelper::NoExtension(m_strFileName);

  00682	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00686	8b c8		 mov	 ecx, eax

; 2306 :         if (_Large_string_engaged()) {

  00688	89 85 10 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0068e	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL720@LoadScript:
  00691	8a 01		 mov	 al, BYTE PTR [ecx]
  00693	41		 inc	 ecx
  00694	84 c0		 test	 al, al
  00696	75 f9		 jne	 SHORT $LL720@LoadScript
  00698	2b cf		 sub	 ecx, edi

; 2305 :         const value_type* _Result = _Bx._Buf;

  0069a	8d 45 d8	 lea	 eax, DWORD PTR _strNoExtensionName$[ebp]

; 612  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  0069d	8b bd 18 ff ff
	ff		 mov	 edi, DWORD PTR _strNoExtensionName$1$[ebp]

; 2306 :         if (_Large_string_engaged()) {

  006a3	83 fe 10	 cmp	 esi, 16			; 00000010H

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006a6	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx

; 2306 :         if (_Large_string_engaged()) {

  006ac	0f 43 c2	 cmovae	 eax, edx
  006af	89 85 0c ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 612  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  006b5	3b cf		 cmp	 ecx, edi
  006b7	0f 87 d0 00 00
	00		 ja	 $LN734@LoadScript

; 613  :         // xpos cannot exist, report failure
; 614  :         // N4659 24.3.2.7.2 [string.find]/1 says:
; 615  :         // 1. _Start_at <= xpos
; 616  :         // 2. xpos + _Needle_size <= _Hay_size;
; 617  :         // therefore:
; 618  :         // 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 619  :         // 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 620  :         // 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 621  :         return static_cast<size_t>(-1);
; 622  :     }
; 623  : 
; 624  :     if (_Needle_size == 0) { // empty string always matches if xpos is possible

  006bd	85 c9		 test	 ecx, ecx
  006bf	0f 84 51 01 00
	00		 je	 $LN693@LoadScript

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  006c5	8b b5 10 ff ff
	ff		 mov	 esi, DWORD PTR __Result$2$[ebp]

; 628  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  006cb	2b c1		 sub	 eax, ecx

; 630  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  006cd	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR __Result$2$[ebp]
  006d3	47		 inc	 edi
  006d4	03 c7		 add	 eax, edi
  006d6	89 85 04 ff ff
	ff		 mov	 DWORD PTR __Possible_matches_end$1$[ebp], eax
  006dc	2b c1		 sub	 eax, ecx

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  006de	0f be 16	 movsx	 edx, BYTE PTR [esi]
  006e1	50		 push	 eax
  006e2	52		 push	 edx
  006e3	51		 push	 ecx
  006e4	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv2934[ebp], edx
  006ea	e8 00 00 00 00	 call	 _memchr
  006ef	8b f8		 mov	 edi, eax
  006f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  :         if (!_Match_try) { // didn't find first character; report failure

  006f4	85 ff		 test	 edi, edi
  006f6	0f 84 91 00 00
	00		 je	 $LN734@LoadScript
  006fc	0f 1f 40 00	 npad	 4
$LL468@LoadScript:

; 392  :         return _CSTD memcmp(_First1, _First2, _Count);

  00700	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00706	8b d7		 mov	 edx, edi
  00708	83 e9 04	 sub	 ecx, 4
  0070b	72 14		 jb	 SHORT $LN723@LoadScript
  0070d	0f 1f 00	 npad	 3
$LL724@LoadScript:
  00710	8b 02		 mov	 eax, DWORD PTR [edx]
  00712	3b 06		 cmp	 eax, DWORD PTR [esi]
  00714	75 10		 jne	 SHORT $LN722@LoadScript
  00716	83 c2 04	 add	 edx, 4
  00719	83 c6 04	 add	 esi, 4
  0071c	83 e9 04	 sub	 ecx, 4
  0071f	73 ef		 jae	 SHORT $LL724@LoadScript
$LN723@LoadScript:
  00721	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00724	74 34		 je	 SHORT $LN721@LoadScript
$LN722@LoadScript:
  00726	8a 02		 mov	 al, BYTE PTR [edx]
  00728	3a 06		 cmp	 al, BYTE PTR [esi]
  0072a	75 27		 jne	 SHORT $LN725@LoadScript
  0072c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0072f	74 29		 je	 SHORT $LN721@LoadScript
  00731	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00734	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00737	75 1a		 jne	 SHORT $LN725@LoadScript
  00739	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0073c	74 1c		 je	 SHORT $LN721@LoadScript
  0073e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00741	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00744	75 0d		 jne	 SHORT $LN725@LoadScript
  00746	83 f9 ff	 cmp	 ecx, -1
  00749	74 0f		 je	 SHORT $LN721@LoadScript
  0074b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0074e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00751	74 07		 je	 SHORT $LN721@LoadScript
$LN725@LoadScript:
  00753	1b c0		 sbb	 eax, eax
  00755	83 c8 01	 or	 eax, 1
  00758	eb 02		 jmp	 SHORT $LN726@LoadScript
$LN721@LoadScript:
  0075a	33 c0		 xor	 eax, eax
$LN726@LoadScript:

; 635  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  0075c	85 c0		 test	 eax, eax
  0075e	0f 84 98 00 00
	00		 je	 $LN672@LoadScript

; 629  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  00764	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  0076a	47		 inc	 edi

; 630  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  0076b	2b c7		 sub	 eax, edi

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  0076d	50		 push	 eax
  0076e	ff b5 00 ff ff
	ff		 push	 DWORD PTR tv2934[ebp]
  00774	57		 push	 edi
  00775	e8 00 00 00 00	 call	 _memchr

; 631  :         if (!_Match_try) { // didn't find first character; report failure

  0077a	8b b5 10 ff ff
	ff		 mov	 esi, DWORD PTR __Result$2$[ebp]

; 433  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00780	8b f8		 mov	 edi, eax
  00782	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  :         if (!_Match_try) { // didn't find first character; report failure

  00785	85 ff		 test	 edi, edi
  00787	0f 85 73 ff ff
	ff		 jne	 $LL468@LoadScript
$LN734@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 94   : 	return true;

  0078d	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
$LN733@LoadScript:
  00793	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _strNoExtensionName$2$[ebp]
$LN592@LoadScript:
  00799	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  007a0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  007a3	72 29		 jb	 SHORT $LN646@LoadScript

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  007a5	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007a6	8b c2		 mov	 eax, edx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007ae	72 14		 jb	 SHORT $LN629@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007b0	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  007b3	83 c1 23	 add	 ecx, 35			; 00000023H
  007b6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  007bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007be	0f 87 15 01 00
	00		 ja	 $LN284@LoadScript
$LN629@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  007c4	51		 push	 ecx
  007c5	52		 push	 edx
  007c6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007cb	83 c4 08	 add	 esp, 8
$LN646@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 94   : 	return true;

  007ce	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  007d4	e8 00 00 00 00	 call	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
  007d9	8a 85 27 ff ff
	ff		 mov	 al, BYTE PTR $T3[ebp]

; 95   : }

  007df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007e9	59		 pop	 ecx
  007ea	5f		 pop	 edi
  007eb	5e		 pop	 esi
  007ec	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ef	33 cd		 xor	 ecx, ebp
  007f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007f6	8b e5		 mov	 esp, ebp
  007f8	5d		 pop	 ebp
  007f9	c2 04 00	 ret	 4
$LN672@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 636  :             return static_cast<size_t>(_Match_try - _Haystack);

  007fc	2b bd 0c ff ff
	ff		 sub	 edi, DWORD PTR __Result$2$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 83   : 	if (iPos >= 0)

  00802	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  00808	78 89		 js	 SHORT $LN733@LoadScript
  0080a	8b b5 20 ff ff
	ff		 mov	 esi, DWORD PTR _strNoExtensionName$2$[ebp]
  00810	8b bd 18 ff ff
	ff		 mov	 edi, DWORD PTR _strNoExtensionName$1$[ebp]
$LN693@LoadScript:

; 84   : 	if (strNoExtensionName.size() > strPathHeader.size())

  00816	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0081b	3b f9		 cmp	 edi, ecx
  0081d	0f 86 6a ff ff
	ff		 jbe	 $LN734@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00823	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strSoundFileName$4[ebp+20], 15 ; 0000000fH

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0082a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06PBLIODKG@sound?1@

; 2319 :         return _BUF_SIZE <= _Myres;

  0082f	83 fe 10	 cmp	 esi, 16			; 00000010H

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00832	89 45 a8	 mov	 DWORD PTR _strSoundFileName$4[ebp], eax
  00835	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06PBLIODKG@sound?1@+4
  0083b	66 89 45 ac	 mov	 WORD PTR _strSoundFileName$4[ebp+4], ax

; 2296 :         value_type* _Result = _Bx._Buf;

  0083f	8d 45 d8	 lea	 eax, DWORD PTR _strNoExtensionName$[ebp]

; 2297 :         if (_Large_string_engaged()) {

  00842	0f 43 c2	 cmovae	 eax, edx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 86   : 		std::string strSoundFileName;

  00845	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00849	c7 45 b8 06 00
	00 00		 mov	 DWORD PTR _strSoundFileName$4[ebp+16], 6

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00850	c6 45 ae 00	 mov	 BYTE PTR _strSoundFileName$4[ebp+6], 0

; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  00854	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00857	8b ca		 mov	 ecx, edx
  00859	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0085c	0f 1f 40 00	 npad	 4
$LL727@LoadScript:
  00860	8a 01		 mov	 al, BYTE PTR [ecx]
  00862	41		 inc	 ecx
  00863	84 c0		 test	 al, al
  00865	75 f9		 jne	 SHORT $LL727@LoadScript
  00867	2b ce		 sub	 ecx, esi

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00869	51		 push	 ecx
  0086a	52		 push	 edx
  0086b	8d 4d a8	 lea	 ecx, DWORD PTR _strSoundFileName$4[ebp]
  0086e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00873	6a 04		 push	 4
  00875	68 00 00 00 00	 push	 OFFSET ??_C@_04NMMFEKGF@?4mss@
  0087a	8d 4d a8	 lea	 ecx, DWORD PTR _strSoundFileName$4[ebp]
  0087d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2319 :         return _BUF_SIZE <= _Myres;

  00882	83 7d bc 10	 cmp	 DWORD PTR _strSoundFileName$4[ebp+20], 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00886	8d 45 a8	 lea	 eax, DWORD PTR _strSoundFileName$4[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 91   : 		LoadSoundScriptData(strSoundFileName.c_str());

  00889	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2306 :         if (_Large_string_engaged()) {

  0088f	0f 43 45 a8	 cmovae	 eax, DWORD PTR _strSoundFileName$4[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 91   : 		LoadSoundScriptData(strSoundFileName.c_str());

  00893	50		 push	 eax
  00894	e8 00 00 00 00	 call	 ?LoadSoundScriptData@CEffectData@@QAE_NPBD@Z ; CEffectData::LoadSoundScriptData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00899	8b 55 bc	 mov	 edx, DWORD PTR _strSoundFileName$4[ebp+20]
  0089c	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0089f	72 28		 jb	 SHORT $LN728@LoadScript
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008a1	8b 4d a8	 mov	 ecx, DWORD PTR _strSoundFileName$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  008a4	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008a5	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  008a7	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  008ad	72 10		 jb	 SHORT $LN602@LoadScript

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008af	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  008b2	83 c2 23	 add	 edx, 35			; 00000023H
  008b5	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  008ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008bd	77 24		 ja	 SHORT $LN746@LoadScript
$LN602@LoadScript:

; 264  :         ::operator delete(_Ptr, _Bytes);

  008bf	52		 push	 edx
  008c0	51		 push	 ecx
  008c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008c6	83 c4 08	 add	 esp, 8
$LN728@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 94   : 	return true;

  008c9	8b 4d ec	 mov	 ecx, DWORD PTR _strNoExtensionName$[ebp+20]
  008cc	8b 55 d8	 mov	 edx, DWORD PTR _strNoExtensionName$[ebp]
  008cf	e9 c5 fe ff ff	 jmp	 $LN592@LoadScript
$LN665@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2332 :             _Xran();

  008d4	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN284@LoadScript:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 95   : }

  008d9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN745@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008de	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN746@LoadScript:
  008e3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN739@LoadScript:
  008e8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$1:
  0000b	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$2:
  00013	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$3:
  0001b	8d 4d d8	 lea	 ecx, DWORD PTR _strName$7[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$4:
  00023	8d 4d c0	 lea	 ecx, DWORD PTR _strPathHeader$[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$5:
  0002b	8d 4d d8	 lea	 ecx, DWORD PTR _strNoExtensionName$[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectData@@QAE_NPBD@Z$6:
  00033	8d 4d a8	 lea	 ecx, DWORD PTR _strSoundFileName$4[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003b	cc		 int	 3
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
__ehhandler$?LoadScript@CEffectData@@QAE_NPBD@Z:
  00040	90		 npad	 1
  00041	90		 npad	 1
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CEffectData@@QAE_NPBD@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CEffectData@@QAE_NPBD@Z ENDP		; CEffectData::LoadScript
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ?Clear@CEffectData@@QAEXXZ
_TEXT	SEGMENT
?Clear@CEffectData@@QAEXXZ PROC				; CEffectData::Clear, COMDAT
; _this$ = ecx

; 206  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 207  : 	m_fBoundingSphereRadius = 0.0f;

  00003	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 208  : 	m_v3BoundingSpherePosition.x = m_v3BoundingSpherePosition.y = m_v3BoundingSpherePosition.z = 0.0f;

  0000a	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00011	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00018	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 209  : 	__ClearParticleDataVector();

  0001f	e8 00 00 00 00	 call	 ?__ClearParticleDataVector@CEffectData@@IAEXXZ ; CEffectData::__ClearParticleDataVector

; 210  : 	__ClearLightDataVector();

  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?__ClearLightDataVector@CEffectData@@IAEXXZ ; CEffectData::__ClearLightDataVector

; 211  : 	__ClearMeshDataVector();

  0002b	8b ce		 mov	 ecx, esi
  0002d	5e		 pop	 esi
  0002e	e9 00 00 00 00	 jmp	 ?__ClearMeshDataVector@CEffectData@@IAEXXZ ; CEffectData::__ClearMeshDataVector
?Clear@CEffectData@@QAEXXZ ENDP				; CEffectData::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ??1CEffectData@@UAE@XZ
_TEXT	SEGMENT
??1CEffectData@@UAE@XZ PROC				; CEffectData::~CEffectData, COMDAT
; _this$ = ecx

; 220  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectData@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00009	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0000f	72 2c		 jb	 SHORT $LN15@CEffectDat
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00014	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 16		 jb	 SHORT $LN25@CEffectDat

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	0f 87 04 01 00
	00		 ja	 $LN95@CEffectDat

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00031	8b c2		 mov	 eax, edx
$LN25@CEffectDat:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN15@CEffectDat:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 221  : }

  0003d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00040	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00047	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 221  : }

  00052	e8 00 00 00 00	 call	 ??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00057	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005a	85 c0		 test	 eax, eax
  0005c	74 45		 je	 SHORT $LN34@CEffectDat

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00061	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00063	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00066	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0006c	72 16		 jb	 SHORT $LN50@CEffectDat

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00071	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00074	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00076	83 c0 fc	 add	 eax, -4			; fffffffcH
  00079	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0007c	0f 87 b3 00 00
	00		 ja	 $LN95@CEffectDat

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN50@CEffectDat:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0008b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00095	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 1769 :             _Myend   = nullptr;

  0009c	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN34@CEffectDat:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN58@CEffectDat

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN74@CEffectDat

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 6b		 ja	 SHORT $LN95@CEffectDat

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN74@CEffectDat:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  000d3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  000dd	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1769 :             _Myend   = nullptr;

  000e4	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN58@CEffectDat:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  000eb	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ee	85 c0		 test	 eax, eax
  000f0	74 41		 je	 SHORT $LN82@CEffectDat

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000f5	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000fa	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00100	72 12		 jb	 SHORT $LN98@CEffectDat

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00102	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00105	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00108	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00110	77 23		 ja	 SHORT $LN95@CEffectDat

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00112	8b c2		 mov	 eax, edx
$LN98@CEffectDat:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00114	51		 push	 ecx
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0011b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00122	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00125	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1769 :             _Myend   = nullptr;

  0012c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN82@CEffectDat:
  00133	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 221  : }

  00134	c3		 ret	 0
$LN95@CEffectDat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00135	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN103@CEffectDat:
  0013a	cc		 int	 3
??1CEffectData@@UAE@XZ ENDP				; CEffectData::~CEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp
;	COMDAT ??0CEffectData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEffectData@@QAE@XZ PROC				; CEffectData::CEffectData, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CEffectData@@6B@

; 218  : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00021	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00028	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00036	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0003d	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00044	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0004b	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00052	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00059	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00060	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 4596 :         _My_data._Mysize = 0;

  00067	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0006e	c7 41 58 0f 00
	00 00		 mov	 DWORD PTR [ecx+88], 15	; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00075	c6 41 44 00	 mov	 BYTE PTR [ecx+68], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\EffectData.cpp

; 215  : {

  00079	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 	m_fBoundingSphereRadius = 0.0f;

  0007c	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 217  : 	m_v3BoundingSpherePosition.x = m_v3BoundingSpherePosition.y = m_v3BoundingSpherePosition.z = 0.0f;

  00083	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  0008a	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00091	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 218  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
??0CEffectData@@QAE@XZ ENDP				; CEffectData::CEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2319 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv533 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv534 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv537 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3152 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3153 :         // append [_Ptr, _Ptr + _Count)
; 3154 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3155 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3156 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2319 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3157 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3158 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3159 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3172 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4490 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv537[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv537[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4494 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv537[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 85   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv534[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv533[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv534[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3163 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4544 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2337 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
