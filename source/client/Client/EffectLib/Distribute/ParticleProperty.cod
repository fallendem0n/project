; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Distribute\ParticleProperty.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CParticleProperty@@QAE@XZ			; CParticleProperty::CParticleProperty
PUBLIC	??1CParticleProperty@@UAE@XZ			; CParticleProperty::~CParticleProperty
PUBLIC	?Clear@CParticleProperty@@QAEXXZ		; CParticleProperty::Clear
PUBLIC	?InsertTexture@CParticleProperty@@QAEXPBD@Z	; CParticleProperty::InsertTexture
PUBLIC	?SetTexture@CParticleProperty@@QAE_NPBD@Z	; CParticleProperty::SetTexture
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
PUBLIC	?_Clear_and_reserve_geometric@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Clear_and_reserve_geometric
PUBLIC	?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
PUBLIC	??4CParticleProperty@@QAEAAV0@ABV0@@Z		; CParticleProperty::operator=
PUBLIC	??_GCParticleProperty@@UAEPAXI@Z		; CParticleProperty::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
PUBLIC	??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
PUBLIC	??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CParticleProperty@@6B@			; CParticleProperty::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CParticleProperty@@6B@			; CParticleProperty::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCParticleProperty@@@8			; CParticleProperty `RTTI Type Descriptor'
PUBLIC	??_R3CParticleProperty@@8			; CParticleProperty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CParticleProperty@@8			; CParticleProperty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CParticleProperty@@8		; CParticleProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_ECParticleProperty@@UAEPAXI@Z:PROC		; CParticleProperty::`vector deleting destructor'
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CParticleProperty@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CParticleProperty@@8 DD FLAT:??_R0?AVCParticleProperty@@@8 ; CParticleProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_R2CParticleProperty@@8
rdata$r	SEGMENT
??_R2CParticleProperty@@8 DD FLAT:??_R1A@?0A@EA@CParticleProperty@@8 ; CParticleProperty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CParticleProperty@@8
rdata$r	SEGMENT
??_R3CParticleProperty@@8 DD 00H			; CParticleProperty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCParticleProperty@@@8
data$rs	SEGMENT
??_R0?AVCParticleProperty@@@8 DD FLAT:??_7type_info@@6B@ ; CParticleProperty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCParticleProperty@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CParticleProperty@@6B@
rdata$r	SEGMENT
??_R4CParticleProperty@@6B@ DD 00H			; CParticleProperty::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCParticleProperty@@@8
	DD	FLAT:??_R3CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CParticleProperty@@6B@
CONST	SEGMENT
??_7CParticleProperty@@6B@ DD FLAT:??_R4CParticleProperty@@6B@ ; CParticleProperty::`vftable'
	DD	FLAT:??_ECParticleProperty@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4160 :     auto _FirstPtr              = _To_address(_First);
; 4161 :     auto _LastPtr               = _To_address(_Last);
; 4162 :     auto _DestPtr               = _To_address(_Dest);
; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Oldsize$1$ = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>, COMDAT
; _this$ = ecx

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1164 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	53		 push	 ebx
  00009	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  0000c	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00010	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00014	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1164 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00016	89 5d 08	 mov	 DWORD PTR __Oldsize$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00019	2b c6		 sub	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1164 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0001b	29 55 08	 sub	 DWORD PTR __Oldsize$1$[ebp], edx
  0001e	c1 7d 08 03	 sar	 DWORD PTR __Oldsize$1$[ebp], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00022	c1 f8 03	 sar	 eax, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00025	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00028	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1166 :         if (_Newsize > _Oldsize) {

  0002b	3b 45 08	 cmp	 eax, DWORD PTR __Oldsize$1$[ebp]
  0002e	0f 86 3f 01 00
	00		 jbe	 $LN2@Assign_ran

; 1167 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	2b fa		 sub	 edi, edx
  00039	c1 ff 03	 sar	 edi, 3

; 1168 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003c	3b c7		 cmp	 eax, edi
  0003e	0f 86 e0 00 00
	00		 jbe	 $LN95@Assign_ran

; 1350 :         if (_Newsize > max_size()) {

  00044	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00049	0f 87 55 01 00
	00		 ja	 $LN99@Assign_ran

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b df		 mov	 ebx, edi
  00051	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00056	d1 eb		 shr	 ebx, 1
  00058	2b c3		 sub	 eax, ebx
  0005a	3b f8		 cmp	 edi, eax
  0005c	76 07		 jbe	 SHORT $LN13@Assign_ran

; 1689 :             return _Max; // geometric growth would overflow

  0005e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00063	eb 09		 jmp	 SHORT $LN14@Assign_ran
$LN13@Assign_ran:

; 1690 :         }
; 1691 : 
; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00065	03 df		 add	 ebx, edi

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

  00067	3b 5d f8	 cmp	 ebx, DWORD PTR __Newsize$1$[ebp]
  0006a	0f 42 5d f8	 cmovb	 ebx, DWORD PTR __Newsize$1$[ebp]
$LN14@Assign_ran:

; 1356 :         if (_Myfirst) { // destroy and deallocate old array

  0006e	85 d2		 test	 edx, edx
  00070	74 42		 je	 SHORT $LN10@Assign_ran
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00072	c1 e7 03	 shl	 edi, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00075	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0007b	72 16		 jb	 SHORT $LN32@Assign_ran

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0007d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00080	83 c7 23	 add	 edi, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00083	2b d1		 sub	 edx, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00085	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00088	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008b	0f 87 1d 01 00
	00		 ja	 $LN29@Assign_ran

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00091	8b d1		 mov	 edx, ecx
$LN32@Assign_ran:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00093	57		 push	 edi
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :             _Myfirst = nullptr;

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0009d	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :             _Myfirst = nullptr;

  000a0	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1361 :             _Mylast  = nullptr;

  000a6	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1362 :             _Myend   = nullptr;

  000ad	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN10@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000b4	81 fb ff ff ff
	1f		 cmp	 ebx, 536870911		; 1fffffffH
  000ba	0f 87 e9 00 00
	00		 ja	 $LN100@Assign_ran

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000c0	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c7	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  000cd	72 1f		 jb	 SHORT $LN45@Assign_ran

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cf	57		 push	 edi
  000d0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d8	8b d0		 mov	 edx, eax
  000da	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1170 :                 _Oldsize = 0;

  000dd	8b da		 mov	 ebx, edx

; 1712 :         _Myfirst           = _Newvec;

  000df	89 11		 mov	 DWORD PTR [ecx], edx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000e1	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  000e4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000e7	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1170 :                 _Oldsize = 0;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb 39		 jmp	 SHORT $LN4@Assign_ran
$LN45@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 243  :     if (_Bytes != 0) {

  000ee	85 ff		 test	 edi, edi
  000f0	74 1f		 je	 SHORT $LN46@Assign_ran

; 85   :         return ::operator new(_Bytes);

  000f2	57		 push	 edi
  000f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000fb	8b d0		 mov	 edx, eax

; 85   :         return ::operator new(_Bytes);

  000fd	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1170 :                 _Oldsize = 0;

  00100	8b da		 mov	 ebx, edx

; 1712 :         _Myfirst           = _Newvec;

  00102	89 11		 mov	 DWORD PTR [ecx], edx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  00104	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00107	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0010a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1170 :                 _Oldsize = 0;

  0010d	33 c0		 xor	 eax, eax
  0010f	eb 16		 jmp	 SHORT $LN4@Assign_ran
$LN46@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 247  :     return nullptr;

  00111	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1712 :         _Myfirst           = _Newvec;

  00113	89 11		 mov	 DWORD PTR [ecx], edx

; 1170 :                 _Oldsize = 0;

  00115	8b da		 mov	 ebx, edx

; 1713 :         _Mylast            = _Newvec;

  00117	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  0011a	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  0011d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1170 :                 _Oldsize = 0;

  00120	33 c0		 xor	 eax, eax
  00122	eb 03		 jmp	 SHORT $LN4@Assign_ran
$LN95@Assign_ran:

; 1168 :             if (_Newsize > _Oldcapacity) { // reallocate

  00124	8b 45 08	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
$LN4@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1561 :         _Where += _Off;

  00127	8d 3c c6	 lea	 edi, DWORD PTR [esi+eax*8]

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0012a	3b f7		 cmp	 esi, edi
  0012c	74 1b		 je	 SHORT $LN58@Assign_ran

; 1561 :         _Where += _Off;

  0012e	2b d6		 sub	 edx, esi
$LL85@Assign_ran:

; 4198 :         *_Dest = *_First;

  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00135	89 04 32	 mov	 DWORD PTR [edx+esi], eax
  00138	89 4c 32 04	 mov	 DWORD PTR [edx+esi+4], ecx
  0013c	83 c6 08	 add	 esi, 8
  0013f	3b f7		 cmp	 esi, edi
  00141	75 ed		 jne	 SHORT $LL85@Assign_ran
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00146	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
$LN58@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00149	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0014c	3b fa		 cmp	 edi, edx
  0014e	74 48		 je	 SHORT $LN76@Assign_ran
$LL66@Assign_ran:

; 1631 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00150	8b 07		 mov	 eax, DWORD PTR [edi]
  00152	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00155	83 c7 08	 add	 edi, 8

; 1631 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00158	89 03		 mov	 DWORD PTR [ebx], eax
  0015a	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 1632 :         ++_Last;

  0015d	83 c3 08	 add	 ebx, 8

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00160	3b fa		 cmp	 edi, edx
  00162	75 ec		 jne	 SHORT $LL66@Assign_ran
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1183 :     }

  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Assign_ran:

; 1171 :             }
; 1172 : 
; 1173 :             // performance note: traversing [_First, _Mid) twice
; 1174 :             const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1175 :             _Copy_unchecked(_First, _Mid, _Myfirst);
; 1176 :             _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1177 :         } else {
; 1178 :             const pointer _Newlast = _Myfirst + _Newsize;

  00173	8d 1c c2	 lea	 ebx, DWORD PTR [edx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00176	3b f7		 cmp	 esi, edi
  00178	74 1e		 je	 SHORT $LN76@Assign_ran
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL87@Assign_ran:

; 4198 :         *_Dest = *_First;

  00180	8b 06		 mov	 eax, DWORD PTR [esi]
  00182	8d 52 08	 lea	 edx, DWORD PTR [edx+8]
  00185	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00188	83 c6 08	 add	 esi, 8
  0018b	89 42 f8	 mov	 DWORD PTR [edx-8], eax
  0018e	89 4a fc	 mov	 DWORD PTR [edx-4], ecx
  00191	3b f7		 cmp	 esi, edi
  00193	75 eb		 jne	 SHORT $LL87@Assign_ran
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1183 :     }

  00195	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN76@Assign_ran:
  00198	5f		 pop	 edi
  00199	5e		 pop	 esi
  0019a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 0c 00	 ret	 12			; 0000000cH
$LN99@Assign_ran:

; 1351 :             _Xlength();

  001a4	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN100@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  001a9	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN29@Assign_ran:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Assign_ran:
  001b3	cc		 int	 3
??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Newsize$1$ = 8					; size = 4
__First$ = 8						; size = 4
__Newcapacity$1$ = 12					; size = 4
__Oldsize$1$ = 12					; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z PROC ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>, COMDAT
; _this$ = ecx

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00008	8b d1		 mov	 edx, ecx
  0000a	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00010	57		 push	 edi

; 1164 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00011	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00014	2b c6		 sub	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1164 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00018	89 7d 0c	 mov	 DWORD PTR __Oldsize$1$[ebp], edi
  0001b	29 4d 0c	 sub	 DWORD PTR __Oldsize$1$[ebp], ecx
  0001e	c1 7d 0c 03	 sar	 DWORD PTR __Oldsize$1$[ebp], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00022	c1 f8 03	 sar	 eax, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1138 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00025	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00028	89 45 08	 mov	 DWORD PTR __Newsize$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1166 :         if (_Newsize > _Oldsize) {

  0002b	3b 45 0c	 cmp	 eax, DWORD PTR __Oldsize$1$[ebp]
  0002e	0f 86 2c 01 00
	00		 jbe	 $LN2@Assign_ran

; 1167 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00034	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00037	2b d1		 sub	 edx, ecx
  00039	c1 fa 03	 sar	 edx, 3

; 1168 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003c	3b c2		 cmp	 eax, edx
  0003e	0f 86 c8 00 00
	00		 jbe	 $LN107@Assign_ran

; 1350 :         if (_Newsize > max_size()) {

  00044	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00049	0f 87 39 01 00
	00		 ja	 $LN110@Assign_ran

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b fa		 mov	 edi, edx
  00051	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00056	d1 ef		 shr	 edi, 1
  00058	2b c7		 sub	 eax, edi
  0005a	3b d0		 cmp	 edx, eax
  0005c	76 09		 jbe	 SHORT $LN13@Assign_ran

; 1689 :             return _Max; // geometric growth would overflow

  0005e	c7 45 0c ff ff
	ff 1f		 mov	 DWORD PTR __Newcapacity$1$[ebp], 536870911 ; 1fffffffH
  00065	eb 0c		 jmp	 SHORT $LN14@Assign_ran
$LN13@Assign_ran:

; 1690 :         }
; 1691 : 
; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00067	03 fa		 add	 edi, edx

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

  00069	3b 7d 08	 cmp	 edi, DWORD PTR __Newsize$1$[ebp]
  0006c	0f 42 7d 08	 cmovb	 edi, DWORD PTR __Newsize$1$[ebp]
  00070	89 7d 0c	 mov	 DWORD PTR __Newcapacity$1$[ebp], edi
$LN14@Assign_ran:

; 1356 :         if (_Myfirst) { // destroy and deallocate old array

  00073	85 c9		 test	 ecx, ecx
  00075	74 44		 je	 SHORT $LN106@Assign_ran
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00077	c1 e2 03	 shl	 edx, 3

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00080	72 16		 jb	 SHORT $LN32@Assign_ran

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00082	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  00085	83 c2 23	 add	 edx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00088	2b cf		 sub	 ecx, edi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008a	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0008d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00090	0f 87 f7 00 00
	00		 ja	 $LN29@Assign_ran

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00096	8b cf		 mov	 ecx, edi
$LN32@Assign_ran:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00098	52		 push	 edx
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :             _Myfirst = nullptr;

  0009f	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000a2	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :             _Myfirst = nullptr;

  000a5	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1361 :             _Mylast  = nullptr;

  000ab	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1362 :             _Myend   = nullptr;

  000b2	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000b9	eb 03		 jmp	 SHORT $LN10@Assign_ran
$LN106@Assign_ran:

; 1352 :         }
; 1353 : 
; 1354 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1355 : 
; 1356 :         if (_Myfirst) { // destroy and deallocate old array

  000bb	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN10@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  000be	8b 4d 0c	 mov	 ecx, DWORD PTR __Newcapacity$1$[ebp]
  000c1	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  000c7	0f 87 c5 00 00
	00		 ja	 $LN111@Assign_ran

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  000cd	c1 e1 03	 shl	 ecx, 3

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d6	72 0d		 jb	 SHORT $LN45@Assign_ran

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000de	83 c4 04	 add	 esp, 4
  000e1	8b c8		 mov	 ecx, eax
  000e3	eb 13		 jmp	 SHORT $LN44@Assign_ran
$LN45@Assign_ran:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000e5	85 c9		 test	 ecx, ecx
  000e7	74 0d		 je	 SHORT $LN46@Assign_ran

; 85   :         return ::operator new(_Bytes);

  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ef	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000f2	8b c8		 mov	 ecx, eax
  000f4	eb 02		 jmp	 SHORT $LN44@Assign_ran
$LN46@Assign_ran:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000f6	33 c9		 xor	 ecx, ecx
$LN44@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000f8	8b 45 0c	 mov	 eax, DWORD PTR __Newcapacity$1$[ebp]
  000fb	89 0f		 mov	 DWORD PTR [edi], ecx
  000fd	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00100	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00103	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1169 :                 _Clear_and_reserve_geometric(_Newsize);
; 1170 :                 _Oldsize = 0;

  00106	33 c0		 xor	 eax, eax
  00108	8b f9		 mov	 edi, ecx
  0010a	eb 03		 jmp	 SHORT $LN4@Assign_ran
$LN107@Assign_ran:

; 1168 :             if (_Newsize > _Oldcapacity) { // reallocate

  0010c	8b 45 0c	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
$LN4@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1561 :         _Where += _Off;

  0010f	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00112	3b f2		 cmp	 esi, edx
  00114	74 1d		 je	 SHORT $LN105@Assign_ran

; 1561 :         _Where += _Off;

  00116	2b ce		 sub	 ecx, esi
$LL59@Assign_ran:
  00118	8b 06		 mov	 eax, DWORD PTR [esi]
  0011a	89 04 31	 mov	 DWORD PTR [ecx+esi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  0011d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00120	89 44 31 04	 mov	 DWORD PTR [ecx+esi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00124	83 c6 08	 add	 esi, 8
  00127	3b f2		 cmp	 esi, edx
  00129	75 ed		 jne	 SHORT $LL59@Assign_ran
  0012b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0012e	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00131	eb 03		 jmp	 SHORT $LN58@Assign_ran
$LN105@Assign_ran:
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN58@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00136	3b d3		 cmp	 edx, ebx
  00138	74 1a		 je	 SHORT $LN69@Assign_ran
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL70@Assign_ran:
  00140	8b 02		 mov	 eax, DWORD PTR [edx]
  00142	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 137  : 		: m_dwColor(r.m_dwColor)

  00144	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00147	83 c2 08	 add	 edx, 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 137  : 		: m_dwColor(r.m_dwColor)

  0014a	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1632 :         ++_Last;

  0014d	83 c7 08	 add	 edi, 8

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00150	3b d3		 cmp	 edx, ebx
  00152	75 ec		 jne	 SHORT $LL70@Assign_ran
$LN69@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1176 :             _Mylast = _Ucopy(_Mid, _Last, _Mylast);

  00154	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00157	5f		 pop	 edi

; 1183 :     }

  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Assign_ran:

; 1177 :         } else {
; 1178 :             const pointer _Newlast = _Myfirst + _Newsize;

  00160	8d 3c c1	 lea	 edi, DWORD PTR [ecx+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00163	3b f3		 cmp	 esi, ebx
  00165	74 15		 je	 SHORT $LN86@Assign_ran
$LL87@Assign_ran:
  00167	8b 06		 mov	 eax, DWORD PTR [esi]
  00169	8d 49 08	 lea	 ecx, DWORD PTR [ecx+8]
  0016c	89 41 f8	 mov	 DWORD PTR [ecx-8], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  0016f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00172	83 c6 08	 add	 esi, 8
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  00175	89 41 fc	 mov	 DWORD PTR [ecx-4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 4197 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00178	3b f3		 cmp	 esi, ebx
  0017a	75 eb		 jne	 SHORT $LL87@Assign_ran
$LN86@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1181 :             _Mylast = _Newlast;

  0017c	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0017f	5f		 pop	 edi

; 1183 :     }

  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 0c 00	 ret	 12			; 0000000cH
$LN110@Assign_ran:

; 1351 :             _Xlength();

  00188	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
$LN29@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN111@Assign_ran:

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00192	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN108@Assign_ran:
  00197	cc		 int	 3
??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();
; 768  :         auto& _My_data    = _Mypair._Myval2;
; 769  :         pointer& _Myfirst = _My_data._Myfirst;
; 770  :         pointer& _Mylast  = _My_data._Mylast;
; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1689 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 85   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 790  :         _Constructed_first = _Newvec + _Whereoff;
; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 794  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1725 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1746 :             _Destroy(_Myfirst, _Mylast);
; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1751 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1752 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);
; 801  :         _Al.deallocate(_Newvec, _Newcapacity);
; 802  :         _RERAISE;
; 803  :         _CATCH_END
; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 806  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 807  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 778  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCParticleProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCParticleProperty@@UAEPAXI@Z PROC			; CParticleProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CParticleProperty@@UAE@XZ ; CParticleProperty::~CParticleProperty
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 88 00 00 00	 push	 136			; 00000088H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCParticleProperty@@UAEPAXI@Z ENDP			; CParticleProperty::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??4CParticleProperty@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
__First$1$ = 8						; size = 4
$T1 = 8							; size = 1
$T2 = 8							; size = 1
$T3 = 8							; size = 1
$T4 = 8							; size = 1
$T5 = 8							; size = 1
$T6 = 8							; size = 1
_c_ParticleProperty$ = 8				; size = 4
??4CParticleProperty@@QAEAAV0@ABV0@@Z PROC		; CParticleProperty::operator=, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 82   : 	m_byTexAniType = c_ParticleProperty.m_byTexAniType;

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c_ParticleProperty$[ebp]

; 83   : 	m_fTexAniDelay = c_ParticleProperty.m_fTexAniDelay;
; 84   : 	m_bTexAniRandomStartFrameFlag = c_ParticleProperty.m_bTexAniRandomStartFrameFlag;
; 85   : 
; 86   : 	m_bySrcBlendType = c_ParticleProperty.m_bySrcBlendType;
; 87   : 	m_byDestBlendType = c_ParticleProperty.m_byDestBlendType;
; 88   : 	m_byColorOperationType = c_ParticleProperty.m_byColorOperationType;
; 89   : 
; 90   : 	m_byBillboardType = c_ParticleProperty.m_byBillboardType;
; 91   : 
; 92   : 	m_byRotationType = c_ParticleProperty.m_byRotationType;
; 93   : 	m_fRotationSpeed = c_ParticleProperty.m_fRotationSpeed;
; 94   : 	m_wRotationRandomStartingBegin = c_ParticleProperty.m_wRotationRandomStartingBegin;
; 95   : 	m_wRotationRandomStartingEnd = c_ParticleProperty.m_wRotationRandomStartingEnd;
; 96   : 
; 97   : 	m_bAttachFlag = c_ParticleProperty.m_bAttachFlag;
; 98   : 	m_bStretchFlag = c_ParticleProperty.m_bStretchFlag;
; 99   : 
; 100  : 	m_TimeEventGravity = c_ParticleProperty.m_TimeEventGravity;

  0000a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0000d	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00011	88 46 04	 mov	 BYTE PTR [esi+4], al
  00014	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00017	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00020	0f b6 47 10	 movzx	 eax, BYTE PTR [edi+16]
  00024	88 46 10	 mov	 BYTE PTR [esi+16], al
  00027	0f b6 47 11	 movzx	 eax, BYTE PTR [edi+17]
  0002b	88 46 11	 mov	 BYTE PTR [esi+17], al
  0002e	0f b6 47 12	 movzx	 eax, BYTE PTR [edi+18]
  00032	88 46 12	 mov	 BYTE PTR [esi+18], al
  00035	0f b6 47 13	 movzx	 eax, BYTE PTR [edi+19]
  00039	88 46 13	 mov	 BYTE PTR [esi+19], al
  0003c	0f b6 47 14	 movzx	 eax, BYTE PTR [edi+20]
  00040	88 46 14	 mov	 BYTE PTR [esi+20], al
  00043	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00046	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00049	0f b7 47 1c	 movzx	 eax, WORD PTR [edi+28]
  0004d	66 89 46 1c	 mov	 WORD PTR [esi+28], ax
  00051	0f b7 47 1e	 movzx	 eax, WORD PTR [edi+30]
  00055	66 89 46 1e	 mov	 WORD PTR [esi+30], ax
  00059	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0005c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0005f	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00062	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00065	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  00068	3b c8		 cmp	 ecx, eax
  0006a	74 0d		 je	 SHORT $LN4@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0006c	ff 75 08	 push	 DWORD PTR $T6[ebp]
  0006f	ff 70 04	 push	 DWORD PTR [eax+4]
  00072	ff 30		 push	 DWORD PTR [eax]
  00074	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
$LN4@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 101  : 	m_TimeEventAirResistance = c_ParticleProperty.m_TimeEventAirResistance;

  00079	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  0007c	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  0007f	3b c8		 cmp	 ecx, eax
  00081	74 0d		 je	 SHORT $LN11@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00083	ff 75 08	 push	 DWORD PTR $T5[ebp]
  00086	ff 70 04	 push	 DWORD PTR [eax+4]
  00089	ff 30		 push	 DWORD PTR [eax]
  0008b	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
$LN11@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 103  : 	m_TimeEventScaleX = c_ParticleProperty.m_TimeEventScaleX;

  00090	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00093	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  00096	3b c8		 cmp	 ecx, eax
  00098	74 0d		 je	 SHORT $LN18@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0009a	ff 75 08	 push	 DWORD PTR $T4[ebp]
  0009d	ff 70 04	 push	 DWORD PTR [eax+4]
  000a0	ff 30		 push	 DWORD PTR [eax]
  000a2	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
$LN18@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 104  : 	m_TimeEventScaleY = c_ParticleProperty.m_TimeEventScaleY;

  000a7	8d 47 4c	 lea	 eax, DWORD PTR [edi+76]
  000aa	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  000ad	3b c8		 cmp	 ecx, eax
  000af	74 0d		 je	 SHORT $LN25@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000b1	ff 75 08	 push	 DWORD PTR $T3[ebp]
  000b4	ff 70 04	 push	 DWORD PTR [eax+4]
  000b7	ff 30		 push	 DWORD PTR [eax]
  000b9	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
$LN25@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 114  : 	m_TimeEventColor = c_ParticleProperty.m_TimeEventColor;

  000be	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  000c1	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  000c4	3b c8		 cmp	 ecx, eax
  000c6	74 0d		 je	 SHORT $LN32@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000c8	ff 75 08	 push	 DWORD PTR $T2[ebp]
  000cb	ff 70 04	 push	 DWORD PTR [eax+4]
  000ce	ff 30		 push	 DWORD PTR [eax]
  000d0	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
$LN32@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 116  : 	m_TimeEventRotation = c_ParticleProperty.m_TimeEventRotation;

  000d5	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  000d8	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  000db	3b c8		 cmp	 ecx, eax
  000dd	74 0d		 je	 SHORT $LN39@operator

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000df	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000e2	ff 70 04	 push	 DWORD PTR [eax+4]
  000e5	ff 30		 push	 DWORD PTR [eax]
  000e7	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXPAV?$CTimeEvent@M@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Assign_range<CTimeEvent<float> *>
$LN39@operator:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 118  : 	m_ImageVector = c_ParticleProperty.m_ImageVector;

  000ec	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  000ef	8d 7e 70	 lea	 edi, DWORD PTR [esi+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1215 :         if (this != _STD addressof(_Right)) {

  000f2	3b f8		 cmp	 edi, eax
  000f4	74 39		 je	 SHORT $LN74@operator

; 1155 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000f6	8b 17		 mov	 edx, DWORD PTR [edi]

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000f8	53		 push	 ebx
  000f9	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  000fc	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000fe	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  00100	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1189 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00102	89 45 08	 mov	 DWORD PTR __First$1$[ebp], eax

; 1155 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00105	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00108	2b c2		 sub	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  0010a	c1 f9 02	 sar	 ecx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1155 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0010d	c1 f8 02	 sar	 eax, 2

; 1156 :                 if (_Newsize > _Oldcapacity) {

  00110	3b c8		 cmp	 ecx, eax
  00112	76 0a		 jbe	 SHORT $LN53@operator

; 1157 :                     _Clear_and_reserve_geometric(_Newsize);

  00114	51		 push	 ecx
  00115	8b cf		 mov	 ecx, edi
  00117	e8 00 00 00 00	 call	 ?_Clear_and_reserve_geometric@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Clear_and_reserve_geometric
  0011c	8b 17		 mov	 edx, DWORD PTR [edi]
$LN53@operator:

; 1158 :                 }
; 1159 : 
; 1160 :                 _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));

  0011e	52		 push	 edx
  0011f	53		 push	 ebx
  00120	ff 75 08	 push	 DWORD PTR __First$1$[ebp]
  00123	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 120  : 	return *this;

  0012e	5b		 pop	 ebx
$LN74@operator:

; 121  : }

  0012f	5f		 pop	 edi
  00130	8b c6		 mov	 eax, esi
  00132	5e		 pop	 esi
  00133	5d		 pop	 ebp
  00134	c2 04 00	 ret	 4
??4CParticleProperty@@QAEAAV0@ABV0@@Z ENDP		; CParticleProperty::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Clear_and_reserve_geometric@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Clear_and_reserve_geometric@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Clear_and_reserve_geometric, COMDAT
; _this$ = ecx

; 1339 :     _CONSTEXPR20_CONTAINER void _Clear_and_reserve_geometric(const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1340 :         auto& _My_data    = _Mypair._Myval2;
; 1341 :         pointer& _Myfirst = _My_data._Myfirst;
; 1342 :         pointer& _Mylast  = _My_data._Mylast;
; 1343 :         pointer& _Myend   = _My_data._Myend;
; 1344 : 
; 1345 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1346 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1347 :         _Check_all_orphaned();
; 1348 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1349 : 
; 1350 :         if (_Newsize > max_size()) {

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00011	0f 87 c8 00 00
	00		 ja	 $LN46@Clear_and_

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00017	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001a	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
  00023	c1 fa 02	 sar	 edx, 2

; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00026	8b fa		 mov	 edi, edx
  00028	d1 ef		 shr	 edi, 1
  0002a	2b c7		 sub	 eax, edi
  0002c	3b d0		 cmp	 edx, eax
  0002e	76 07		 jbe	 SHORT $LN6@Clear_and_

; 1689 :             return _Max; // geometric growth would overflow

  00030	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00035	eb 07		 jmp	 SHORT $LN7@Clear_and_
$LN6@Clear_and_:

; 1690 :         }
; 1691 : 
; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00037	03 fa		 add	 edi, edx

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

  00039	3b fb		 cmp	 edi, ebx
  0003b	0f 42 fb	 cmovb	 edi, ebx
$LN7@Clear_and_:

; 1352 :         }
; 1353 : 
; 1354 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1355 : 
; 1356 :         if (_Myfirst) { // destroy and deallocate old array

  0003e	85 c9		 test	 ecx, ecx
  00040	74 3f		 je	 SHORT $LN3@Clear_and_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	c1 e2 02	 shl	 edx, 2

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00045	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0004b	72 16		 jb	 SHORT $LN25@Clear_and_

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004d	8b 59 fc	 mov	 ebx, DWORD PTR [ecx-4]
  00050	83 c2 23	 add	 edx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00053	2b cb		 sub	 ecx, ebx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00055	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00058	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005b	0f 87 88 00 00
	00		 ja	 $LN22@Clear_and_

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00061	8b cb		 mov	 ecx, ebx
$LN25@Clear_and_:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00063	52		 push	 edx
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :             _Myfirst = nullptr;

  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1361 :             _Mylast  = nullptr;

  00073	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1362 :             _Myend   = nullptr;

  0007a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@Clear_and_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 64   :         if (_Count > _Max_possible) {

  00081	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00087	77 5b		 ja	 SHORT $LN47@Clear_and_

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00089	c1 e7 02	 shl	 edi, 2

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008c	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00092	72 1a		 jb	 SHORT $LN38@Clear_and_

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009a	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1712 :         _Myfirst           = _Newvec;

  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 1713 :         _Mylast            = _Newvec;

  0009f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000a2	03 c7		 add	 eax, edi
  000a4	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 1366 :     }

  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN38@Clear_and_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 243  :     if (_Bytes != 0) {

  000ae	85 ff		 test	 edi, edi
  000b0	74 1a		 je	 SHORT $LN39@Clear_and_

; 85   :         return ::operator new(_Bytes);

  000b2	57		 push	 edi
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b8	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1712 :         _Myfirst           = _Newvec;

  000bb	89 06		 mov	 DWORD PTR [esi], eax

; 1713 :         _Mylast            = _Newvec;

  000bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000c0	03 c7		 add	 eax, edi
  000c2	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx

; 1366 :     }

  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN39@Clear_and_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 247  :     return nullptr;

  000cc	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1712 :         _Myfirst           = _Newvec;

  000ce	89 06		 mov	 DWORD PTR [esi], eax

; 1713 :         _Mylast            = _Newvec;

  000d0	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  000d3	8b c7		 mov	 eax, edi
  000d5	5f		 pop	 edi
  000d6	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx

; 1366 :     }

  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN46@Clear_and_:

; 1351 :             _Xlength();

  000df	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
$LN47@Clear_and_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  000e4	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN22@Clear_and_:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN44@Clear_and_:
  000ee	cc		 int	 3
?_Clear_and_reserve_geometric@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Clear_and_reserve_geometric
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength, COMDAT

; 1774 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?SetTexture@CParticleProperty@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetTexture@CParticleProperty@@QAE_NPBD@Z PROC		; CParticleProperty::SetTexture, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00006	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00009	2b c2		 sub	 eax, edx
  0000b	c1 f8 02	 sar	 eax, 2
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 17   : 	if (m_ImageVector.size() > 1)

  0000e	83 f8 01	 cmp	 eax, 1
  00011	76 06		 jbe	 SHORT $LN2@SetTexture

; 18   : 	{
; 19   : 		assert(false);
; 20   : 		return false;

  00013	32 c0		 xor	 al, al

; 28   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@SetTexture:

; 21   : 	}
; 22   : 	m_ImageVector.clear();
; 23   : #ifdef WORLD_EDITOR
; 24   : 	m_TextureNameVector.clear();
; 25   : #endif
; 26   : 	InsertTexture(c_szFileName);

  00019	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001c	89 51 74	 mov	 DWORD PTR [ecx+116], edx
  0001f	e8 00 00 00 00	 call	 ?InsertTexture@CParticleProperty@@QAEXPBD@Z ; CParticleProperty::InsertTexture

; 27   : 	return true;

  00024	b0 01		 mov	 al, 1

; 28   : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetTexture@CParticleProperty@@QAE_NPBD@Z ENDP		; CParticleProperty::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?InsertTexture@CParticleProperty@@QAEXPBD@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
_c_szFileName$ = 8					; size = 4
?InsertTexture@CParticleProperty@@QAEXPBD@Z PROC	; CParticleProperty::InsertTexture, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 7    : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00004	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0000f	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  00014	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 9    : 	m_ImageVector.push_back(pImage);

  00017	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  0001a	89 45 08	 mov	 DWORD PTR _pImage$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 743  :         if (_Mylast != _My_data._Myend) {

  0001d	5e		 pop	 esi
  0001e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00021	74 0a		 je	 SHORT $LN6@InsertText

; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00023	89 02		 mov	 DWORD PTR [edx], eax

; 727  :         _Orphan_range(_Mylast, _Mylast);
; 728  :         _Ty& _Result = *_Mylast;
; 729  :         ++_Mylast;

  00025	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 13   : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN6@InsertText:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002d	8d 45 08	 lea	 eax, DWORD PTR _pImage$[ebp]
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 13   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?InsertTexture@CParticleProperty@@QAEXPBD@Z ENDP	; CParticleProperty::InsertTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?Clear@CParticleProperty@@QAEXXZ
_TEXT	SEGMENT
?Clear@CParticleProperty@@QAEXXZ PROC			; CParticleProperty::Clear, COMDAT
; _this$ = ecx

; 32   : 	m_byRotationType = 0;
; 33   : 	m_fRotationSpeed = 0.0f;
; 34   : 	m_wRotationRandomStartingBegin = 0;

  00000	33 c0		 xor	 eax, eax

; 35   : 	m_wRotationRandomStartingEnd = 0;
; 36   : 
; 37   : 	m_bAttachFlag = FALSE;
; 38   : 	m_bStretchFlag = FALSE;
; 39   : 
; 40   : 	m_bySrcBlendType = D3DBLEND_SRCALPHA;
; 41   : 	m_byDestBlendType = D3DBLEND_ONE;
; 42   : 	m_byColorOperationType = D3DTOP_MODULATE;
; 43   : 
; 44   : 	m_byBillboardType = BILLBOARD_TYPE_NONE;

  00002	66 c7 41 13 00
	00		 mov	 WORD PTR [ecx+19], 0
  00008	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0000b	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0000e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 45   : 
; 46   : 	m_byTexAniType = TEXTURE_ANIMATION_TYPE_NONE;

  00011	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 47   : 	m_fTexAniDelay = 0.05f;
; 48   : 	m_bTexAniRandomStartFrameFlag = FALSE;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 49   : 
; 50   : 	//m_fGravity = 0.0f;
; 51   : 	//m_fAirResistance = 0.0f;
; 52   : 
; 53   : 	m_TimeEventGravity.clear();

  00017	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0001a	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 54   : 	m_TimeEventAirResistance.clear();

  0001d	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00020	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 55   : 
; 56   : 	m_TimeEventScaleX.clear();

  00023	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00026	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 57   : 	m_TimeEventScaleY.clear();

  00029	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  0002c	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 58   : 	//m_TimeEventScaleXY.clear();
; 59   : #ifdef WORLD_EDITOR
; 60   : 	m_TimeEventColorRed.clear();
; 61   : 	m_TimeEventColorGreen.clear();
; 62   : 	m_TimeEventColorBlue.clear();
; 63   : 	m_TimeEventAlpha.clear();
; 64   : 	m_TextureNameVector.clear();
; 65   : #else
; 66   : 	m_TimeEventColor.clear();

  0002f	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00032	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 67   : #endif
; 68   : 	m_TimeEventRotation.clear();

  00035	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00038	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 69   : 
; 70   : 	m_ImageVector.clear();

  0003b	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0003e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00045	66 c7 41 10 05
	02		 mov	 WORD PTR [ecx+16], 517	; 00000205H
  0004b	c6 41 12 04	 mov	 BYTE PTR [ecx+18], 4
  0004f	c7 41 08 cd cc
	4c 3d		 mov	 DWORD PTR [ecx+8], 1028443341 ; 3d4ccccdH
  00056	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 71   : }

  00059	c3		 ret	 0
?Clear@CParticleProperty@@QAEXXZ ENDP			; CParticleProperty::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??1CParticleProperty@@UAE@XZ
_TEXT	SEGMENT
??1CParticleProperty@@UAE@XZ PROC			; CParticleProperty::~CParticleProperty, COMDAT
; _this$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleProperty@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0000c	85 c0		 test	 eax, eax
  0000e	74 45		 je	 SHORT $LN6@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 16		 jb	 SHORT $LN22@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	0f 87 e3 01 00
	00		 ja	 $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00034	8b c2		 mov	 eax, edx
$LN22@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00036	51		 push	 ecx
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0003d	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00044	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00047	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1769 :             _Myend   = nullptr;

  0004e	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
$LN6@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00055	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00058	85 c0		 test	 eax, eax
  0005a	74 45		 je	 SHORT $LN31@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0005f	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00061	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00064	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0006a	72 16		 jb	 SHORT $LN47@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006f	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00072	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00074	83 c0 fc	 add	 eax, -4			; fffffffcH
  00077	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0007a	0f 87 97 01 00
	00		 ja	 $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00080	8b c2		 mov	 eax, edx
$LN47@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00082	51		 push	 ecx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00089	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00090	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00093	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1769 :             _Myend   = nullptr;

  0009a	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
$LN31@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  000a1	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000a4	85 c0		 test	 eax, eax
  000a6	74 45		 je	 SHORT $LN55@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000a8	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  000ab	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ad	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b6	72 16		 jb	 SHORT $LN71@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bb	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000be	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c6	0f 87 4b 01 00
	00		 ja	 $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000cc	8b c2		 mov	 eax, edx
$LN71@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000ce	51		 push	 ecx
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  000d5	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  000dc	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  000df	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1769 :             _Myend   = nullptr;

  000e6	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN55@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  000ed	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000f0	85 c0		 test	 eax, eax
  000f2	74 45		 je	 SHORT $LN79@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f4	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  000f7	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000fc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00102	72 16		 jb	 SHORT $LN95@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00104	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00107	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0010a	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00112	0f 87 ff 00 00
	00		 ja	 $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00118	8b c2		 mov	 eax, edx
$LN95@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0011a	51		 push	 ecx
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  00121	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00128	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  0012b	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 1769 :             _Myend   = nullptr;

  00132	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN79@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00139	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0013c	85 c0		 test	 eax, eax
  0013e	74 45		 je	 SHORT $LN103@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00140	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00143	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00145	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00148	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014e	72 16		 jb	 SHORT $LN119@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00150	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00153	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00156	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00158	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015e	0f 87 b3 00 00
	00		 ja	 $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00164	8b c2		 mov	 eax, edx
$LN119@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00166	51		 push	 ecx
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  0016d	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00174	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00177	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 1769 :             _Myend   = nullptr;

  0017e	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN103@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00185	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00188	85 c0		 test	 eax, eax
  0018a	74 41		 je	 SHORT $LN127@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0018c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0018f	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00191	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	72 12		 jb	 SHORT $LN143@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0019f	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a2	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a4	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001aa	77 6b		 ja	 SHORT $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ac	8b c2		 mov	 eax, edx
$LN143@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001ae	51		 push	 ecx
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  001b5	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  001bc	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  001bf	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 1769 :             _Myend   = nullptr;

  001c6	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN127@CParticleP:

; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  001cd	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  001d0	85 c0		 test	 eax, eax
  001d2	74 41		 je	 SHORT $LN151@CParticleP

; 1764 :             _Destroy(_Myfirst, _Mylast);
; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001d4	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  001d7	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e2	72 12		 jb	 SHORT $LN167@CParticleP

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001e7	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001ea	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ec	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f2	77 23		 ja	 SHORT $LN164@CParticleP

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001f4	8b c2		 mov	 eax, edx
$LN167@CParticleP:

; 264  :         ::operator delete(_Ptr, _Bytes);

  001f6	51		 push	 ecx
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1767 :             _Myfirst = nullptr;

  001fd	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00204	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 1768 :             _Mylast  = nullptr;

  00207	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1769 :             _Myend   = nullptr;

  0020e	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN151@CParticleP:
  00215	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 78   : }

  00216	c3		 ret	 0
$LN164@CParticleP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00217	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN172@CParticleP:
  0021c	cc		 int	 3
??1CParticleProperty@@UAE@XZ ENDP			; CParticleProperty::~CParticleProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??0CParticleProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CParticleProperty@@QAE@XZ PROC			; CParticleProperty::CParticleProperty, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CParticleProperty@@6B@

; 75   : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00013	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0001a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00021	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00028	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0002f	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00036	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  0003d	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00044	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  0004b	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00052	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00059	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  00060	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
  00067	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0
  0006e	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0
  00075	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0
  0007c	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0
  00083	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 74   : {

  0008a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008d	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  00094	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
  0009b	c7 41 78 00 00
	00 00		 mov	 DWORD PTR [ecx+120], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\EffectLib\ParticleProperty.cpp

; 75   : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
??0CParticleProperty@@QAE@XZ ENDP			; CParticleProperty::CParticleProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
