; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\Distribute\PythonLauncher.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_nCurTraceN@@3HA				; g_nCurTraceN
_BSS	SEGMENT
?g_nCurTraceN@@3HA DD 01H DUP (?)			; g_nCurTraceN
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ	; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>
PUBLIC	??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z	; CSingleton<CPythonLauncher>::`scalar deleting destructor'
PUBLIC	??0CPythonLauncher@@QAE@XZ			; CPythonLauncher::CPythonLauncher
PUBLIC	??1CPythonLauncher@@UAE@XZ			; CPythonLauncher::~CPythonLauncher
PUBLIC	?Clear@CPythonLauncher@@QAEXXZ			; CPythonLauncher::Clear
PUBLIC	?Create@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::Create
PUBLIC	?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z ; CPythonLauncher::SetTraceFunc
PUBLIC	?RunLine@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::RunLine
PUBLIC	?RunFile@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::RunFile
PUBLIC	?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ; CPythonLauncher::RunMemoryTextFile
PUBLIC	?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z	; CPythonLauncher::RunCompiledFile
PUBLIC	?GetError@CPythonLauncher@@QAEPBDXZ		; CPythonLauncher::GetError
PUBLIC	??_GCPythonLauncher@@UAEPAXI@Z			; CPythonLauncher::`scalar deleting destructor'
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Traceback@@YAXXZ				; Traceback
PUBLIC	?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z	; TraceFunc
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A ; CSingleton<CPythonLauncher>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonLauncher@@@@6B@	; CSingleton<CPythonLauncher>::`vftable'
PUBLIC	??_7CPythonLauncher@@6B@			; CPythonLauncher::`vftable'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CSingleton@VCPythonLauncher@@@@6B@	; CSingleton<CPythonLauncher>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8	; CSingleton<CPythonLauncher> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonLauncher@@@@8		; CSingleton<CPythonLauncher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonLauncher@@@@8		; CSingleton<CPythonLauncher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_07KAJBENLI@Error?3?5@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@	; `string'
PUBLIC	??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@ ; `string'
PUBLIC	??_C@_08EMKMIFM@__main__@			; `string'
PUBLIC	??_C@_0M@EILMOIBE@__builtin__@			; `string'
PUBLIC	??_C@_04HCDDPBNL@TRUE@				; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__@			; `string'
PUBLIC	??_C@_0BA@FOEJKCPF@import?5__main__@		; `string'
PUBLIC	??_C@_0L@GOKNMPOF@import?5sys@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@ ; `string'
PUBLIC	??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@ ; `string'
PUBLIC	??_C@_0BB@MNBENCCN@exec?$CIcompile?$CI?8?8?8@	; `string'
PUBLIC	??_C@_05LOEDJEGH@?8?8?8?0?5@			; `string'
PUBLIC	??_C@_01GEODFPGF@?8@				; `string'
PUBLIC	??_C@_03EHINCMEC@?8?0?5@			; `string'
PUBLIC	??_C@_08HAHONCNP@?8exec?8?$CJ?$CJ@		; `string'
PUBLIC	??_R4CPythonLauncher@@6B@			; CPythonLauncher::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonLauncher@@@8			; CPythonLauncher `RTTI Type Descriptor'
PUBLIC	??_R3CPythonLauncher@@8				; CPythonLauncher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonLauncher@@8				; CPythonLauncher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonLauncher@@8		; CPythonLauncher::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?LogBoxf@@YAXPBDZZ:PROC				; LogBoxf
EXTRN	__imp__PyString_AsString:PROC
EXTRN	__imp__PyDict_SetItemString:PROC
EXTRN	__imp__PyModule_GetDict:PROC
EXTRN	__imp__PyErr_SetString:PROC
EXTRN	__imp__PyErr_Clear:PROC
EXTRN	__imp__PyErr_Fetch:PROC
EXTRN	__imp__PyModule_AddIntConstant:PROC
EXTRN	__imp__Py_SetProgramName:PROC
EXTRN	__imp__Py_Initialize:PROC
EXTRN	__imp__Py_Finalize:PROC
EXTRN	__imp__PyRun_StringFlags:PROC
EXTRN	__imp__PyEval_SetTrace:PROC
EXTRN	__imp__Py_FlushLine:PROC
EXTRN	__imp__PyImport_GetMagicNumber:PROC
EXTRN	__imp__PyImport_AddModule:PROC
EXTRN	__imp__PyImport_ImportModule:PROC
EXTRN	__imp__PyObject_AsCharBuffer:PROC
EXTRN	__imp__PyCode_Addr2Line:PROC
EXTRN	__imp__PyEval_EvalCode:PROC
EXTRN	?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z:PROC ; PyTuple_GetObject
EXTRN	??_E?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonLauncher>::`vector deleting destructor'
EXTRN	??_ECPythonLauncher@@UAEPAXI@Z:PROC		; CPythonLauncher::`vector deleting destructor'
EXTRN	?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z:PROC ; _PyMarshal_ReadLastObjectFromFile
EXTRN	?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z:PROC ; _PyMarshal_ReadLongFromFile
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp__Py_OptimizeFlag:DWORD
EXTRN	__imp__PyExc_RuntimeError:DWORD
EXTRN	__imp__PyCode_Type:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A DD 01H DUP (?) ; CSingleton<CPythonLauncher>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 03000H DUP (?) ; g_stTraceBuffer
_BSS	ENDS
CRT$XCU	SEGMENT
?g_stTraceBuffer$initializer$@@3P6AXXZA DD FLAT:??__Eg_stTraceBuffer@@YAXXZ ; g_stTraceBuffer$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonLauncher@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonLauncher@@8 DD FLAT:??_R0?AVCPythonLauncher@@@8 ; CPythonLauncher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonLauncher@@8
rdata$r	SEGMENT
??_R2CPythonLauncher@@8 DD FLAT:??_R1A@?0A@EA@CPythonLauncher@@8 ; CPythonLauncher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonLauncher@@8
rdata$r	SEGMENT
??_R3CPythonLauncher@@8 DD 00H				; CPythonLauncher::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonLauncher@@@8
data$rs	SEGMENT
??_R0?AVCPythonLauncher@@@8 DD FLAT:??_7type_info@@6B@	; CPythonLauncher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonLauncher@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPythonLauncher@@6B@
rdata$r	SEGMENT
??_R4CPythonLauncher@@6B@ DD 00H			; CPythonLauncher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonLauncher@@@8
	DD	FLAT:??_R3CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_C@_08HAHONCNP@?8exec?8?$CJ?$CJ@
CONST	SEGMENT
??_C@_08HAHONCNP@?8exec?8?$CJ?$CJ@ DB '''exec''))', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHINCMEC@?8?0?5@
CONST	SEGMENT
??_C@_03EHINCMEC@?8?0?5@ DB ''', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8@
CONST	SEGMENT
??_C@_01GEODFPGF@?8@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOEDJEGH@?8?8?8?0?5@
CONST	SEGMENT
??_C@_05LOEDJEGH@?8?8?8?0?5@ DB ''''''', ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MNBENCCN@exec?$CIcompile?$CI?8?8?8@
CONST	SEGMENT
??_C@_0BB@MNBENCCN@exec?$CIcompile?$CI?8?8?8@ DB 'exec(compile(''''''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@
CONST	SEGMENT
??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@ DB 'Bad code objec'
	DB	't in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@
CONST	SEGMENT
??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@ DB 'Bad magic num'
	DB	'ber in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GOKNMPOF@import?5sys@
CONST	SEGMENT
??_C@_0L@GOKNMPOF@import?5sys@ DB 'import sys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOEJKCPF@import?5__main__@
CONST	SEGMENT
??_C@_0BA@FOEJKCPF@import?5__main__@ DB 'import __main__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__@ DB '__builtins__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCDDPBNL@TRUE@
CONST	SEGMENT
??_C@_04HCDDPBNL@TRUE@ DB 'TRUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EILMOIBE@__builtin__@
CONST	SEGMENT
??_C@_0M@EILMOIBE@__builtin__@ DB '__builtin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__@ DB '__main__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@
CONST	SEGMENT
??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@ DB 'E'
	DB	'xception: File "%s", line %d, in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@
CONST	SEGMENT
??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@ DB 'C'
	DB	'all: File "%s", line %d, in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@
CONST	SEGMENT
??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@ DB 'Traceback:', 0aH, 0aH, '%s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5@
CONST	SEGMENT
??_C@_07KAJBENLI@Error?3?5@ DB 'Error: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonLauncher@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonLauncher@@@@8 DD 00H		; CSingleton<CPythonLauncher>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonLauncher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonLauncher@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonLauncher@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonLauncher@@@@6B@ DD 00H	; CSingleton<CPythonLauncher>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7CPythonLauncher@@6B@
CONST	SEGMENT
??_7CPythonLauncher@@6B@ DD FLAT:??_R4CPythonLauncher@@6B@ ; CPythonLauncher::`vftable'
	DD	FLAT:??_ECPythonLauncher@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonLauncher@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonLauncher@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonLauncher@@@@6B@ ; CSingleton<CPythonLauncher>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Traceback@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Traceback@@YAXXZ$0
__ehfuncinfo$?Traceback@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Traceback@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z$0
__ehfuncinfo$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunFile@CPythonLauncher@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunFile@CPythonLauncher@@QAE_NPBD@Z$0
__ehfuncinfo$?RunFile@CPythonLauncher@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunFile@CPythonLauncher@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z
_TEXT	SEGMENT
_exc_str$1 = -152					; size = 4
_len$2 = -148						; size = 4
_exc_traceback$3 = -144					; size = 4
_exc_value$4 = -140					; size = 4
_exc_type$5 = -136					; size = 4
_szTraceBuffer$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_f$ = 12						; size = 4
_what$ = 16						; size = 4
_arg$ = 20						; size = 4
?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z PROC		; TraceFunc, COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 58   : 	const char * funcname;
; 59   : 	char szTraceBuffer[128];
; 60   : 
; 61   : 	switch (what)

  00013	8b 45 10	 mov	 eax, DWORD PTR _what$[ebp]
  00016	56		 push	 esi
  00017	8b 75 14	 mov	 esi, DWORD PTR _arg$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _f$[ebp]
  0001e	83 e8 00	 sub	 eax, 0
  00021	0f 84 b9 00 00
	00		 je	 $LN4@TraceFunc
  00027	83 e8 01	 sub	 eax, 1
  0002a	74 2e		 je	 SHORT $LN9@TraceFunc
  0002c	83 e8 02	 sub	 eax, 2
  0002f	0f 85 30 01 00
	00		 jne	 $LN18@TraceFunc

; 73   : 					  PyString_AsString(f->f_code->co_filename),
; 74   : 					  f->f_lineno,
; 75   : 					  funcname);
; 76   : 
; 77   : 			g_stTraceBuffer[g_nCurTraceN++]=szTraceBuffer;
; 78   : 			break;
; 79   : 
; 80   : 		case PyTrace_RETURN:
; 81   : 			if (g_nCurTraceN > 0)

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  0003a	85 c0		 test	 eax, eax
  0003c	0f 8e 23 01 00
	00		 jle	 $LN18@TraceFunc

; 82   : 				--g_nCurTraceN;

  00042	48		 dec	 eax
  00043	5f		 pop	 edi
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?g_nCurTraceN@@3HA, eax ; g_nCurTraceN

; 100  : 					  PyString_AS_STRING(f->f_code->co_filename),
; 101  : 					  f->f_lineno,
; 102  : 					  PyString_AS_STRING(f->f_code->co_name));
; 103  : 
; 104  : 			g_stTraceBuffer[g_nCurTraceN++]=szTraceBuffer;
; 105  : 
; 106  : 			break;
; 107  : 	}
; 108  : 	return 0;
; 109  : }

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004f	33 cd		 xor	 ecx, ebp
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN9@TraceFunc:

; 83   : 			break;
; 84   : 
; 85   : 		case PyTrace_EXCEPTION:
; 86   : 			if (g_nCurTraceN >= 512)

  0005a	81 3d 00 00 00
	00 00 02 00 00	 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, 512 ; g_nCurTraceN, 00000200H
  00064	0f 8d fb 00 00
	00		 jge	 $LN18@TraceFunc

; 87   : 				return 0;
; 88   : 
; 89   : 			PyObject * exc_type, * exc_value, * exc_traceback;
; 90   : 
; 91   : 			PyTuple_GetObject(arg, 0, &exc_type);

  0006a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _exc_type$5[ebp]
  00070	50		 push	 eax
  00071	6a 00		 push	 0
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 92   : 			PyTuple_GetObject(arg, 1, &exc_value);

  00079	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _exc_value$4[ebp]
  0007f	50		 push	 eax
  00080	6a 01		 push	 1
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 93   : 			PyTuple_GetObject(arg, 2, &exc_traceback);

  00088	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _exc_traceback$3[ebp]
  0008e	50		 push	 eax
  0008f	6a 02		 push	 2
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 94   : 
; 95   : 			int len;
; 96   : 			const char * exc_str;
; 97   : 			PyObject_AsCharBuffer(exc_type, &exc_str, &len);

  00097	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _len$2[ebp]
  0009d	50		 push	 eax
  0009e	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _exc_str$1[ebp]
  000a4	50		 push	 eax
  000a5	ff b5 78 ff ff
	ff		 push	 DWORD PTR _exc_type$5[ebp]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_AsCharBuffer

; 98   : 
; 99   : 			_snprintf(szTraceBuffer, sizeof(szTraceBuffer), "Exception: File \"%s\", line %d, in %s",

  000b1	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000b4	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000b7	83 c0 14	 add	 eax, 20			; 00000014H
  000ba	50		 push	 eax
  000bb	ff 77 40	 push	 DWORD PTR [edi+64]
  000be	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000c1	83 c0 14	 add	 eax, 20			; 00000014H
  000c4	50		 push	 eax
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@
  000ca	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  000d0	68 80 00 00 00	 push	 128			; 00000080H
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 __snprintf
  000db	83 c4 48	 add	 esp, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3092 :         return assign(_Ptr);

  000de	eb 62		 jmp	 SHORT $LN20@TraceFunc
$LN4@TraceFunc:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 64   : 			if (g_nCurTraceN >= 512)

  000e0	81 3d 00 00 00
	00 00 02 00 00	 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, 512 ; g_nCurTraceN, 00000200H
  000ea	7d 79		 jge	 SHORT $LN18@TraceFunc

; 65   : 				return 0;
; 66   : 
; 67   : 			if (Py_OptimizeFlag)

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__Py_OptimizeFlag
  000f1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000f4	74 12		 je	 SHORT $LN6@TraceFunc

; 68   : 				f->f_lineno = PyCode_Addr2Line(f->f_code, f->f_lasti);

  000f6	ff 77 3c	 push	 DWORD PTR [edi+60]
  000f9	ff 77 10	 push	 DWORD PTR [edi+16]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCode_Addr2Line
  00102	83 c4 08	 add	 esp, 8
  00105	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN6@TraceFunc:

; 69   : 
; 70   : 			funcname = PyString_AsString(f->f_code->co_name);

  00108	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0010b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyString_AsString
  00111	ff 70 34	 push	 DWORD PTR [eax+52]
  00114	ff d6		 call	 esi
  00116	83 c4 04	 add	 esp, 4

; 71   : 
; 72   : 			_snprintf(szTraceBuffer, sizeof(szTraceBuffer), "Call: File \"%s\", line %d, in %s",

  00119	50		 push	 eax
  0011a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0011d	ff 77 40	 push	 DWORD PTR [edi+64]
  00120	ff 70 30	 push	 DWORD PTR [eax+48]
  00123	ff d6		 call	 esi
  00125	83 c4 04	 add	 esp, 4
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@
  0012e	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  00134	68 80 00 00 00	 push	 128			; 00000080H
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 __snprintf
  0013f	83 c4 18	 add	 esp, 24			; 00000018H
$LN20@TraceFunc:

; 100  : 					  PyString_AS_STRING(f->f_code->co_filename),
; 101  : 					  f->f_lineno,
; 102  : 					  PyString_AS_STRING(f->f_code->co_name));
; 103  : 
; 104  : 			g_stTraceBuffer[g_nCurTraceN++]=szTraceBuffer;
; 105  : 
; 106  : 			break;
; 107  : 	}
; 108  : 	return 0;
; 109  : }

  00142	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  00148	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0014b	42		 inc	 edx
  0014c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
  00153	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nCurTraceN@@3HA, edx ; g_nCurTraceN
  00159	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN18@TraceFunc:
  00165	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00168	33 c0		 xor	 eax, eax
  0016a	5f		 pop	 edi
  0016b	33 cd		 xor	 ecx, ebp
  0016d	5e		 pop	 esi
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z ENDP		; TraceFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Traceback@@YAXXZ
_TEXT	SEGMENT
_tb$ = -52						; size = 4
_exc$ = -48						; size = 4
_v$ = -44						; size = 4
_str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Traceback@@YAXXZ PROC					; Traceback, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Traceback@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _str$[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  00031	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _str$[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00038	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _str$[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003f	c6 45 d8 00	 mov	 BYTE PTR _str$[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 29   : 	for (int i = 0; i < g_nCurTraceN; ++i)

  00043	33 ff		 xor	 edi, edi
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, edi ; g_nCurTraceN
  00052	7e 3d		 jle	 SHORT $LN3@Traceback
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4596 :         _My_data._Mysize = 0;

  00054	be 00 00 00 00	 mov	 esi, OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Traceback:

; 2319 :         return _BUF_SIZE <= _Myres;

  00060	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00064	8b c6		 mov	 eax, esi

; 2306 :         if (_Large_string_engaged()) {

  00066	72 02		 jb	 SHORT $LN39@Traceback

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
$LN39@Traceback:

; 3124 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006a	ff 76 10	 push	 DWORD PTR [esi+16]
  0006d	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00076	6a 01		 push	 1
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0007d	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00080	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 29   : 	for (int i = 0; i < g_nCurTraceN; ++i)

  00085	47		 inc	 edi
  00086	83 c6 18	 add	 esi, 24			; 00000018H
  00089	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  0008f	7c cf		 jl	 SHORT $LL4@Traceback
$LN3@Traceback:

; 30   : 	{
; 31   : 		str.append(g_stTraceBuffer[i]);
; 32   : 		str.append("\n");
; 33   : 	}
; 34   : 
; 35   : 	PyObject * exc;
; 36   : 	PyObject * v;
; 37   : 	PyObject * tb;
; 38   : 	const char * errStr;
; 39   : 
; 40   : 	PyErr_Fetch(&exc, &v, &tb);

  00091	8d 45 cc	 lea	 eax, DWORD PTR _tb$[ebp]
  00094	50		 push	 eax
  00095	8d 45 d4	 lea	 eax, DWORD PTR _v$[ebp]
  00098	50		 push	 eax
  00099	8d 45 d0	 lea	 eax, DWORD PTR _exc$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Fetch

; 41   : 
; 42   : 	if (PyString_Check(v))

  000a3	8b 4d d4	 mov	 ecx, DWORD PTR _v$[ebp]
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	f7 40 54 00 00
	00 08		 test	 DWORD PTR [eax+84], 134217728 ; 08000000H
  000b3	74 3c		 je	 SHORT $LN7@Traceback
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b5	6a 07		 push	 7
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 44   : 		errStr = PyString_AS_STRING(v);

  000b7	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_07KAJBENLI@Error?3?5@
  000bf	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  000c2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c7	8b ce		 mov	 ecx, esi
  000c9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000cc	0f 1f 40 00	 npad	 4
$LL94@Traceback:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL94@Traceback
  000d7	2b ca		 sub	 ecx, edx

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d9	51		 push	 ecx
  000da	56		 push	 esi
  000db	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  000de	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 48   : 		Tracef("%s\n", errStr);

  000e3	56		 push	 esi
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  000e9	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000ee	83 c4 08	 add	 esp, 8
$LN7@Traceback:

; 49   : 	}
; 50   : 	Py_DECREF(exc);

  000f1	8b 45 d0	 mov	 eax, DWORD PTR _exc$[ebp]
  000f4	83 00 ff	 add	 DWORD PTR [eax], -1
  000f7	8b 4d d0	 mov	 ecx, DWORD PTR _exc$[ebp]
  000fa	75 0c		 jne	 SHORT $LN5@Traceback
  000fc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ff	51		 push	 ecx
  00100	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00103	ff d0		 call	 eax
  00105	83 c4 04	 add	 esp, 4
$LN5@Traceback:

; 51   : 	Py_DECREF(v);

  00108	8b 45 d4	 mov	 eax, DWORD PTR _v$[ebp]
  0010b	83 00 ff	 add	 DWORD PTR [eax], -1
  0010e	8b 4d d4	 mov	 ecx, DWORD PTR _v$[ebp]
  00111	75 0c		 jne	 SHORT $LN8@Traceback
  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	51		 push	 ecx
  00117	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0011a	ff d0		 call	 eax
  0011c	83 c4 04	 add	 esp, 4
$LN8@Traceback:

; 52   : 	Py_DECREF(tb);

  0011f	8b 45 cc	 mov	 eax, DWORD PTR _tb$[ebp]
  00122	83 00 ff	 add	 DWORD PTR [eax], -1
  00125	8b 4d cc	 mov	 ecx, DWORD PTR _tb$[ebp]
  00128	75 0c		 jne	 SHORT $LN11@Traceback
  0012a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0012d	51		 push	 ecx
  0012e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00131	ff d0		 call	 eax
  00133	83 c4 04	 add	 esp, 4
$LN11@Traceback:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00136	83 7d ec 10	 cmp	 DWORD PTR _str$[ebp+20], 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  0013a	8d 45 d8	 lea	 eax, DWORD PTR _str$[ebp]

; 2306 :         if (_Large_string_engaged()) {

  0013d	0f 43 45 d8	 cmovae	 eax, DWORD PTR _str$[ebp]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 53   : 	LogBoxf("Traceback:\n\n%s\n", str.c_str());

  00141	50		 push	 eax
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@
  00147	e8 00 00 00 00	 call	 ?LogBoxf@@YAXPBDZZ	; LogBoxf
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0014c	8b 55 ec	 mov	 edx, DWORD PTR _str$[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 53   : 	LogBoxf("Traceback:\n\n%s\n", str.c_str());

  0014f	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00152	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00155	72 28		 jb	 SHORT $LN74@Traceback
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00157	8b 4d d8	 mov	 ecx, DWORD PTR _str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0015a	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015b	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0015d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00163	72 10		 jb	 SHORT $LN84@Traceback

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00165	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00168	83 c2 23	 add	 edx, 35			; 00000023H
  0016b	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00170	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00173	77 25		 ja	 SHORT $LN98@Traceback
$LN84@Traceback:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00175	52		 push	 edx
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017c	83 c4 08	 add	 esp, 8
$LN74@Traceback:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 54   : }

  0017f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00182	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00189	59		 pop	 ecx
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018f	33 cd		 xor	 ecx, ebp
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
$LN98@Traceback:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Traceback:
  0019f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Traceback@@YAXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Traceback@@YAXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Traceback@@YAXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Traceback@@YAXXZ ENDP					; Traceback
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_stTraceBuffer@@YAXXZ
text$yd	SEGMENT
??__Fg_stTraceBuffer@@YAXXZ PROC			; `dynamic atexit destructor for 'g_stTraceBuffer'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	68 00 02 00 00	 push	 512			; 00000200H
  0000a	6a 18		 push	 24			; 00000018H
  0000c	68 00 00 00 00	 push	 OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00016	c3		 ret	 0
??__Fg_stTraceBuffer@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_stTraceBuffer''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??__Eg_stTraceBuffer@@YAXXZ
text$di	SEGMENT
??__Eg_stTraceBuffer@@YAXXZ PROC			; `dynamic initializer for 'g_stTraceBuffer'', COMDAT

; 22   : std::string g_stTraceBuffer[512];

  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	68 00 00 00 00	 push	 OFFSET ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000a	68 00 02 00 00	 push	 512			; 00000200H
  0000f	6a 18		 push	 24			; 00000018H
  00011	68 00 00 00 00	 push	 OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__Fg_stTraceBuffer@@YAXXZ ; `dynamic atexit destructor for 'g_stTraceBuffer''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__Eg_stTraceBuffer@@YAXXZ ENDP			; `dynamic initializer for 'g_stTraceBuffer''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonLauncher@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonLauncher@@UAEPAXI@Z PROC			; CPythonLauncher::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonLauncher@@UAE@XZ ; CPythonLauncher::~CPythonLauncher
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPythonLauncher@@UAEPAXI@Z ENDP			; CPythonLauncher::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?GetError@CPythonLauncher@@QAEPBDXZ
_TEXT	SEGMENT
_exc$ = -12						; size = 4
_tb$ = -8						; size = 4
_v$ = -4						; size = 4
?GetError@CPythonLauncher@@QAEPBDXZ PROC		; CPythonLauncher::GetError, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 272  : 	PyObject* exc;
; 273  : 	PyObject* v;
; 274  : 	PyObject* tb;
; 275  : 
; 276  : 	PyErr_Fetch(&exc, &v, &tb);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _tb$[ebp]
  00009	50		 push	 eax
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _v$[ebp]
  0000d	50		 push	 eax
  0000e	8d 45 f4	 lea	 eax, DWORD PTR _exc$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Fetch

; 277  : 
; 278  : 	if (PyString_Check(v))

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00021	f7 40 54 00 00
	00 08		 test	 DWORD PTR [eax+84], 134217728 ; 08000000H

; 279  : 		return PyString_AS_STRING(v);

  00028	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0002b	75 05		 jne	 SHORT $LN1@GetError

; 280  : 
; 281  : 	return "";

  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN1@GetError:

; 282  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GetError@CPythonLauncher@@QAEPBDXZ ENDP		; CPythonLauncher::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z PROC	; CPythonLauncher::RunCompiledFile, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 148  : 	NANOBEGIN

  0000a	eb		 DB	 -21			; ffffffebH
  0000b	03		 DB	 3
  0000c	d6		 DB	 -42			; ffffffd6H
  0000d	d7		 DB	 -41			; ffffffd7H
  0000e	01		 DB	 1
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00014	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00017	e8 00 00 00 00	 call	 _fopen
  0001c	8b f8		 mov	 edi, eax
  0001e	83 c4 08	 add	 esp, 8

; 149  : 	FILE * fp = fopen(c_szFileName, "rb");
; 150  : 
; 151  : 	if (!fp)

  00021	85 ff		 test	 edi, edi
  00023	0f 84 f2 00 00
	00		 je	 $LN30@RunCompile

; 152  : 		return false;
; 153  : 
; 154  : 	PyCodeObject *co;
; 155  : 	PyObject *v;
; 156  : 	long magic;
; 157  : 	long PyImport_GetMagicNumber(void);
; 158  : 
; 159  : 	magic = _PyMarshal_ReadLongFromFile(fp);

  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z ; _PyMarshal_ReadLongFromFile
  0002f	83 c4 04	 add	 esp, 4
  00032	8b f0		 mov	 esi, eax

; 160  : 
; 161  : 	if (magic != PyImport_GetMagicNumber())

  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_GetMagicNumber
  0003a	3b f0		 cmp	 esi, eax
  0003c	74 26		 je	 SHORT $LN15@RunCompile

; 162  : 	{
; 163  : 		PyErr_SetString(PyExc_RuntimeError, "Bad magic number in .pyc file");

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@
  00048	ff 30		 push	 DWORD PTR [eax]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString

; 164  : 		fclose(fp);

  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 _fclose
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 196  : 	return true;
; 197  : }

  00059	32 c0		 xor	 al, al
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN15@RunCompile:

; 165  : 		return false;
; 166  : 	}
; 167  : 
; 168  : 	_PyMarshal_ReadLongFromFile(fp);

  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z ; _PyMarshal_ReadLongFromFile

; 169  : 	v = _PyMarshal_ReadLastObjectFromFile(fp);

  0006a	57		 push	 edi
  0006b	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ; _PyMarshal_ReadLastObjectFromFile

; 170  : 
; 171  : 	fclose(fp);

  00070	57		 push	 edi
  00071	8b f0		 mov	 esi, eax
  00073	e8 00 00 00 00	 call	 _fclose
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : 
; 173  : 	if (!v || !PyCode_Check(v))

  0007b	85 f6		 test	 esi, esi
  0007d	0f 84 83 00 00
	00		 je	 $LN6@RunCompile
  00083	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00086	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR __imp__PyCode_Type
  0008c	75 6a		 jne	 SHORT $LN4@RunCompile

; 177  : 		return false;
; 178  : 	}
; 179  : 
; 180  : 	co = (PyCodeObject *) v;
; 181  : 	v = PyEval_EvalCode(co, m_poDic, m_poDic);

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00091	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00094	50		 push	 eax
  00095	50		 push	 eax
  00096	56		 push	 esi
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_EvalCode
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	8b f8		 mov	 edi, eax

; 182  : /*	if (v && flags)
; 183  : 		flags->cf_flags |= (co->co_flags & PyCF_MASK);*/
; 184  : 	Py_DECREF(co);

  000a2	83 06 ff	 add	 DWORD PTR [esi], -1
  000a5	75 0c		 jne	 SHORT $LN8@RunCompile
  000a7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000aa	56		 push	 esi
  000ab	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000ae	ff d1		 call	 ecx
  000b0	83 c4 04	 add	 esp, 4
$LN8@RunCompile:

; 185  : 	if (!v)

  000b3	85 ff		 test	 edi, edi
  000b5	75 10		 jne	 SHORT $LN13@RunCompile

; 186  : 	{
; 187  : 		Traceback();

  000b7	e8 00 00 00 00	 call	 ?Traceback@@YAXXZ	; Traceback

; 196  : 	return true;
; 197  : }

  000bc	32 c0		 xor	 al, al
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
$LN13@RunCompile:

; 188  : 		return false;
; 189  : 	}
; 190  : 
; 191  : 	Py_DECREF(v);

  000c7	83 07 ff	 add	 DWORD PTR [edi], -1
  000ca	75 0c		 jne	 SHORT $LN11@RunCompile
  000cc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000cf	57		 push	 edi
  000d0	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000d3	ff d0		 call	 eax
  000d5	83 c4 04	 add	 esp, 4
$LN11@RunCompile:

; 192  : 	if (Py_FlushLine())

  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_FlushLine
  000de	85 c0		 test	 eax, eax
  000e0	74 06		 je	 SHORT $LN27@RunCompile

; 193  : 		PyErr_Clear();

  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN27@RunCompile:

; 194  : 
; 195  : 	NANOEND

  000e8	eb		 DB	 -21			; ffffffebH
  000e9	03		 DB	 3
  000ea	d6		 DB	 -42			; ffffffd6H
  000eb	d7		 DB	 -41			; ffffffd7H
  000ec	00		 DB	 0
  000ed	b0 01		 mov	 al, 1

; 196  : 	return true;
; 197  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN4@RunCompile:

; 174  : 	{
; 175  : 		Py_XDECREF(v);

  000f8	83 06 ff	 add	 DWORD PTR [esi], -1
  000fb	75 09		 jne	 SHORT $LN6@RunCompile
  000fd	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00100	56		 push	 esi
  00101	ff d0		 call	 eax
  00103	83 c4 04	 add	 esp, 4
$LN6@RunCompile:

; 176  : 		PyErr_SetString(PyExc_RuntimeError, "Bad code object in .pyc file");

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@
  00110	ff 30		 push	 DWORD PTR [eax]
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  00118	83 c4 08	 add	 esp, 8
$LN30@RunCompile:

; 196  : 	return true;
; 197  : }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	32 c0		 xor	 al, al
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z ENDP	; CPythonLauncher::RunCompiledFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
_TEXT	SEGMENT
_this$1$ = -56						; size = 4
_i$1$ = -52						; size = 4
__Old_capacity$1$ = -48					; size = 4
__Result$2$ = -48					; size = 4
__Ch$1$ = -41						; size = 1
_stConvFileData$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_uFileSize$ = 12					; size = 4
_c_pvFileData$ = 16					; size = 4
?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z PROC	; CPythonLauncher::RunMemoryTextFile, COMDAT
; _this$ = ecx

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d c8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 202  : 	NANOBEGIN

  0002e	eb		 DB	 -21			; ffffffebH
  0002f	03		 DB	 3
  00030	d6		 DB	 -42			; ffffffd6H
  00031	d7		 DB	 -41			; ffffffd7H
  00032	01		 DB	 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00033	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _stConvFileData$[ebp], 0

; 4596 :         _My_data._Mysize = 0;

  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stConvFileData$[ebp+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00041	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stConvFileData$[ebp+20], 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00048	c6 45 d8 00	 mov	 BYTE PTR _stConvFileData$[ebp], 0
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 206  : 	stConvFileData.reserve(uFileSize);

  0004c	ff 75 0c	 push	 DWORD PTR _uFileSize$[ebp]
  0004f	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005e	6a 10		 push	 16			; 00000010H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MNBENCCN@exec?$CIcompile?$CI?8?8?8@
  00065	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  00068	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 211  : 		for (UINT i=0; i<uFileSize; ++i)

  0006d	33 c9		 xor	 ecx, ecx
  0006f	89 4d cc	 mov	 DWORD PTR _i$1$[ebp], ecx
  00072	39 4d 0c	 cmp	 DWORD PTR _uFileSize$[ebp], ecx
  00075	0f 86 2f 01 00
	00		 jbe	 $LN156@RunMemoryT
  0007b	8b 45 10	 mov	 eax, DWORD PTR _c_pvFileData$[ebp]
  0007e	66 90		 npad	 2
$LL4@RunMemoryT:

; 212  : 		{
; 213  : 			if (c_pcFileData[i]!=13)

  00080	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00083	88 55 d7	 mov	 BYTE PTR __Ch$1$[ebp], dl
  00086	80 fa 0d	 cmp	 dl, 13			; 0000000dH
  00089	0f 84 0e 01 00
	00		 je	 $LN2@RunMemoryT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3862 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0008f	8b 7d ec	 mov	 edi, DWORD PTR _stConvFileData$[ebp+20]
  00092	8b 5d e8	 mov	 ebx, DWORD PTR _stConvFileData$[ebp+16]
  00095	89 7d d0	 mov	 DWORD PTR __Old_capacity$1$[ebp], edi
  00098	3b df		 cmp	 ebx, edi

; 3863 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0009a	73 1d		 jae	 SHORT $LN30@RunMemoryT

; 3864 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  0009c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]

; 2319 :         return _BUF_SIZE <= _Myres;

  0009f	83 ff 10	 cmp	 edi, 16			; 00000010H

; 3864 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  000a2	89 45 e8	 mov	 DWORD PTR _stConvFileData$[ebp+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  000a5	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]

; 2297 :         if (_Large_string_engaged()) {

  000a8	0f 43 45 d8	 cmovae	 eax, DWORD PTR _stConvFileData$[ebp]

; 3866 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  000ac	88 14 18	 mov	 BYTE PTR [eax+ebx], dl

; 3867 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  000af	c6 44 18 01 00	 mov	 BYTE PTR [eax+ebx+1], 0

; 3868 :             return;

  000b4	e9 e1 00 00 00	 jmp	 $LN160@RunMemoryT
$LN30@RunMemoryT:

; 4542 :         const size_type _Old_size = _My_data._Mysize;

  000b9	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000be	2b c3		 sub	 eax, ebx

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  000c0	83 f8 01	 cmp	 eax, 1
  000c3	0f 82 ad 01 00
	00		 jb	 $LN152@RunMemoryT

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  000c9	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000cc	83 ce 0f	 or	 esi, 15			; 0000000fH
  000cf	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000d5	76 07		 jbe	 SHORT $LN45@RunMemoryT

; 4490 :             return _Max;

  000d7	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000dc	eb 1e		 jmp	 SHORT $LN44@RunMemoryT
$LN45@RunMemoryT:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000de	8b cf		 mov	 ecx, edi
  000e0	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000e5	d1 e9		 shr	 ecx, 1
  000e7	2b c1		 sub	 eax, ecx
  000e9	3b f8		 cmp	 edi, eax
  000eb	76 07		 jbe	 SHORT $LN46@RunMemoryT

; 4494 :             return _Max;

  000ed	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000f2	eb 08		 jmp	 SHORT $LN44@RunMemoryT
$LN46@RunMemoryT:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000f4	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000f7	3b f0		 cmp	 esi, eax
  000f9	0f 42 f0	 cmovb	 esi, eax
$LN44@RunMemoryT:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000fc	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ff	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00104	72 0d		 jb	 SHORT $LN53@RunMemoryT

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0010c	83 c4 04	 add	 esp, 4
  0010f	8b f8		 mov	 edi, eax
  00111	eb 13		 jmp	 SHORT $LN52@RunMemoryT
$LN53@RunMemoryT:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00113	85 c0		 test	 eax, eax
  00115	74 0d		 je	 SHORT $LN54@RunMemoryT

; 85   :         return ::operator new(_Bytes);

  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0011d	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  00120	8b f8		 mov	 edi, eax
  00122	eb 02		 jmp	 SHORT $LN52@RunMemoryT
$LN54@RunMemoryT:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00124	33 ff		 xor	 edi, edi
$LN52@RunMemoryT:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  00126	83 7d d0 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  0012a	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0012d	89 45 e8	 mov	 DWORD PTR _stConvFileData$[ebp+16], eax
  00130	89 75 ec	 mov	 DWORD PTR _stConvFileData$[ebp+20], esi
  00133	53		 push	 ebx
  00134	72 46		 jb	 SHORT $LN39@RunMemoryT

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00136	8b 75 d8	 mov	 esi, DWORD PTR _stConvFileData$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00139	56		 push	 esi
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 _memcpy

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00140	8b 4d d0	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00143	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3875 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00146	8a 45 d7	 mov	 al, BYTE PTR __Ch$1$[ebp]

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00149	41		 inc	 ecx

; 3875 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0014a	88 04 3b	 mov	 BYTE PTR [ebx+edi], al

; 3876 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0014d	c6 44 3b 01 00	 mov	 BYTE PTR [ebx+edi+1], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00152	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00158	72 16		 jb	 SHORT $LN76@RunMemoryT

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0015a	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0015d	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00160	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00162	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00165	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00168	0f 87 03 01 00
	00		 ja	 $LN143@RunMemoryT

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0016e	8b f2		 mov	 esi, edx
$LN76@RunMemoryT:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00170	51		 push	 ecx
  00171	56		 push	 esi
  00172	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00177	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4567 :         } else {

  0017a	eb 18		 jmp	 SHORT $LN161@RunMemoryT
$LN39@RunMemoryT:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]
  0017f	50		 push	 eax
  00180	57		 push	 edi
  00181	e8 00 00 00 00	 call	 _memcpy

; 3875 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00186	8a 45 d7	 mov	 al, BYTE PTR __Ch$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00189	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3875 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0018c	88 04 3b	 mov	 BYTE PTR [ebx+edi], al

; 3876 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0018f	c6 44 3b 01 00	 mov	 BYTE PTR [ebx+edi+1], 0
$LN161@RunMemoryT:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 211  : 		for (UINT i=0; i<uFileSize; ++i)

  00194	8b 4d cc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00197	89 7d d8	 mov	 DWORD PTR _stConvFileData$[ebp], edi
$LN160@RunMemoryT:
  0019a	8b 45 10	 mov	 eax, DWORD PTR _c_pvFileData$[ebp]
$LN2@RunMemoryT:
  0019d	41		 inc	 ecx
  0019e	89 4d cc	 mov	 DWORD PTR _i$1$[ebp], ecx
  001a1	3b 4d 0c	 cmp	 ecx, DWORD PTR _uFileSize$[ebp]
  001a4	0f 82 d6 fe ff
	ff		 jb	 $LL4@RunMemoryT
$LN156@RunMemoryT:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001aa	6a 05		 push	 5
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_05LOEDJEGH@?8?8?8?0?5@
  001b1	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  001b4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  001b9	6a 01		 push	 1
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_01GEODFPGF@?8@
  001c0	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  001c3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  001c8	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  001cb	8b ca		 mov	 ecx, edx
  001cd	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL157@RunMemoryT:
  001d0	8a 01		 mov	 al, BYTE PTR [ecx]
  001d2	41		 inc	 ecx
  001d3	84 c0		 test	 al, al
  001d5	75 f9		 jne	 SHORT $LL157@RunMemoryT
  001d7	2b ce		 sub	 ecx, esi

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001d9	51		 push	 ecx
  001da	52		 push	 edx
  001db	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  001de	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  001e3	6a 03		 push	 3
  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_03EHINCMEC@?8?0?5@
  001ea	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  001ed	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  001f2	6a 08		 push	 8
  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_08HAHONCNP@?8exec?8?$CJ?$CJ@
  001f9	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  001fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2319 :         return _BUF_SIZE <= _Myres;

  00201	83 7d ec 10	 cmp	 DWORD PTR _stConvFileData$[ebp+20], 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00205	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]

; 2306 :         if (_Large_string_engaged()) {

  00208	0f 43 45 d8	 cmovae	 eax, DWORD PTR _stConvFileData$[ebp]
  0020c	89 45 d0	 mov	 DWORD PTR __Result$2$[ebp], eax
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 225  : 	NANOEND

  0020f	eb		 DB	 -21			; ffffffebH
  00210	03		 DB	 3
  00211	d6		 DB	 -42			; ffffffd6H
  00212	d7		 DB	 -41			; ffffffd7H
  00213	00		 DB	 0
  00214	8b 4d c8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00217	ff 75 d0	 push	 DWORD PTR __Result$2$[ebp]
  0021a	e8 00 00 00 00	 call	 ?RunLine@CPythonLauncher@@QAE_NPBD@Z ; CPythonLauncher::RunLine
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  0021f	8b 55 ec	 mov	 edx, DWORD PTR _stConvFileData$[ebp+20]
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 225  : 	NANOEND

  00222	8a d8		 mov	 bl, al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00224	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00227	72 28		 jb	 SHORT $LN136@RunMemoryT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00229	8b 4d d8	 mov	 ecx, DWORD PTR _stConvFileData$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0022c	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022d	8b c1		 mov	 eax, ecx

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0022f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00235	72 10		 jb	 SHORT $LN146@RunMemoryT

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00237	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0023a	83 c2 23	 add	 edx, 35			; 00000023H
  0023d	2b c1		 sub	 eax, ecx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0023f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00242	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00245	77 2a		 ja	 SHORT $LN143@RunMemoryT
$LN146@RunMemoryT:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00247	52		 push	 edx
  00248	51		 push	 ecx
  00249	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0024e	83 c4 08	 add	 esp, 8
$LN136@RunMemoryT:
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 225  : 	NANOEND

  00251	8a c3		 mov	 al, bl

; 227  : }

  00253	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00256	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025d	59		 pop	 ecx
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx
  00261	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00264	33 cd		 xor	 ecx, ebp
  00266	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c2 0c 00	 ret	 12			; 0000000cH
$LN143@RunMemoryT:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00271	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN152@RunMemoryT:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4544 :             _Xlen_string(); // result too long

  00276	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN159@RunMemoryT:
  0027b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ENDP	; CPythonLauncher::RunMemoryTextFile
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunFile@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -348					; size = 4
_pvData$2 = -344					; size = 4
_file$3 = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?RunFile@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::RunFile, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunFile@CPythonLauncher@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d a4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]

; 231  : 	char* acBufData=NULL;
; 232  : 	DWORD dwBufSize=0;
; 233  : 
; 234  : 	{
; 235  : 		CMappedFile file;

  00037	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  0003d	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 236  : 		const VOID* pvData;
; 237  : 		CEterPackManager::Instance().Get(file, c_szFileName, &pvData);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00048	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$2[ebp]
  0004e	50		 push	 eax
  0004f	53		 push	 ebx
  00050	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$3[ebp]
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get

; 238  : 
; 239  : 		dwBufSize=file.Size();

  00063	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  00069	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0006e	8b f8		 mov	 edi, eax

; 240  : 		if (dwBufSize==0)

  00070	85 ff		 test	 edi, edi
  00072	75 0f		 jne	 SHORT $LN2@RunFile

; 241  : 			return false;

  00074	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0007f	32 c0		 xor	 al, al
  00081	eb 45		 jmp	 SHORT $LN1@RunFile
$LN2@RunFile:

; 242  : 
; 243  : 		acBufData=new char[dwBufSize];

  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 244  : 		memcpy(acBufData, pvData, dwBufSize);

  00089	57		 push	 edi
  0008a	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _pvData$2[ebp]
  00090	8b f0		 mov	 esi, eax
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 _memcpy
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 245  : 	}

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  000a8	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile

; 246  : 
; 247  : 	bool ret=false;
; 248  : 
; 249  : 	ret=RunMemoryTextFile(c_szFileName, dwBufSize, acBufData);

  000ad	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000b3	56		 push	 esi
  000b4	57		 push	 edi
  000b5	53		 push	 ebx
  000b6	e8 00 00 00 00	 call	 ?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ; CPythonLauncher::RunMemoryTextFile

; 250  : 
; 251  : 	delete [] acBufData;

  000bb	56		 push	 esi
  000bc	8a d8		 mov	 bl, al
  000be	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000c3	83 c4 04	 add	 esp, 4

; 252  : 
; 253  : 	return ret;

  000c6	8a c3		 mov	 al, bl
$LN1@RunFile:

; 254  : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunFile@CPythonLauncher@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RunFile@CPythonLauncher@@QAE_NPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunFile@CPythonLauncher@@QAE_NPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunFile@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::RunFile
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunLine@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szSrc$ = 8						; size = 4
?RunLine@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::RunLine, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  : 	PyObject * v = PyRun_String((char *) c_szSrc, Py_file_input, m_poDic, m_poDic);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	50		 push	 eax
  0000a	68 01 01 00 00	 push	 257			; 00000101H
  0000f	ff 75 08	 push	 DWORD PTR _c_szSrc$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyRun_StringFlags
  00018	8b c8		 mov	 ecx, eax
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 259  : 
; 260  : 	if (!v)

  0001d	85 c9		 test	 ecx, ecx
  0001f	75 0b		 jne	 SHORT $LN4@RunLine

; 261  : 	{
; 262  : 		Traceback();

  00021	e8 00 00 00 00	 call	 ?Traceback@@YAXXZ	; Traceback

; 263  : 		return false;

  00026	32 c0		 xor	 al, al

; 268  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@RunLine:

; 264  : 	}
; 265  : 
; 266  : 	Py_DECREF(v);

  0002c	83 01 ff	 add	 DWORD PTR [ecx], -1
  0002f	75 0c		 jne	 SHORT $LN2@RunLine
  00031	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00034	51		 push	 ecx
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	ff d0		 call	 eax
  0003a	83 c4 04	 add	 esp, 4
$LN2@RunLine:

; 267  : 	return true;

  0003d	b0 01		 mov	 al, 1

; 268  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?RunLine@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::RunLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z
_TEXT	SEGMENT
_pFunc$ = 8						; size = 4
?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z PROC ; CPythonLauncher::SetTraceFunc, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  : 	PyEval_SetTrace(pFunc, NULL);

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _pFunc$[ebp]
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_SetTrace
  0000e	83 c4 08	 add	 esp, 8

; 114  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z ENDP ; CPythonLauncher::SetTraceFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Create@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_c_szProgramName$ = 8					; size = 4
?Create@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::Create, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 118  : 	NANOBEGIN

  0000a	eb		 DB	 -21			; ffffffebH
  0000b	03		 DB	 3
  0000c	d6		 DB	 -42			; ffffffd6H
  0000d	d7		 DB	 -41			; ffffffd7H
  0000e	01		 DB	 1
  0000f	ff 75 08	 push	 DWORD PTR _c_szProgramName$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_SetProgramName

; 119  : 	Py_SetProgramName((char*)c_szProgramName);
; 120  : #ifdef _DEBUG
; 121  : 	PyEval_SetTrace(TraceFunc, NULL);
; 122  : #endif
; 123  : 	m_poModule = PyImport_AddModule((char *) "__main__");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_08EMKMIFM@__main__@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_AddModule
  00023	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00026	83 c4 08	 add	 esp, 8
  00029	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 124  : 
; 125  : 	if (!m_poModule)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 86 00 00
	00		 je	 $LN11@Create

; 126  : 		return false;
; 127  : 
; 128  : 	m_poDic = PyModule_GetDict(m_poModule);

  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_GetDict

; 129  : 
; 130  :     PyObject * builtins = PyImport_ImportModule("__builtin__");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EILMOIBE@__builtin__@
  00040	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_ImportModule

; 131  : 	PyModule_AddIntConstant(builtins, "TRUE", 1);

  00049	6a 01		 push	 1
  0004b	8b f8		 mov	 edi, eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_04HCDDPBNL@TRUE@
  00052	57		 push	 edi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant

; 132  : 	PyModule_AddIntConstant(builtins, "FALSE", 0);

  00059	6a 00		 push	 0
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  00060	57		 push	 edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant

; 133  :     PyDict_SetItemString(m_poDic, "__builtins__", builtins);

  00067	57		 push	 edi
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNFFDJII@__builtins__@
  0006d	ff 73 08	 push	 DWORD PTR [ebx+8]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyDict_SetItemString
  00076	83 c4 2c	 add	 esp, 44			; 0000002cH

; 134  : 	Py_DECREF(builtins);

  00079	83 07 ff	 add	 DWORD PTR [edi], -1
  0007c	75 0c		 jne	 SHORT $LN2@Create
  0007e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00081	57		 push	 edi
  00082	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00085	ff d0		 call	 eax
  00087	83 c4 04	 add	 esp, 4
$LN2@Create:

; 135  : 
; 136  : 	if (!RunLine("import __main__"))

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOEJKCPF@import?5__main__@
  0008f	8b cb		 mov	 ecx, ebx
  00091	e8 00 00 00 00	 call	 ?RunLine@CPythonLauncher@@QAE_NPBD@Z ; CPythonLauncher::RunLine
  00096	84 c0		 test	 al, al
  00098	74 20		 je	 SHORT $LN11@Create

; 137  : 		return false;
; 138  : 
; 139  : 	if (!RunLine("import sys"))

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GOKNMPOF@import?5sys@
  0009f	8b cb		 mov	 ecx, ebx
  000a1	e8 00 00 00 00	 call	 ?RunLine@CPythonLauncher@@QAE_NPBD@Z ; CPythonLauncher::RunLine
  000a6	84 c0		 test	 al, al
  000a8	74 10		 je	 SHORT $LN11@Create

; 140  : 		return false;
; 141  : 
; 142  : 	NANOEND

  000aa	eb		 DB	 -21			; ffffffebH
  000ab	03		 DB	 3
  000ac	d6		 DB	 -42			; ffffffd6H
  000ad	d7		 DB	 -41			; ffffffd7H
  000ae	00		 DB	 0
  000af	b0 01		 mov	 al, 1

; 143  : 	return true;
; 144  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
$LN11@Create:
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	32 c0		 xor	 al, al
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
?Create@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Clear@CPythonLauncher@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPythonLauncher@@QAEXXZ PROC			; CPythonLauncher::Clear, COMDAT
; _this$ = ecx

; 19   : 	Py_Finalize();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__Py_Finalize
?Clear@CPythonLauncher@@QAEXXZ ENDP			; CPythonLauncher::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??1CPythonLauncher@@UAE@XZ
_TEXT	SEGMENT
??1CPythonLauncher@@UAE@XZ PROC				; CPythonLauncher::~CPythonLauncher, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonLauncher@@6B@

; 14   : 	Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CPythonLauncher@@QAEXXZ ; CPythonLauncher::Clear
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h

; 19   : 	{

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00014	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton
  0001e	5e		 pop	 esi
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 15   : }

  0001f	c3		 ret	 0
??1CPythonLauncher@@UAE@XZ ENDP				; CPythonLauncher::~CPythonLauncher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??0CPythonLauncher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPythonLauncher@@QAE@XZ PROC				; CPythonLauncher::CPythonLauncher, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00007	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, esi ; CSingleton<CPythonLauncher>::ms_singleton
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\scriptLib\PythonLauncher.cpp

; 8    : {

  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonLauncher@@6B@

; 9    : 	Py_Initialize();

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_Initialize

; 10   : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CPythonLauncher@@QAE@XZ ENDP				; CPythonLauncher::CPythonLauncher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z PROC	; CSingleton<CPythonLauncher>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonLauncher>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\murat\Desktop\Siveps2-1-99-Project\source\client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ PROC		; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ ENDP		; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Old$1$ = 8						; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3988 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3989 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 6a 01 00
	00		 ja	 $LN5@reserve

; 3990 :             return; // nothing to do
; 3991 :         }
; 3992 : 
; 3993 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 08	 mov	 DWORD PTR __Old$1$[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 5c 01 00
	00		 je	 $LN5@reserve

; 3994 :             return; // nothing to do
; 3995 :         }
; 3996 : 
; 3997 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00029	57		 push	 edi
  0002a	0f 83 0d 01 00
	00		 jae	 $LN4@reserve

; 3998 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3999 :             _Reallocate_grow_by(

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 4e 01 00
	00		 jb	 $LN84@reserve

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004f	76 18		 jbe	 SHORT $LN15@reserve

; 4490 :             return _Max;

  00051	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00056	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	eb 5b		 jmp	 SHORT $LN82@reserve
$LN15@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b ca		 mov	 ecx, edx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 e9		 shr	 ecx, 1
  00072	2b c1		 sub	 eax, ecx
  00074	3b d0		 cmp	 edx, eax
  00076	76 18		 jbe	 SHORT $LN16@reserve

; 4494 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 34		 jmp	 SHORT $LN82@reserve
$LN16@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0e		 jb	 SHORT $LN23@reserve

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 14		 jmp	 SHORT $LN82@reserve
$LN23@reserve:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000b0	85 c0		 test	 eax, eax
  000b2	74 0e		 je	 SHORT $LN24@reserve

; 85   :         return ::operator new(_Bytes);

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000ba	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000bd	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000c0	eb 02		 jmp	 SHORT $LN82@reserve
$LN24@reserve:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000c2	33 c0		 xor	 eax, eax
$LN82@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4559 :         _My_data._Mysize      = _New_size;

  000c4	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4560 :         _My_data._Myres       = _New_capacity;
; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000c7	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000cd	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d0	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000d3	51		 push	 ecx
  000d4	83 fa 10	 cmp	 edx, 16			; 00000010H
  000d7	72 49		 jb	 SHORT $LN9@reserve

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d9	8b 3e		 mov	 edi, DWORD PTR [esi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000db	57		 push	 edi
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _memcpy

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e2	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e8	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 16		 jb	 SHORT $LN46@reserve

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	0f 87 88 00 00
	00		 ja	 $LN72@reserve

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00105	8b fa		 mov	 edi, edx
$LN46@reserve:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00107	51		 push	 ecx
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4004 :             _Mypair._Myval2._Mysize = _Old_size;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  00111	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4004 :             _Mypair._Myval2._Mysize = _Old_size;

  00114	89 06		 mov	 DWORD PTR [esi], eax
  00116	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi

; 4009 :             // deallocate everything; switch back to "small" mode
; 4010 :             _Become_small();
; 4011 :             return;
; 4012 :         }
; 4013 : 
; 4014 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 4015 :     }

  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
$LN9@reserve:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00122	56		 push	 esi
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _memcpy

; 4004 :             _Mypair._Myval2._Mysize = _Old_size;

  00129	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4004 :             _Mypair._Myval2._Mysize = _Old_size;

  0012f	89 06		 mov	 DWORD PTR [esi], eax
  00131	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi

; 4009 :             // deallocate everything; switch back to "small" mode
; 4010 :             _Become_small();
; 4011 :             return;
; 4012 :         }
; 4013 : 
; 4014 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 4015 :     }

  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
$LN4@reserve:

; 4005 :             return;
; 4006 :         }
; 4007 : 
; 4008 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  0013d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00140	73 42		 jae	 SHORT $LN80@reserve

; 2319 :         return _BUF_SIZE <= _Myres;

  00142	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4005 :             return;
; 4006 :         }
; 4007 : 
; 4008 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  00145	72 3d		 jb	 SHORT $LN80@reserve

; 4582 :         const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00147	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4583 :         auto& _Al          = _Getal();
; 4584 :         _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4585 :         _Traits::copy(_Mypair._Myval2._Bx._Buf, _Unfancy(_Ptr), _Mypair._Myval2._Mysize + 1);

  00149	40		 inc	 eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014a	50		 push	 eax
  0014b	57		 push	 edi
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 _memcpy

; 4586 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00152	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4586 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00158	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00159	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0015f	72 12		 jb	 SHORT $LN75@reserve

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00161	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00164	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00167	2b fa		 sub	 edi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00169	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0016c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0016f	77 1c		 ja	 SHORT $LN72@reserve

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00171	8b fa		 mov	 edi, edx
$LN75@reserve:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00173	51		 push	 ecx
  00174	57		 push	 edi
  00175	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4587 :         _Mypair._Myval2._Myres = _BUF_SIZE - 1;

  0017d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN80@reserve:
  00184	5f		 pop	 edi
$LN5@reserve:
  00185	5e		 pop	 esi

; 4009 :             // deallocate everything; switch back to "small" mode
; 4010 :             _Become_small();
; 4011 :             return;
; 4012 :         }
; 4013 : 
; 4014 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 4015 :     }

  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 04 00	 ret	 4
$LN72@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN84@reserve:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4544 :             _Xlen_string(); // result too long

  00192	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN81@reserve:
  00197	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b f2		 mov	 esi, edx

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL61@assign:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL61@assign
  0001a	2b f1		 sub	 esi, ecx

; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0001f	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN6@assign

; 2296 :         value_type* _Result = _Bx._Buf;

  00026	8b fb		 mov	 edi, ebx

; 2319 :         return _BUF_SIZE <= _Myres;

  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0002b	72 02		 jb	 SHORT $LN9@assign

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN9@assign:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	57		 push	 edi

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	8b c3		 mov	 eax, ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 3265 :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN6@assign:

; 4508 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 d4 00 00
	00		 ja	 $LN65@assign

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00058	8b fe		 mov	 edi, esi
  0005a	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 15		 jbe	 SHORT $LN23@assign

; 4490 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	83 c4 04	 add	 esp, 4
  00078	eb 52		 jmp	 SHORT $LN63@assign
$LN23@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b d1		 mov	 edx, ecx
  0007c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00081	d1 ea		 shr	 edx, 1
  00083	2b c2		 sub	 eax, edx
  00085	3b c8		 cmp	 ecx, eax
  00087	76 15		 jbe	 SHORT $LN24@assign

; 4494 :             return _Max;

  00089	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	eb 2e		 jmp	 SHORT $LN63@assign
$LN24@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000a1	3b f8		 cmp	 edi, eax
  000a3	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ae	72 0b		 jb	 SHORT $LN31@assign

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	83 c4 04	 add	 esp, 4
  000b9	eb 11		 jmp	 SHORT $LN63@assign
$LN31@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000bb	85 c0		 test	 eax, eax
  000bd	74 0b		 je	 SHORT $LN32@assign

; 85   :         return ::operator new(_Bytes);

  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000c8	eb 02		 jmp	 SHORT $LN63@assign
$LN32@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000ca	33 c0		 xor	 eax, eax
$LN63@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	56		 push	 esi
  000cd	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000d0	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	50		 push	 eax

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000d4	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000d7	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	e8 00 00 00 00	 call	 _memcpy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000df	8b 7d fc	 mov	 edi, DWORD PTR $T1[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000e5	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e8	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000ec	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ef	72 29		 jb	 SHORT $LN17@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000f1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fc	72 12		 jb	 SHORT $LN54@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fe	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00101	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00104	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00106	83 c0 fc	 add	 eax, -4			; fffffffcH
  00109	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010c	77 19		 ja	 SHORT $LN51@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010e	8b c2		 mov	 eax, edx
$LN54@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00110	51		 push	 ecx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00117	83 c4 08	 add	 esp, 8
$LN17@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3254 :         return _Reallocate_for(

  0011a	89 3b		 mov	 DWORD PTR [ebx], edi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0011c	8b c3		 mov	 eax, ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 3265 :     }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN51@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN65@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  0012c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN62@assign:
  00131	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv533 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv534 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv537 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3152 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3153 :         // append [_Ptr, _Ptr + _Count)
; 3154 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3155 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3156 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2296 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2319 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2297 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3157 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3158 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3159 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3172 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4490 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv537[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv537[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4494 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv537[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 85   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 244  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 85   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv534[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv533[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv534[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 264  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 3163 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3163 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3172 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4544 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2468 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2469 :         _Tidy_init();
; 2470 :     }

  00006	8b c1		 mov	 eax, ecx

; 4596 :         _My_data._Mysize = 0;

  00008	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0000f	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 2468 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2469 :         _Tidy_init();
; 2470 :     }

  00016	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
